
001Tasks_New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008580  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800893c  0800893c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800893c  0800893c  0001893c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008944  08008944  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008944  08008944  00018944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008948  08008948  00018948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800894c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00019b2c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20019b9c  20019b9c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000181a0  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000037ad  00000000  00000000  00038283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001620  00000000  00000000  0003ba30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001122  00000000  00000000  0003d050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024e0a  00000000  00000000  0003e172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001962f  00000000  00000000  00062f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dcc64  00000000  00000000  0007c5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000680c  00000000  00000000  00159210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  0015fa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086f8 	.word	0x080086f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080086f8 	.word	0x080086f8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20019480 	.word	0x20019480
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fcd9 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f877 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f909 	bl	8000830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061e:	f000 f8dd 	bl	80007dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	DWT_CTRL |= (1 << 0);
 8000622:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <main+0xc8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a2b      	ldr	r2, [pc, #172]	; (80006d4 <main+0xc8>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]
	//SEGGER_SYSVIEW_Conf();

	//SEGGER_SYSVIEW_Start();

#if TASK1
	sprintf(usr_msg, "Demo of Binary semaphore usage between 2 Tasks \r\n");
 800062e:	492a      	ldr	r1, [pc, #168]	; (80006d8 <main+0xcc>)
 8000630:	482a      	ldr	r0, [pc, #168]	; (80006dc <main+0xd0>)
 8000632:	f006 ff97 	bl	8007564 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, sizeof(usr_msg), HAL_MAX_DELAY);
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	22fa      	movs	r2, #250	; 0xfa
 800063c:	4927      	ldr	r1, [pc, #156]	; (80006dc <main+0xd0>)
 800063e:	4828      	ldr	r0, [pc, #160]	; (80006e0 <main+0xd4>)
 8000640:	f001 ff58 	bl	80024f4 <HAL_UART_Transmit>

	vSemaphoreCreateBinary(xWork);
 8000644:	2203      	movs	r2, #3
 8000646:	2100      	movs	r1, #0
 8000648:	2001      	movs	r0, #1
 800064a:	f002 fc1e 	bl	8002e8a <xQueueGenericCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <main+0xd8>)
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <main+0xd8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <main+0x5e>
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <main+0xd8>)
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	2300      	movs	r3, #0
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	f002 fc99 	bl	8002f9c <xQueueGenericSend>

	xWorkQueue = xQueueCreate(1, sizeof(unsigned int));
 800066a:	2200      	movs	r2, #0
 800066c:	2104      	movs	r1, #4
 800066e:	2001      	movs	r0, #1
 8000670:	f002 fc0b 	bl	8002e8a <xQueueGenericCreate>
 8000674:	4603      	mov	r3, r0
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <main+0xdc>)
 8000678:	6013      	str	r3, [r2, #0]

	if(xWork != NULL && xWorkQueue != NULL)
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <main+0xd8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d026      	beq.n	80006d0 <main+0xc4>
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <main+0xdc>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d022      	beq.n	80006d0 <main+0xc4>
	{
		xTaskCreate(xManagerTask, "Manager", 500, NULL, 2, &xTaskHandleM);
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <main+0xe0>)
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2302      	movs	r3, #2
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000698:	4915      	ldr	r1, [pc, #84]	; (80006f0 <main+0xe4>)
 800069a:	4816      	ldr	r0, [pc, #88]	; (80006f4 <main+0xe8>)
 800069c:	f003 fa0e 	bl	8003abc <xTaskCreate>
		xTaskCreate(xEmployeeTask, "Employee", 500, NULL, 2, &xTaskHandleE);
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <main+0xec>)
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2302      	movs	r3, #2
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2300      	movs	r3, #0
 80006aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006ae:	4913      	ldr	r1, [pc, #76]	; (80006fc <main+0xf0>)
 80006b0:	4813      	ldr	r0, [pc, #76]	; (8000700 <main+0xf4>)
 80006b2:	f003 fa03 	bl	8003abc <xTaskCreate>

		//start the scheduler
		vTaskStartScheduler();
 80006b6:	f003 fb8f 	bl	8003dd8 <vTaskStartScheduler>

		sprintf(usr_msg,"Queue/Sema create failed.. \r\n");
 80006ba:	4912      	ldr	r1, [pc, #72]	; (8000704 <main+0xf8>)
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <main+0xd0>)
 80006be:	f006 ff51 	bl	8007564 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, sizeof(usr_msg), HAL_MAX_DELAY);
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	22fa      	movs	r2, #250	; 0xfa
 80006c8:	4904      	ldr	r1, [pc, #16]	; (80006dc <main+0xd0>)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <main+0xd4>)
 80006cc:	f001 ff12 	bl	80024f4 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006d0:	e7fe      	b.n	80006d0 <main+0xc4>
 80006d2:	bf00      	nop
 80006d4:	e0001000 	.word	0xe0001000
 80006d8:	08008710 	.word	0x08008710
 80006dc:	200000e4 	.word	0x200000e4
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	200000d4 	.word	0x200000d4
 80006e8:	200000d8 	.word	0x200000d8
 80006ec:	200000dc 	.word	0x200000dc
 80006f0:	08008744 	.word	0x08008744
 80006f4:	08000aed 	.word	0x08000aed
 80006f8:	200000e0 	.word	0x200000e0
 80006fc:	0800874c 	.word	0x0800874c
 8000700:	08000b59 	.word	0x08000b59
 8000704:	08008758 	.word	0x08008758

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f006 ff97 	bl	800764a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a27      	ldr	r2, [pc, #156]	; (80007d4 <SystemClock_Config+0xcc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xd0>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800077c:	23a8      	movs	r3, #168	; 0xa8
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000784:	2307      	movs	r3, #7
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fef5 	bl	800157c <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000798:	f000 fa54 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2105      	movs	r1, #5
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f956 	bl	8001a6c <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c6:	f000 fa3d 	bl	8000c44 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	; 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_USART2_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000814:	f001 fe1e 	bl	8002454 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 fa11 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000008c 	.word	0x2000008c
 800082c:	40004400 	.word	0x40004400

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4ba2      	ldr	r3, [pc, #648]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4aa1      	ldr	r2, [pc, #644]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b9f      	ldr	r3, [pc, #636]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b9b      	ldr	r3, [pc, #620]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a9a      	ldr	r2, [pc, #616]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b98      	ldr	r3, [pc, #608]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b94      	ldr	r3, [pc, #592]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a93      	ldr	r2, [pc, #588]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b91      	ldr	r3, [pc, #580]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b8d      	ldr	r3, [pc, #564]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a8c      	ldr	r2, [pc, #560]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b8a      	ldr	r3, [pc, #552]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b86      	ldr	r3, [pc, #536]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a85      	ldr	r2, [pc, #532]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b83      	ldr	r3, [pc, #524]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b7f      	ldr	r3, [pc, #508]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a7e      	ldr	r2, [pc, #504]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b7c      	ldr	r3, [pc, #496]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	4879      	ldr	r0, [pc, #484]	; (8000ad8 <MX_GPIO_Init+0x2a8>)
 80008f4:	f000 fe28 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2101      	movs	r1, #1
 80008fc:	4877      	ldr	r0, [pc, #476]	; (8000adc <MX_GPIO_Init+0x2ac>)
 80008fe:	f000 fe23 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000902:	2200      	movs	r2, #0
 8000904:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000908:	4875      	ldr	r0, [pc, #468]	; (8000ae0 <MX_GPIO_Init+0x2b0>)
 800090a:	f000 fe1d 	bl	8001548 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090e:	2308      	movs	r3, #8
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	486c      	ldr	r0, [pc, #432]	; (8000ad8 <MX_GPIO_Init+0x2a8>)
 8000926:	f000 fc73 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4866      	ldr	r0, [pc, #408]	; (8000adc <MX_GPIO_Init+0x2ac>)
 8000942:	f000 fc65 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000946:	2308      	movs	r3, #8
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	485e      	ldr	r0, [pc, #376]	; (8000adc <MX_GPIO_Init+0x2ac>)
 8000962:	f000 fc55 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000966:	2301      	movs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	485a      	ldr	r0, [pc, #360]	; (8000ae4 <MX_GPIO_Init+0x2b4>)
 800097c:	f000 fc48 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000980:	2310      	movs	r3, #16
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000990:	2306      	movs	r3, #6
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4852      	ldr	r0, [pc, #328]	; (8000ae4 <MX_GPIO_Init+0x2b4>)
 800099c:	f000 fc38 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009a0:	23e0      	movs	r3, #224	; 0xe0
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009b0:	2305      	movs	r3, #5
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	484a      	ldr	r0, [pc, #296]	; (8000ae4 <MX_GPIO_Init+0x2b4>)
 80009bc:	f000 fc28 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009c0:	2304      	movs	r3, #4
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4845      	ldr	r0, [pc, #276]	; (8000ae8 <MX_GPIO_Init+0x2b8>)
 80009d4:	f000 fc1c 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ea:	2305      	movs	r3, #5
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	483c      	ldr	r0, [pc, #240]	; (8000ae8 <MX_GPIO_Init+0x2b8>)
 80009f6:	f000 fc0b 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009fa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4833      	ldr	r0, [pc, #204]	; (8000ae0 <MX_GPIO_Init+0x2b0>)
 8000a14:	f000 fbfc 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a18:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4829      	ldr	r0, [pc, #164]	; (8000adc <MX_GPIO_Init+0x2ac>)
 8000a36:	f000 fbeb 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4825      	ldr	r0, [pc, #148]	; (8000ae4 <MX_GPIO_Init+0x2b4>)
 8000a50:	f000 fbde 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a54:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a66:	230a      	movs	r3, #10
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481c      	ldr	r0, [pc, #112]	; (8000ae4 <MX_GPIO_Init+0x2b4>)
 8000a72:	f000 fbcd 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a76:	2320      	movs	r3, #32
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4815      	ldr	r0, [pc, #84]	; (8000ae0 <MX_GPIO_Init+0x2b0>)
 8000a8a:	f000 fbc1 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a8e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a94:	2312      	movs	r3, #18
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <MX_GPIO_Init+0x2b8>)
 8000aac:	f000 fbb0 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_GPIO_Init+0x2a8>)
 8000ac6:	f000 fba3 	bl	8001210 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aca:	bf00      	nop
 8000acc:	3730      	adds	r7, #48	; 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40020400 	.word	0x40020400

08000aec <xManagerTask>:
}
# endif

#if TASK1
void xManagerTask(void* param)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	uint8_t ticketID;

	xSemaphoreGive(xWork);
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <xManagerTask+0x60>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	2300      	movs	r3, #0
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	f002 fa4d 	bl	8002f9c <xQueueGenericSend>

	while(1)
	{
		xSemaphoreTake(xWork, portMAX_DELAY);
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <xManagerTask+0x60>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fd18 	bl	8003540 <xQueueSemaphoreTake>

		ticketID = (rand() & 0xFF);
 8000b10:	f006 fc28 	bl	8007364 <rand>
 8000b14:	4603      	mov	r3, r0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	73fb      	strb	r3, [r7, #15]

		xQueueSend(xWorkQueue,&ticketID,portMAX_DELAY);
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <xManagerTask+0x64>)
 8000b1c:	6818      	ldr	r0, [r3, #0]
 8000b1e:	f107 010f 	add.w	r1, r7, #15
 8000b22:	2300      	movs	r3, #0
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	f002 fa38 	bl	8002f9c <xQueueGenericSend>
		xSemaphoreGive(xWork);
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <xManagerTask+0x60>)
 8000b2e:	6818      	ldr	r0, [r3, #0]
 8000b30:	2300      	movs	r3, #0
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	f002 fa31 	bl	8002f9c <xQueueGenericSend>
		taskYIELD();
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <xManagerTask+0x68>)
 8000b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	f3bf 8f4f 	dsb	sy
 8000b46:	f3bf 8f6f 	isb	sy
		xSemaphoreTake(xWork, portMAX_DELAY);
 8000b4a:	e7da      	b.n	8000b02 <xManagerTask+0x16>
 8000b4c:	200000d4 	.word	0x200000d4
 8000b50:	200000d8 	.word	0x200000d8
 8000b54:	e000ed04 	.word	0xe000ed04

08000b58 <xEmployeeTask>:
	}
	vTaskDelete(NULL);
}

void xEmployeeTask(void* param)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

	portBASE_TYPE status;

	while(1)
	{
		xSemaphoreTake(xWork, portMAX_DELAY);
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <xEmployeeTask+0x70>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fce9 	bl	8003540 <xQueueSemaphoreTake>
		status = xQueueReceive(xWorkQueue, &ticketID, 0);
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <xEmployeeTask+0x74>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f107 010b 	add.w	r1, r7, #11
 8000b76:	2200      	movs	r2, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fbdb 	bl	8003334 <xQueueReceive>
 8000b7e:	60f8      	str	r0, [r7, #12]

		if(status != pdPASS)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d00b      	beq.n	8000b9e <xEmployeeTask+0x46>
		{
			sprintf(usr_msg,"Empty Queue, nothing to do.. \r\n");
 8000b86:	4912      	ldr	r1, [pc, #72]	; (8000bd0 <xEmployeeTask+0x78>)
 8000b88:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <xEmployeeTask+0x7c>)
 8000b8a:	f006 fceb 	bl	8007564 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, sizeof(usr_msg), HAL_MAX_DELAY);
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	22fa      	movs	r2, #250	; 0xfa
 8000b94:	490f      	ldr	r1, [pc, #60]	; (8000bd4 <xEmployeeTask+0x7c>)
 8000b96:	4810      	ldr	r0, [pc, #64]	; (8000bd8 <xEmployeeTask+0x80>)
 8000b98:	f001 fcac 	bl	80024f4 <HAL_UART_Transmit>
 8000b9c:	e003      	b.n	8000ba6 <xEmployeeTask+0x4e>
		}
		else{
			employee_do_work(ticketID);
 8000b9e:	7afb      	ldrb	r3, [r7, #11]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f81d 	bl	8000be0 <employee_do_work>
		}

		xSemaphoreGive(xWork);
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <xEmployeeTask+0x70>)
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	2300      	movs	r3, #0
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f002 f9f4 	bl	8002f9c <xQueueGenericSend>
		taskYIELD();
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <xEmployeeTask+0x84>)
 8000bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	f3bf 8f4f 	dsb	sy
 8000bc0:	f3bf 8f6f 	isb	sy
		xSemaphoreTake(xWork, portMAX_DELAY);
 8000bc4:	e7cc      	b.n	8000b60 <xEmployeeTask+0x8>
 8000bc6:	bf00      	nop
 8000bc8:	200000d4 	.word	0x200000d4
 8000bcc:	200000d8 	.word	0x200000d8
 8000bd0:	08008778 	.word	0x08008778
 8000bd4:	200000e4 	.word	0x200000e4
 8000bd8:	2000008c 	.word	0x2000008c
 8000bdc:	e000ed04 	.word	0xe000ed04

08000be0 <employee_do_work>:

	vTaskDelete(NULL);
}

void employee_do_work(uint8_t ticket_id)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b090      	sub	sp, #64	; 0x40
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	char msg [50];

	sprintf(msg, "Working on Ticket ID : %d\r\n",ticket_id);
 8000bea:	79fa      	ldrb	r2, [r7, #7]
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4909      	ldr	r1, [pc, #36]	; (8000c18 <employee_do_work+0x38>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f006 fcb6 	bl	8007564 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg), HAL_MAX_DELAY);
 8000bf8:	f107 010c 	add.w	r1, r7, #12
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	2232      	movs	r2, #50	; 0x32
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <employee_do_work+0x3c>)
 8000c04:	f001 fc76 	bl	80024f4 <HAL_UART_Transmit>
	vTaskDelay(ticket_id);
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 f8ac 	bl	8003d68 <vTaskDelay>
}
 8000c10:	bf00      	nop
 8000c12:	3740      	adds	r7, #64	; 0x40
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	08008798 	.word	0x08008798
 8000c1c:	2000008c 	.word	0x2000008c

08000c20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d101      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c32:	f000 f9eb 	bl	800100c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40001000 	.word	0x40001000

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c8e:	f004 fb23 	bl	80052d8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <HAL_UART_MspInit+0x84>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12b      	bne.n	8000d1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_UART_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cfa:	230c      	movs	r3, #12
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_UART_MspInit+0x8c>)
 8000d16:	f000 fa7b 	bl	8001210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40004400 	.word	0x40004400
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000

08000d30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08e      	sub	sp, #56	; 0x38
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <HAL_InitTick+0xe4>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <HAL_InitTick+0xe4>)
 8000d4a:	f043 0310 	orr.w	r3, r3, #16
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d50:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <HAL_InitTick+0xe4>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d5c:	f107 0210 	add.w	r2, r7, #16
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 f8a0 	bl	8001eac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d103      	bne.n	8000d7e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d76:	f001 f871 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 8000d7a:	6378      	str	r0, [r7, #52]	; 0x34
 8000d7c:	e004      	b.n	8000d88 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d7e:	f001 f86d 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 8000d82:	4603      	mov	r3, r0
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d8a:	4a23      	ldr	r2, [pc, #140]	; (8000e18 <HAL_InitTick+0xe8>)
 8000d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d90:	0c9b      	lsrs	r3, r3, #18
 8000d92:	3b01      	subs	r3, #1
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <HAL_InitTick+0xec>)
 8000d98:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <HAL_InitTick+0xf0>)
 8000d9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <HAL_InitTick+0xec>)
 8000d9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000da4:	4a1d      	ldr	r2, [pc, #116]	; (8000e1c <HAL_InitTick+0xec>)
 8000da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <HAL_InitTick+0xec>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <HAL_InitTick+0xec>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_InitTick+0xec>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dbc:	4817      	ldr	r0, [pc, #92]	; (8000e1c <HAL_InitTick+0xec>)
 8000dbe:	f001 f8a7 	bl	8001f10 <HAL_TIM_Base_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d11b      	bne.n	8000e08 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dd0:	4812      	ldr	r0, [pc, #72]	; (8000e1c <HAL_InitTick+0xec>)
 8000dd2:	f001 f8f7 	bl	8001fc4 <HAL_TIM_Base_Start_IT>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d111      	bne.n	8000e08 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000de4:	2036      	movs	r0, #54	; 0x36
 8000de6:	f000 fa05 	bl	80011f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d808      	bhi.n	8000e02 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	2036      	movs	r0, #54	; 0x36
 8000df6:	f000 f9e1 	bl	80011bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_InitTick+0xf4>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e002      	b.n	8000e08 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3738      	adds	r7, #56	; 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40023800 	.word	0x40023800
 8000e18:	431bde83 	.word	0x431bde83
 8000e1c:	200001e0 	.word	0x200001e0
 8000e20:	40001000 	.word	0x40001000
 8000e24:	20000004 	.word	0x20000004

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <TIM6_DAC_IRQHandler+0x10>)
 8000e5a:	f001 f923 	bl	80020a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001e0 	.word	0x200001e0

08000e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return 1;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_kill>:

int _kill(int pid, int sig)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e82:	f006 fc1f 	bl	80076c4 <__errno>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2216      	movs	r2, #22
 8000e8a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_exit>:

void _exit (int status)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ffe7 	bl	8000e78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eaa:	e7fe      	b.n	8000eaa <_exit+0x12>

08000eac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e00a      	b.n	8000ed4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ebe:	f3af 8000 	nop.w
 8000ec2:	4601      	mov	r1, r0
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	b2ca      	uxtb	r2, r1
 8000ecc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf0      	blt.n	8000ebe <_read+0x12>
  }

  return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_isatty>:

int _isatty(int file)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f78:	f7ff ffea 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7e:	490d      	ldr	r1, [pc, #52]	; (8000fb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f94:	4c0a      	ldr	r4, [pc, #40]	; (8000fc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f006 fb95 	bl	80076d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa6:	f7ff fb31 	bl	800060c <main>
  bx  lr    
 8000faa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fb8:	0800894c 	.word	0x0800894c
  ldr r2, =_sbss
 8000fbc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fc0:	20019b9c 	.word	0x20019b9c

08000fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC_IRQHandler>
	...

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <HAL_Init+0x40>)
 8000fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_Init+0x40>)
 8000fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x40>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f8d8 	bl	80011a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff fe9a 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff fe28 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008
 8001030:	20000228 	.word	0x20000228

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000228 	.word	0x20000228

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	60d3      	str	r3, [r2, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ff4c 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ce:	f7ff ff61 	bl	8001094 <__NVIC_GetPriorityGrouping>
 80011d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	68b9      	ldr	r1, [r7, #8]
 80011d8:	6978      	ldr	r0, [r7, #20]
 80011da:	f7ff ffb1 	bl	8001140 <NVIC_EncodePriority>
 80011de:	4602      	mov	r2, r0
 80011e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff80 	bl	80010ec <__NVIC_SetPriority>
}
 80011ec:	bf00      	nop
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff54 	bl	80010b0 <__NVIC_EnableIRQ>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e16b      	b.n	8001504 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800122c:	2201      	movs	r2, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 815a 	bne.w	80014fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	2b01      	cmp	r3, #1
 8001254:	d005      	beq.n	8001262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125e:	2b02      	cmp	r3, #2
 8001260:	d130      	bne.n	80012c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f003 0201 	and.w	r2, r3, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d017      	beq.n	8001300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d123      	bne.n	8001354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	08da      	lsrs	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3208      	adds	r2, #8
 800134e:	69b9      	ldr	r1, [r7, #24]
 8001350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0203 	and.w	r2, r3, #3
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80b4 	beq.w	80014fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b60      	ldr	r3, [pc, #384]	; (800151c <HAL_GPIO_Init+0x30c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a5f      	ldr	r2, [pc, #380]	; (800151c <HAL_GPIO_Init+0x30c>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b5d      	ldr	r3, [pc, #372]	; (800151c <HAL_GPIO_Init+0x30c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b2:	4a5b      	ldr	r2, [pc, #364]	; (8001520 <HAL_GPIO_Init+0x310>)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a52      	ldr	r2, [pc, #328]	; (8001524 <HAL_GPIO_Init+0x314>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d02b      	beq.n	8001436 <HAL_GPIO_Init+0x226>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a51      	ldr	r2, [pc, #324]	; (8001528 <HAL_GPIO_Init+0x318>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d025      	beq.n	8001432 <HAL_GPIO_Init+0x222>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a50      	ldr	r2, [pc, #320]	; (800152c <HAL_GPIO_Init+0x31c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d01f      	beq.n	800142e <HAL_GPIO_Init+0x21e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4f      	ldr	r2, [pc, #316]	; (8001530 <HAL_GPIO_Init+0x320>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_Init+0x21a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4e      	ldr	r2, [pc, #312]	; (8001534 <HAL_GPIO_Init+0x324>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x216>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4d      	ldr	r2, [pc, #308]	; (8001538 <HAL_GPIO_Init+0x328>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x212>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4c      	ldr	r2, [pc, #304]	; (800153c <HAL_GPIO_Init+0x32c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x20e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <HAL_GPIO_Init+0x330>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x20a>
 8001416:	2307      	movs	r3, #7
 8001418:	e00e      	b.n	8001438 <HAL_GPIO_Init+0x228>
 800141a:	2308      	movs	r3, #8
 800141c:	e00c      	b.n	8001438 <HAL_GPIO_Init+0x228>
 800141e:	2306      	movs	r3, #6
 8001420:	e00a      	b.n	8001438 <HAL_GPIO_Init+0x228>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x228>
 8001426:	2304      	movs	r3, #4
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x228>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x228>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x228>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x228>
 8001436:	2300      	movs	r3, #0
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001448:	4935      	ldr	r1, [pc, #212]	; (8001520 <HAL_GPIO_Init+0x310>)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_GPIO_Init+0x334>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147a:	4a32      	ldr	r2, [pc, #200]	; (8001544 <HAL_GPIO_Init+0x334>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001480:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_GPIO_Init+0x334>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a4:	4a27      	ldr	r2, [pc, #156]	; (8001544 <HAL_GPIO_Init+0x334>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_GPIO_Init+0x334>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ce:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_GPIO_Init+0x334>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_GPIO_Init+0x334>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f8:	4a12      	ldr	r2, [pc, #72]	; (8001544 <HAL_GPIO_Init+0x334>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	f67f ae90 	bls.w	800122c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	40020800 	.word	0x40020800
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40021400 	.word	0x40021400
 800153c:	40021800 	.word	0x40021800
 8001540:	40021c00 	.word	0x40021c00
 8001544:	40013c00 	.word	0x40013c00

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e267      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d075      	beq.n	8001686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800159a:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d00c      	beq.n	80015c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a6:	4b85      	ldr	r3, [pc, #532]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d112      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b2:	4b82      	ldr	r3, [pc, #520]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015be:	d10b      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	4b7e      	ldr	r3, [pc, #504]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d05b      	beq.n	8001684 <HAL_RCC_OscConfig+0x108>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d157      	bne.n	8001684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e242      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e0:	d106      	bne.n	80015f0 <HAL_RCC_OscConfig+0x74>
 80015e2:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a75      	ldr	r2, [pc, #468]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e01d      	b.n	800162c <HAL_RCC_OscConfig+0xb0>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x98>
 80015fa:	4b70      	ldr	r3, [pc, #448]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6f      	ldr	r2, [pc, #444]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b6d      	ldr	r3, [pc, #436]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a6c      	ldr	r2, [pc, #432]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0xb0>
 8001614:	4b69      	ldr	r3, [pc, #420]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a68      	ldr	r2, [pc, #416]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800161a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b66      	ldr	r3, [pc, #408]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a65      	ldr	r2, [pc, #404]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fcfe 	bl	8001034 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fcfa 	bl	8001034 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e207      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0xc0>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fcea 	bl	8001034 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fce6 	bl	8001034 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1f3      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001676:	4b51      	ldr	r3, [pc, #324]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0xe8>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d063      	beq.n	800175a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001692:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d11c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016aa:	4b44      	ldr	r3, [pc, #272]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_RCC_OscConfig+0x152>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e1c7      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4937      	ldr	r1, [pc, #220]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	e03a      	b.n	800175a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d020      	beq.n	800172e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_RCC_OscConfig+0x244>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f2:	f7ff fc9f 	bl	8001034 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fa:	f7ff fc9b 	bl	8001034 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e1a8      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170c:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4925      	ldr	r1, [pc, #148]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
 800172c:	e015      	b.n	800175a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_RCC_OscConfig+0x244>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff fc7e 	bl	8001034 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800173c:	f7ff fc7a 	bl	8001034 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e187      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d036      	beq.n	80017d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d016      	beq.n	800179c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_RCC_OscConfig+0x248>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff fc5e 	bl	8001034 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177c:	f7ff fc5a 	bl	8001034 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e167      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCC_OscConfig+0x240>)
 8001790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x200>
 800179a:	e01b      	b.n	80017d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_OscConfig+0x248>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff fc47 	bl	8001034 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a8:	e00e      	b.n	80017c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017aa:	f7ff fc43 	bl	8001034 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d907      	bls.n	80017c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e150      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
 80017bc:	40023800 	.word	0x40023800
 80017c0:	42470000 	.word	0x42470000
 80017c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	4b88      	ldr	r3, [pc, #544]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80017ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ea      	bne.n	80017aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8097 	beq.w	8001910 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e6:	4b81      	ldr	r3, [pc, #516]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10f      	bne.n	8001812 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b7d      	ldr	r3, [pc, #500]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a7c      	ldr	r2, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180e:	2301      	movs	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001812:	4b77      	ldr	r3, [pc, #476]	; (80019f0 <HAL_RCC_OscConfig+0x474>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181e:	4b74      	ldr	r3, [pc, #464]	; (80019f0 <HAL_RCC_OscConfig+0x474>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a73      	ldr	r2, [pc, #460]	; (80019f0 <HAL_RCC_OscConfig+0x474>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182a:	f7ff fc03 	bl	8001034 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001832:	f7ff fbff 	bl	8001034 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e10c      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_RCC_OscConfig+0x474>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x2ea>
 8001858:	4b64      	ldr	r3, [pc, #400]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	4a63      	ldr	r2, [pc, #396]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6713      	str	r3, [r2, #112]	; 0x70
 8001864:	e01c      	b.n	80018a0 <HAL_RCC_OscConfig+0x324>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b05      	cmp	r3, #5
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x30c>
 800186e:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a5e      	ldr	r2, [pc, #376]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
 800187a:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a5b      	ldr	r2, [pc, #364]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
 8001886:	e00b      	b.n	80018a0 <HAL_RCC_OscConfig+0x324>
 8001888:	4b58      	ldr	r3, [pc, #352]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a57      	ldr	r2, [pc, #348]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
 8001894:	4b55      	ldr	r3, [pc, #340]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a54      	ldr	r2, [pc, #336]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800189a:	f023 0304 	bic.w	r3, r3, #4
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d015      	beq.n	80018d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff fbc4 	bl	8001034 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b0:	f7ff fbc0 	bl	8001034 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e0cb      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	4b49      	ldr	r3, [pc, #292]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0ee      	beq.n	80018b0 <HAL_RCC_OscConfig+0x334>
 80018d2:	e014      	b.n	80018fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fbae 	bl	8001034 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018dc:	f7ff fbaa 	bl	8001034 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e0b5      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f2:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1ee      	bne.n	80018dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d105      	bne.n	8001910 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001904:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	4a38      	ldr	r2, [pc, #224]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800190a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80a1 	beq.w	8001a5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b08      	cmp	r3, #8
 8001924:	d05c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d141      	bne.n	80019b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <HAL_RCC_OscConfig+0x478>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fb7e 	bl	8001034 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff fb7a 	bl	8001034 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e087      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	019b      	lsls	r3, r3, #6
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	085b      	lsrs	r3, r3, #1
 8001972:	3b01      	subs	r3, #1
 8001974:	041b      	lsls	r3, r3, #16
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	491b      	ldr	r1, [pc, #108]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x478>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff fb53 	bl	8001034 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff fb4f 	bl	8001034 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e05c      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x416>
 80019b0:	e054      	b.n	8001a5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_RCC_OscConfig+0x478>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fb3c 	bl	8001034 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff fb38 	bl	8001034 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e045      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_RCC_OscConfig+0x470>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x444>
 80019de:	e03d      	b.n	8001a5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e038      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40007000 	.word	0x40007000
 80019f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x4ec>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d028      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d121      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d11a      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a28:	4013      	ands	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d111      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	3b01      	subs	r3, #1
 8001a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0cc      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d90c      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0b8      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	494d      	ldr	r1, [pc, #308]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d044      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d119      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e06f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e067      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f023 0203 	bic.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4934      	ldr	r1, [pc, #208]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b5c:	f7ff fa6a 	bl	8001034 <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7ff fa66 	bl	8001034 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e04f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 020c 	and.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1eb      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d20c      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e032      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4916      	ldr	r1, [pc, #88]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	490e      	ldr	r1, [pc, #56]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf2:	f000 f821 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	490a      	ldr	r1, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	5ccb      	ldrb	r3, [r1, r3]
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f88c 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	0800883c 	.word	0x0800883c
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c3c:	b094      	sub	sp, #80	; 0x50
 8001c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	647b      	str	r3, [r7, #68]	; 0x44
 8001c44:	2300      	movs	r3, #0
 8001c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c48:	2300      	movs	r3, #0
 8001c4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c50:	4b79      	ldr	r3, [pc, #484]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d00d      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x40>
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	f200 80e1 	bhi.w	8001e24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x34>
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c6a:	e0db      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b73      	ldr	r3, [pc, #460]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c70:	e0db      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c72:	4b73      	ldr	r3, [pc, #460]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c76:	e0d8      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c78:	4b6f      	ldr	r3, [pc, #444]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c82:	4b6d      	ldr	r3, [pc, #436]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d063      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8e:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	2200      	movs	r2, #0
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ca6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001caa:	4622      	mov	r2, r4
 8001cac:	462b      	mov	r3, r5
 8001cae:	f04f 0000 	mov.w	r0, #0
 8001cb2:	f04f 0100 	mov.w	r1, #0
 8001cb6:	0159      	lsls	r1, r3, #5
 8001cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cbc:	0150      	lsls	r0, r2, #5
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	1a51      	subs	r1, r2, r1
 8001cc6:	6139      	str	r1, [r7, #16]
 8001cc8:	4629      	mov	r1, r5
 8001cca:	eb63 0301 	sbc.w	r3, r3, r1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cdc:	4659      	mov	r1, fp
 8001cde:	018b      	lsls	r3, r1, #6
 8001ce0:	4651      	mov	r1, sl
 8001ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ce6:	4651      	mov	r1, sl
 8001ce8:	018a      	lsls	r2, r1, #6
 8001cea:	4651      	mov	r1, sl
 8001cec:	ebb2 0801 	subs.w	r8, r2, r1
 8001cf0:	4659      	mov	r1, fp
 8001cf2:	eb63 0901 	sbc.w	r9, r3, r1
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d0a:	4690      	mov	r8, r2
 8001d0c:	4699      	mov	r9, r3
 8001d0e:	4623      	mov	r3, r4
 8001d10:	eb18 0303 	adds.w	r3, r8, r3
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	462b      	mov	r3, r5
 8001d18:	eb49 0303 	adc.w	r3, r9, r3
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	024b      	lsls	r3, r1, #9
 8001d2e:	4621      	mov	r1, r4
 8001d30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d34:	4621      	mov	r1, r4
 8001d36:	024a      	lsls	r2, r1, #9
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3e:	2200      	movs	r2, #0
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d48:	f7fe fae2 	bl	8000310 <__aeabi_uldivmod>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4613      	mov	r3, r2
 8001d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d54:	e058      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	099b      	lsrs	r3, r3, #6
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	4611      	mov	r1, r2
 8001d62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d66:	623b      	str	r3, [r7, #32]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d70:	4642      	mov	r2, r8
 8001d72:	464b      	mov	r3, r9
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0159      	lsls	r1, r3, #5
 8001d7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d82:	0150      	lsls	r0, r2, #5
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4641      	mov	r1, r8
 8001d8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d8e:	4649      	mov	r1, r9
 8001d90:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001da0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001da4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001da8:	ebb2 040a 	subs.w	r4, r2, sl
 8001dac:	eb63 050b 	sbc.w	r5, r3, fp
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	00eb      	lsls	r3, r5, #3
 8001dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dbe:	00e2      	lsls	r2, r4, #3
 8001dc0:	4614      	mov	r4, r2
 8001dc2:	461d      	mov	r5, r3
 8001dc4:	4643      	mov	r3, r8
 8001dc6:	18e3      	adds	r3, r4, r3
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	464b      	mov	r3, r9
 8001dcc:	eb45 0303 	adc.w	r3, r5, r3
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dde:	4629      	mov	r1, r5
 8001de0:	028b      	lsls	r3, r1, #10
 8001de2:	4621      	mov	r1, r4
 8001de4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001de8:	4621      	mov	r1, r4
 8001dea:	028a      	lsls	r2, r1, #10
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001df2:	2200      	movs	r2, #0
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	61fa      	str	r2, [r7, #28]
 8001df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dfc:	f7fe fa88 	bl	8000310 <__aeabi_uldivmod>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4613      	mov	r3, r2
 8001e06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	0c1b      	lsrs	r3, r3, #16
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	3301      	adds	r3, #1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e22:	e002      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3750      	adds	r7, #80	; 0x50
 8001e30:	46bd      	mov	sp, r7
 8001e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	007a1200 	.word	0x007a1200

08001e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000000 	.word	0x20000000

08001e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e60:	f7ff fff0 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0a9b      	lsrs	r3, r3, #10
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4903      	ldr	r1, [pc, #12]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	0800884c 	.word	0x0800884c

08001e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e88:	f7ff ffdc 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	0b5b      	lsrs	r3, r3, #13
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4903      	ldr	r1, [pc, #12]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	0800884c 	.word	0x0800884c

08001eac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	220f      	movs	r2, #15
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_RCC_GetClockConfig+0x5c>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_RCC_GetClockConfig+0x5c>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_RCC_GetClockConfig+0x5c>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_GetClockConfig+0x5c>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <HAL_RCC_GetClockConfig+0x60>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0207 	and.w	r2, r3, #7
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	601a      	str	r2, [r3, #0]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40023c00 	.word	0x40023c00

08001f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e041      	b.n	8001fa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f839 	bl	8001fae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f000 f9c0 	bl	80022d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d001      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e04e      	b.n	800207a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a23      	ldr	r2, [pc, #140]	; (8002088 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d022      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0x80>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002006:	d01d      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0x80>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1f      	ldr	r2, [pc, #124]	; (800208c <HAL_TIM_Base_Start_IT+0xc8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d018      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0x80>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1e      	ldr	r2, [pc, #120]	; (8002090 <HAL_TIM_Base_Start_IT+0xcc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0x80>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_TIM_Base_Start_IT+0xd0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00e      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0x80>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <HAL_TIM_Base_Start_IT+0xd4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d009      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0x80>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a19      	ldr	r2, [pc, #100]	; (800209c <HAL_TIM_Base_Start_IT+0xd8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_TIM_Base_Start_IT+0x80>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d111      	bne.n	8002068 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b06      	cmp	r3, #6
 8002054:	d010      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002066:	e007      	b.n	8002078 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40010000 	.word	0x40010000
 800208c:	40000400 	.word	0x40000400
 8002090:	40000800 	.word	0x40000800
 8002094:	40000c00 	.word	0x40000c00
 8002098:	40010400 	.word	0x40010400
 800209c:	40014000 	.word	0x40014000
 80020a0:	40001800 	.word	0x40001800

080020a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d020      	beq.n	8002108 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d01b      	beq.n	8002108 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0202 	mvn.w	r2, #2
 80020d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8d2 	bl	8002298 <HAL_TIM_IC_CaptureCallback>
 80020f4:	e005      	b.n	8002102 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8c4 	bl	8002284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f8d5 	bl	80022ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b00      	cmp	r3, #0
 8002110:	d020      	beq.n	8002154 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01b      	beq.n	8002154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0204 	mvn.w	r2, #4
 8002124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8ac 	bl	8002298 <HAL_TIM_IC_CaptureCallback>
 8002140:	e005      	b.n	800214e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f89e 	bl	8002284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f8af 	bl	80022ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d020      	beq.n	80021a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01b      	beq.n	80021a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0208 	mvn.w	r2, #8
 8002170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2204      	movs	r2, #4
 8002176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f886 	bl	8002298 <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f878 	bl	8002284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f889 	bl	80022ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d020      	beq.n	80021ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01b      	beq.n	80021ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0210 	mvn.w	r2, #16
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2208      	movs	r2, #8
 80021c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f860 	bl	8002298 <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f852 	bl	8002284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f863 	bl	80022ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00c      	beq.n	8002210 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0201 	mvn.w	r2, #1
 8002208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fd08 	bl	8000c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00c      	beq.n	8002234 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f906 	bl	8002440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00c      	beq.n	8002258 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f834 	bl	80022c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00c      	beq.n	800227c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0220 	mvn.w	r2, #32
 8002274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f8d8 	bl	800242c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800227c:	bf00      	nop
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a46      	ldr	r2, [pc, #280]	; (8002400 <TIM_Base_SetConfig+0x12c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <TIM_Base_SetConfig+0x40>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f2:	d00f      	beq.n	8002314 <TIM_Base_SetConfig+0x40>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a43      	ldr	r2, [pc, #268]	; (8002404 <TIM_Base_SetConfig+0x130>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00b      	beq.n	8002314 <TIM_Base_SetConfig+0x40>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a42      	ldr	r2, [pc, #264]	; (8002408 <TIM_Base_SetConfig+0x134>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d007      	beq.n	8002314 <TIM_Base_SetConfig+0x40>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a41      	ldr	r2, [pc, #260]	; (800240c <TIM_Base_SetConfig+0x138>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d003      	beq.n	8002314 <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a40      	ldr	r2, [pc, #256]	; (8002410 <TIM_Base_SetConfig+0x13c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d108      	bne.n	8002326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a35      	ldr	r2, [pc, #212]	; (8002400 <TIM_Base_SetConfig+0x12c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d02b      	beq.n	8002386 <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002334:	d027      	beq.n	8002386 <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a32      	ldr	r2, [pc, #200]	; (8002404 <TIM_Base_SetConfig+0x130>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d023      	beq.n	8002386 <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a31      	ldr	r2, [pc, #196]	; (8002408 <TIM_Base_SetConfig+0x134>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01f      	beq.n	8002386 <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a30      	ldr	r2, [pc, #192]	; (800240c <TIM_Base_SetConfig+0x138>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01b      	beq.n	8002386 <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <TIM_Base_SetConfig+0x13c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d017      	beq.n	8002386 <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a2e      	ldr	r2, [pc, #184]	; (8002414 <TIM_Base_SetConfig+0x140>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2d      	ldr	r2, [pc, #180]	; (8002418 <TIM_Base_SetConfig+0x144>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00f      	beq.n	8002386 <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a2c      	ldr	r2, [pc, #176]	; (800241c <TIM_Base_SetConfig+0x148>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00b      	beq.n	8002386 <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a2b      	ldr	r2, [pc, #172]	; (8002420 <TIM_Base_SetConfig+0x14c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <TIM_Base_SetConfig+0x150>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d003      	beq.n	8002386 <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a29      	ldr	r2, [pc, #164]	; (8002428 <TIM_Base_SetConfig+0x154>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d108      	bne.n	8002398 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <TIM_Base_SetConfig+0x12c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d003      	beq.n	80023cc <TIM_Base_SetConfig+0xf8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <TIM_Base_SetConfig+0x13c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d103      	bne.n	80023d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d105      	bne.n	80023f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f023 0201 	bic.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	611a      	str	r2, [r3, #16]
  }
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40010000 	.word	0x40010000
 8002404:	40000400 	.word	0x40000400
 8002408:	40000800 	.word	0x40000800
 800240c:	40000c00 	.word	0x40000c00
 8002410:	40010400 	.word	0x40010400
 8002414:	40014000 	.word	0x40014000
 8002418:	40014400 	.word	0x40014400
 800241c:	40014800 	.word	0x40014800
 8002420:	40001800 	.word	0x40001800
 8002424:	40001c00 	.word	0x40001c00
 8002428:	40002000 	.word	0x40002000

0800242c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e042      	b.n	80024ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fe fc10 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2224      	movs	r2, #36	; 0x24
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f973 	bl	8002784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b20      	cmp	r3, #32
 8002512:	d175      	bne.n	8002600 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <HAL_UART_Transmit+0x2c>
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e06e      	b.n	8002602 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2221      	movs	r2, #33	; 0x21
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002532:	f7fe fd7f 	bl	8001034 <HAL_GetTick>
 8002536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	88fa      	ldrh	r2, [r7, #6]
 800253c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	88fa      	ldrh	r2, [r7, #6]
 8002542:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254c:	d108      	bne.n	8002560 <HAL_UART_Transmit+0x6c>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d104      	bne.n	8002560 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	e003      	b.n	8002568 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002568:	e02e      	b.n	80025c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	2180      	movs	r1, #128	; 0x80
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f848 	bl	800260a <UART_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e03a      	b.n	8002602 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10b      	bne.n	80025aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	3302      	adds	r3, #2
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	e007      	b.n	80025ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	3301      	adds	r3, #1
 80025b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1cb      	bne.n	800256a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2200      	movs	r2, #0
 80025da:	2140      	movs	r1, #64	; 0x40
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f814 	bl	800260a <UART_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e006      	b.n	8002602 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4613      	mov	r3, r2
 8002618:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800261a:	e03b      	b.n	8002694 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d037      	beq.n	8002694 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002624:	f7fe fd06 	bl	8001034 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	6a3a      	ldr	r2, [r7, #32]
 8002630:	429a      	cmp	r2, r3
 8002632:	d302      	bcc.n	800263a <UART_WaitOnFlagUntilTimeout+0x30>
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e03a      	b.n	80026b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d023      	beq.n	8002694 <UART_WaitOnFlagUntilTimeout+0x8a>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b80      	cmp	r3, #128	; 0x80
 8002650:	d020      	beq.n	8002694 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d01d      	beq.n	8002694 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b08      	cmp	r3, #8
 8002664:	d116      	bne.n	8002694 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f81d 	bl	80026bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2208      	movs	r2, #8
 8002686:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e00f      	b.n	80026b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4013      	ands	r3, r2
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d0b4      	beq.n	800261c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026bc:	b480      	push	{r7}
 80026be:	b095      	sub	sp, #84	; 0x54
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	330c      	adds	r3, #12
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ce:	e853 3f00 	ldrex	r3, [r3]
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026e4:	643a      	str	r2, [r7, #64]	; 0x40
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026ec:	e841 2300 	strex	r3, r2, [r1]
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e5      	bne.n	80026c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3314      	adds	r3, #20
 80026fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	e853 3f00 	ldrex	r3, [r3]
 8002706:	61fb      	str	r3, [r7, #28]
   return(result);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3314      	adds	r3, #20
 8002716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002718:	62fa      	str	r2, [r7, #44]	; 0x2c
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800271e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002720:	e841 2300 	strex	r3, r2, [r1]
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e5      	bne.n	80026f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	2b01      	cmp	r3, #1
 8002732:	d119      	bne.n	8002768 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	330c      	adds	r3, #12
 800273a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	e853 3f00 	ldrex	r3, [r3]
 8002742:	60bb      	str	r3, [r7, #8]
   return(result);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f023 0310 	bic.w	r3, r3, #16
 800274a:	647b      	str	r3, [r7, #68]	; 0x44
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002754:	61ba      	str	r2, [r7, #24]
 8002756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	6979      	ldr	r1, [r7, #20]
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	e841 2300 	strex	r3, r2, [r1]
 8002760:	613b      	str	r3, [r7, #16]
   return(result);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e5      	bne.n	8002734 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002776:	bf00      	nop
 8002778:	3754      	adds	r7, #84	; 0x54
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002788:	b0c0      	sub	sp, #256	; 0x100
 800278a:	af00      	add	r7, sp, #0
 800278c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	68d9      	ldr	r1, [r3, #12]
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	ea40 0301 	orr.w	r3, r0, r1
 80027ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027dc:	f021 010c 	bic.w	r1, r1, #12
 80027e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027ea:	430b      	orrs	r3, r1
 80027ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fe:	6999      	ldr	r1, [r3, #24]
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	ea40 0301 	orr.w	r3, r0, r1
 800280a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b8f      	ldr	r3, [pc, #572]	; (8002a50 <UART_SetConfig+0x2cc>)
 8002814:	429a      	cmp	r2, r3
 8002816:	d005      	beq.n	8002824 <UART_SetConfig+0xa0>
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b8d      	ldr	r3, [pc, #564]	; (8002a54 <UART_SetConfig+0x2d0>)
 8002820:	429a      	cmp	r2, r3
 8002822:	d104      	bne.n	800282e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002824:	f7ff fb2e 	bl	8001e84 <HAL_RCC_GetPCLK2Freq>
 8002828:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800282c:	e003      	b.n	8002836 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800282e:	f7ff fb15 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 8002832:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002840:	f040 810c 	bne.w	8002a5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002848:	2200      	movs	r2, #0
 800284a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800284e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002852:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002856:	4622      	mov	r2, r4
 8002858:	462b      	mov	r3, r5
 800285a:	1891      	adds	r1, r2, r2
 800285c:	65b9      	str	r1, [r7, #88]	; 0x58
 800285e:	415b      	adcs	r3, r3
 8002860:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002862:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002866:	4621      	mov	r1, r4
 8002868:	eb12 0801 	adds.w	r8, r2, r1
 800286c:	4629      	mov	r1, r5
 800286e:	eb43 0901 	adc.w	r9, r3, r1
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800287e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002886:	4690      	mov	r8, r2
 8002888:	4699      	mov	r9, r3
 800288a:	4623      	mov	r3, r4
 800288c:	eb18 0303 	adds.w	r3, r8, r3
 8002890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002894:	462b      	mov	r3, r5
 8002896:	eb49 0303 	adc.w	r3, r9, r3
 800289a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800289e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028b2:	460b      	mov	r3, r1
 80028b4:	18db      	adds	r3, r3, r3
 80028b6:	653b      	str	r3, [r7, #80]	; 0x50
 80028b8:	4613      	mov	r3, r2
 80028ba:	eb42 0303 	adc.w	r3, r2, r3
 80028be:	657b      	str	r3, [r7, #84]	; 0x54
 80028c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028c8:	f7fd fd22 	bl	8000310 <__aeabi_uldivmod>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <UART_SetConfig+0x2d4>)
 80028d2:	fba3 2302 	umull	r2, r3, r3, r2
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	011c      	lsls	r4, r3, #4
 80028da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028de:	2200      	movs	r2, #0
 80028e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028ec:	4642      	mov	r2, r8
 80028ee:	464b      	mov	r3, r9
 80028f0:	1891      	adds	r1, r2, r2
 80028f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80028f4:	415b      	adcs	r3, r3
 80028f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028fc:	4641      	mov	r1, r8
 80028fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002902:	4649      	mov	r1, r9
 8002904:	eb43 0b01 	adc.w	fp, r3, r1
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002914:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800291c:	4692      	mov	sl, r2
 800291e:	469b      	mov	fp, r3
 8002920:	4643      	mov	r3, r8
 8002922:	eb1a 0303 	adds.w	r3, sl, r3
 8002926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800292a:	464b      	mov	r3, r9
 800292c:	eb4b 0303 	adc.w	r3, fp, r3
 8002930:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002940:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002944:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002948:	460b      	mov	r3, r1
 800294a:	18db      	adds	r3, r3, r3
 800294c:	643b      	str	r3, [r7, #64]	; 0x40
 800294e:	4613      	mov	r3, r2
 8002950:	eb42 0303 	adc.w	r3, r2, r3
 8002954:	647b      	str	r3, [r7, #68]	; 0x44
 8002956:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800295a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800295e:	f7fd fcd7 	bl	8000310 <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4611      	mov	r1, r2
 8002968:	4b3b      	ldr	r3, [pc, #236]	; (8002a58 <UART_SetConfig+0x2d4>)
 800296a:	fba3 2301 	umull	r2, r3, r3, r1
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2264      	movs	r2, #100	; 0x64
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	1acb      	subs	r3, r1, r3
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800297e:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <UART_SetConfig+0x2d4>)
 8002980:	fba3 2302 	umull	r2, r3, r3, r2
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800298c:	441c      	add	r4, r3
 800298e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002992:	2200      	movs	r2, #0
 8002994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002998:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800299c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029a0:	4642      	mov	r2, r8
 80029a2:	464b      	mov	r3, r9
 80029a4:	1891      	adds	r1, r2, r2
 80029a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80029a8:	415b      	adcs	r3, r3
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029b0:	4641      	mov	r1, r8
 80029b2:	1851      	adds	r1, r2, r1
 80029b4:	6339      	str	r1, [r7, #48]	; 0x30
 80029b6:	4649      	mov	r1, r9
 80029b8:	414b      	adcs	r3, r1
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029c8:	4659      	mov	r1, fp
 80029ca:	00cb      	lsls	r3, r1, #3
 80029cc:	4651      	mov	r1, sl
 80029ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029d2:	4651      	mov	r1, sl
 80029d4:	00ca      	lsls	r2, r1, #3
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	4642      	mov	r2, r8
 80029de:	189b      	adds	r3, r3, r2
 80029e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029e4:	464b      	mov	r3, r9
 80029e6:	460a      	mov	r2, r1
 80029e8:	eb42 0303 	adc.w	r3, r2, r3
 80029ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a04:	460b      	mov	r3, r1
 8002a06:	18db      	adds	r3, r3, r3
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	eb42 0303 	adc.w	r3, r2, r3
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a1a:	f7fd fc79 	bl	8000310 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <UART_SetConfig+0x2d4>)
 8002a24:	fba3 1302 	umull	r1, r3, r3, r2
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2164      	movs	r1, #100	; 0x64
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	3332      	adds	r3, #50	; 0x32
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <UART_SetConfig+0x2d4>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	f003 0207 	and.w	r2, r3, #7
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4422      	add	r2, r4
 8002a4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a4c:	e106      	b.n	8002c5c <UART_SetConfig+0x4d8>
 8002a4e:	bf00      	nop
 8002a50:	40011000 	.word	0x40011000
 8002a54:	40011400 	.word	0x40011400
 8002a58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a60:	2200      	movs	r2, #0
 8002a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a6e:	4642      	mov	r2, r8
 8002a70:	464b      	mov	r3, r9
 8002a72:	1891      	adds	r1, r2, r2
 8002a74:	6239      	str	r1, [r7, #32]
 8002a76:	415b      	adcs	r3, r3
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a7e:	4641      	mov	r1, r8
 8002a80:	1854      	adds	r4, r2, r1
 8002a82:	4649      	mov	r1, r9
 8002a84:	eb43 0501 	adc.w	r5, r3, r1
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	00eb      	lsls	r3, r5, #3
 8002a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a96:	00e2      	lsls	r2, r4, #3
 8002a98:	4614      	mov	r4, r2
 8002a9a:	461d      	mov	r5, r3
 8002a9c:	4643      	mov	r3, r8
 8002a9e:	18e3      	adds	r3, r4, r3
 8002aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002aa4:	464b      	mov	r3, r9
 8002aa6:	eb45 0303 	adc.w	r3, r5, r3
 8002aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002aba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002aca:	4629      	mov	r1, r5
 8002acc:	008b      	lsls	r3, r1, #2
 8002ace:	4621      	mov	r1, r4
 8002ad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	008a      	lsls	r2, r1, #2
 8002ad8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002adc:	f7fd fc18 	bl	8000310 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4b60      	ldr	r3, [pc, #384]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	011c      	lsls	r4, r3, #4
 8002aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002af8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002afc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	61b9      	str	r1, [r7, #24]
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b10:	4641      	mov	r1, r8
 8002b12:	1851      	adds	r1, r2, r1
 8002b14:	6139      	str	r1, [r7, #16]
 8002b16:	4649      	mov	r1, r9
 8002b18:	414b      	adcs	r3, r1
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b28:	4659      	mov	r1, fp
 8002b2a:	00cb      	lsls	r3, r1, #3
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b32:	4651      	mov	r1, sl
 8002b34:	00ca      	lsls	r2, r1, #3
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b44:	464b      	mov	r3, r9
 8002b46:	460a      	mov	r2, r1
 8002b48:	eb42 0303 	adc.w	r3, r2, r3
 8002b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b68:	4649      	mov	r1, r9
 8002b6a:	008b      	lsls	r3, r1, #2
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b72:	4641      	mov	r1, r8
 8002b74:	008a      	lsls	r2, r1, #2
 8002b76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b7a:	f7fd fbc9 	bl	8000310 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002b86:	fba3 2301 	umull	r2, r3, r3, r1
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2264      	movs	r2, #100	; 0x64
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	1acb      	subs	r3, r1, r3
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	3332      	adds	r3, #50	; 0x32
 8002b98:	4a33      	ldr	r2, [pc, #204]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba4:	441c      	add	r4, r3
 8002ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002baa:	2200      	movs	r2, #0
 8002bac:	673b      	str	r3, [r7, #112]	; 0x70
 8002bae:	677a      	str	r2, [r7, #116]	; 0x74
 8002bb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	1891      	adds	r1, r2, r2
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	415b      	adcs	r3, r3
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	1851      	adds	r1, r2, r1
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	4649      	mov	r1, r9
 8002bcc:	414b      	adcs	r3, r1
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bdc:	4659      	mov	r1, fp
 8002bde:	00cb      	lsls	r3, r1, #3
 8002be0:	4651      	mov	r1, sl
 8002be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be6:	4651      	mov	r1, sl
 8002be8:	00ca      	lsls	r2, r1, #3
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	460a      	mov	r2, r1
 8002bfa:	eb42 0303 	adc.w	r3, r2, r3
 8002bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	663b      	str	r3, [r7, #96]	; 0x60
 8002c0a:	667a      	str	r2, [r7, #100]	; 0x64
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c18:	4649      	mov	r1, r9
 8002c1a:	008b      	lsls	r3, r1, #2
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c22:	4641      	mov	r1, r8
 8002c24:	008a      	lsls	r2, r1, #2
 8002c26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c2a:	f7fd fb71 	bl	8000310 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002c34:	fba3 1302 	umull	r1, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	2164      	movs	r1, #100	; 0x64
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	3332      	adds	r3, #50	; 0x32
 8002c46:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	f003 020f 	and.w	r2, r3, #15
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4422      	add	r2, r4
 8002c5a:	609a      	str	r2, [r3, #8]
}
 8002c5c:	bf00      	nop
 8002c5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c62:	46bd      	mov	sp, r7
 8002c64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c68:	51eb851f 	.word	0x51eb851f

08002c6c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f103 0208 	add.w	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f103 0208 	add.w	r2, r3, #8
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f103 0208 	add.w	r2, r3, #8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d103      	bne.n	8002d2e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	e00c      	b.n	8002d48 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3308      	adds	r3, #8
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e002      	b.n	8002d3c <vListInsert+0x2e>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d2f6      	bcs.n	8002d36 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6892      	ldr	r2, [r2, #8]
 8002d96:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6852      	ldr	r2, [r2, #4]
 8002da0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d103      	bne.n	8002db4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	1e5a      	subs	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002dfe:	f002 fae9 	bl	80053d4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	68f9      	ldr	r1, [r7, #12]
 8002e0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	68f9      	ldr	r1, [r7, #12]
 8002e32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	441a      	add	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	22ff      	movs	r2, #255	; 0xff
 8002e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	22ff      	movs	r2, #255	; 0xff
 8002e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00f      	beq.n	8002e7c <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3310      	adds	r3, #16
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 fa21 	bl	80042a8 <xTaskRemoveFromEventList>
 8002e66:	e009      	b.n	8002e7c <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3310      	adds	r3, #16
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fefd 	bl	8002c6c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3324      	adds	r3, #36	; 0x24
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fef8 	bl	8002c6c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002e7c:	f002 fada 	bl	8005434 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002e80:	2301      	movs	r3, #1
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b08c      	sub	sp, #48	; 0x30
 8002e8e:	af02      	add	r7, sp, #8
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	4613      	mov	r3, r2
 8002e96:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	61bb      	str	r3, [r7, #24]
    }
 8002eb0:	bf00      	nop
 8002eb2:	e7fe      	b.n	8002eb2 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	fb02 f303 	mul.w	r3, r2, r3
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d006      	beq.n	8002ed2 <xQueueGenericCreate+0x48>
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d101      	bne.n	8002ed6 <xQueueGenericCreate+0x4c>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <xQueueGenericCreate+0x4e>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <xQueueGenericCreate+0x68>
        __asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	617b      	str	r3, [r7, #20]
    }
 8002eee:	bf00      	nop
 8002ef0:	e7fe      	b.n	8002ef0 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002ef8:	d90a      	bls.n	8002f10 <xQueueGenericCreate+0x86>
        __asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	613b      	str	r3, [r7, #16]
    }
 8002f0c:	bf00      	nop
 8002f0e:	e7fe      	b.n	8002f0e <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	3350      	adds	r3, #80	; 0x50
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 fb89 	bl	800562c <pvPortMalloc>
 8002f1a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00d      	beq.n	8002f3e <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3350      	adds	r3, #80	; 0x50
 8002f2a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f2c:	79fa      	ldrb	r2, [r7, #7]
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	4613      	mov	r3, r2
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f805 	bl	8002f48 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
    }
 8002f40:	4618      	mov	r0, r3
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d103      	bne.n	8002f64 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	e002      	b.n	8002f6a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f76:	2101      	movs	r1, #1
 8002f78:	69b8      	ldr	r0, [r7, #24]
 8002f7a:	f7ff ff2b 	bl	8002dd4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	68f9      	ldr	r1, [r7, #12]
 8002f8c:	2073      	movs	r0, #115	; 0x73
 8002f8e:	f003 fb25 	bl	80065dc <SEGGER_SYSVIEW_RecordU32x3>
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b090      	sub	sp, #64	; 0x40
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <xQueueGenericSend+0x32>
        __asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <xQueueGenericSend+0x40>
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <xQueueGenericSend+0x44>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <xQueueGenericSend+0x46>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <xQueueGenericSend+0x60>
        __asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d103      	bne.n	800300a <xQueueGenericSend+0x6e>
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <xQueueGenericSend+0x72>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <xQueueGenericSend+0x74>
 800300e:	2300      	movs	r3, #0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <xQueueGenericSend+0x8e>
        __asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	623b      	str	r3, [r7, #32]
    }
 8003026:	bf00      	nop
 8003028:	e7fe      	b.n	8003028 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800302a:	f001 fad7 	bl	80045dc <xTaskGetSchedulerState>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <xQueueGenericSend+0x9e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <xQueueGenericSend+0xa2>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <xQueueGenericSend+0xa4>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <xQueueGenericSend+0xbe>
        __asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	61fb      	str	r3, [r7, #28]
    }
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800305a:	f002 f9bb 	bl	80053d4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <xQueueGenericSend+0xd4>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d11f      	bne.n	80030b0 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	4618      	mov	r0, r3
 8003074:	f004 f81c 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	460b      	mov	r3, r1
 8003082:	4601      	mov	r1, r0
 8003084:	205a      	movs	r0, #90	; 0x5a
 8003086:	f003 fb1f 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003090:	f000 fb9e 	bl	80037d0 <prvCopyDataToQueue>
 8003094:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2b00      	cmp	r3, #0
 800309c:	d004      	beq.n	80030a8 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	3324      	adds	r3, #36	; 0x24
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 f900 	bl	80042a8 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80030a8:	f002 f9c4 	bl	8005434 <vPortExitCritical>
                return pdPASS;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e07d      	b.n	80031ac <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d110      	bne.n	80030d8 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80030b6:	f002 f9bd 	bl	8005434 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	4618      	mov	r0, r3
 80030be:	f003 fff7 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	460b      	mov	r3, r1
 80030cc:	4601      	mov	r1, r0
 80030ce:	205a      	movs	r0, #90	; 0x5a
 80030d0:	f003 fafa 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e069      	b.n	80031ac <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 80030d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80030de:	f107 0314 	add.w	r3, r7, #20
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 f946 	bl	8004374 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80030e8:	2301      	movs	r3, #1
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80030ec:	f002 f9a2 	bl	8005434 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80030f0:	f000 fed4 	bl	8003e9c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80030f4:	f002 f96e 	bl	80053d4 <vPortEnterCritical>
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030fe:	b25b      	sxtb	r3, r3
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d103      	bne.n	800310e <xQueueGenericSend+0x172>
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003114:	b25b      	sxtb	r3, r3
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d103      	bne.n	8003124 <xQueueGenericSend+0x188>
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003124:	f002 f986 	bl	8005434 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003128:	1d3a      	adds	r2, r7, #4
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f001 f935 	bl	80043a0 <xTaskCheckForTimeOut>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d124      	bne.n	8003186 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800313c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800313e:	f000 fc3f 	bl	80039c0 <prvIsQueueFull>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d018      	beq.n	800317a <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	3310      	adds	r3, #16
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f001 f857 	bl	8004204 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003158:	f000 fbca 	bl	80038f0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800315c:	f000 feac 	bl	8003eb8 <xTaskResumeAll>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	f47f af79 	bne.w	800305a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <xQueueGenericSend+0x218>)
 800316a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	e76f      	b.n	800305a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800317a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800317c:	f000 fbb8 	bl	80038f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003180:	f000 fe9a 	bl	8003eb8 <xTaskResumeAll>
 8003184:	e769      	b.n	800305a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003188:	f000 fbb2 	bl	80038f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800318c:	f000 fe94 	bl	8003eb8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	4618      	mov	r0, r3
 8003194:	f003 ff8c 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	460b      	mov	r3, r1
 80031a2:	4601      	mov	r1, r0
 80031a4:	205a      	movs	r0, #90	; 0x5a
 80031a6:	f003 fa8f 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80031aa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3738      	adds	r7, #56	; 0x38
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	e000ed04 	.word	0xe000ed04

080031b8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b090      	sub	sp, #64	; 0x40
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80031e2:	bf00      	nop
 80031e4:	e7fe      	b.n	80031e4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <xQueueGenericSendFromISR+0x3c>
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <xQueueGenericSendFromISR+0x40>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <xQueueGenericSendFromISR+0x42>
 80031f8:	2300      	movs	r3, #0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003210:	bf00      	nop
 8003212:	e7fe      	b.n	8003212 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d103      	bne.n	8003222 <xQueueGenericSendFromISR+0x6a>
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <xQueueGenericSendFromISR+0x6e>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <xQueueGenericSendFromISR+0x70>
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	623b      	str	r3, [r7, #32]
    }
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003242:	f002 f9b3 	bl	80055ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003246:	f3ef 8211 	mrs	r2, BASEPRI
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	61fa      	str	r2, [r7, #28]
 800325c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800325e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	429a      	cmp	r2, r3
 800326c:	d302      	bcc.n	8003274 <xQueueGenericSendFromISR+0xbc>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d148      	bne.n	8003306 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800327a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003286:	4618      	mov	r0, r3
 8003288:	f003 ff12 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 800328c:	4601      	mov	r1, r0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	461a      	mov	r2, r3
 8003292:	2060      	movs	r0, #96	; 0x60
 8003294:	f003 f948 	bl	8006528 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800329e:	f000 fa97 	bl	80037d0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80032a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d112      	bne.n	80032d2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d025      	beq.n	8003300 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	3324      	adds	r3, #36	; 0x24
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fff5 	bl	80042a8 <xTaskRemoveFromEventList>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01d      	beq.n	8003300 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01a      	beq.n	8003300 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e016      	b.n	8003300 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80032d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80032d6:	2b7f      	cmp	r3, #127	; 0x7f
 80032d8:	d10a      	bne.n	80032f0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	617b      	str	r3, [r7, #20]
    }
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032f4:	3301      	adds	r3, #1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	b25a      	sxtb	r2, r3
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003300:	2301      	movs	r3, #1
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003304:	e00b      	b.n	800331e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003308:	4618      	mov	r0, r3
 800330a:	f003 fed1 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 800330e:	4601      	mov	r1, r0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	461a      	mov	r2, r3
 8003314:	2060      	movs	r0, #96	; 0x60
 8003316:	f003 f907 	bl	8006528 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800331a:	2300      	movs	r3, #0
 800331c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003328:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800332a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800332c:	4618      	mov	r0, r3
 800332e:	3740      	adds	r7, #64	; 0x40
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b08f      	sub	sp, #60	; 0x3c
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003340:	2300      	movs	r3, #0
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <xQueueReceive+0x30>
        __asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	623b      	str	r3, [r7, #32]
    }
 8003360:	bf00      	nop
 8003362:	e7fe      	b.n	8003362 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d103      	bne.n	8003372 <xQueueReceive+0x3e>
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <xQueueReceive+0x42>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <xQueueReceive+0x44>
 8003376:	2300      	movs	r3, #0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <xQueueReceive+0x5e>
        __asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	61fb      	str	r3, [r7, #28]
    }
 800338e:	bf00      	nop
 8003390:	e7fe      	b.n	8003390 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003392:	f001 f923 	bl	80045dc <xTaskGetSchedulerState>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <xQueueReceive+0x6e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <xQueueReceive+0x72>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <xQueueReceive+0x74>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <xQueueReceive+0x8e>
        __asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	61bb      	str	r3, [r7, #24]
    }
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80033c2:	f002 f807 	bl	80053d4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d024      	beq.n	800341c <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033d6:	f000 fa65 	bl	80038a4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	4618      	mov	r0, r3
 80033de:	f003 fe67 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 80033e2:	4604      	mov	r4, r0
 80033e4:	2000      	movs	r0, #0
 80033e6:	f003 fe63 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 80033ea:	4602      	mov	r2, r0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2101      	movs	r1, #1
 80033f0:	9100      	str	r1, [sp, #0]
 80033f2:	4621      	mov	r1, r4
 80033f4:	205c      	movs	r0, #92	; 0x5c
 80033f6:	f003 f967 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	1e5a      	subs	r2, r3, #1
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d004      	beq.n	8003414 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	3310      	adds	r3, #16
 800340e:	4618      	mov	r0, r3
 8003410:	f000 ff4a 	bl	80042a8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003414:	f002 f80e 	bl	8005434 <vPortExitCritical>
                return pdPASS;
 8003418:	2301      	movs	r3, #1
 800341a:	e08a      	b.n	8003532 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d113      	bne.n	800344a <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003422:	f002 f807 	bl	8005434 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	4618      	mov	r0, r3
 800342a:	f003 fe41 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 800342e:	4604      	mov	r4, r0
 8003430:	2000      	movs	r0, #0
 8003432:	f003 fe3d 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8003436:	4602      	mov	r2, r0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2101      	movs	r1, #1
 800343c:	9100      	str	r1, [sp, #0]
 800343e:	4621      	mov	r1, r4
 8003440:	205c      	movs	r0, #92	; 0x5c
 8003442:	f003 f941 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003446:	2300      	movs	r3, #0
 8003448:	e073      	b.n	8003532 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003450:	f107 0310 	add.w	r3, r7, #16
 8003454:	4618      	mov	r0, r3
 8003456:	f000 ff8d 	bl	8004374 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800345a:	2301      	movs	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800345e:	f001 ffe9 	bl	8005434 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003462:	f000 fd1b 	bl	8003e9c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003466:	f001 ffb5 	bl	80053d4 <vPortEnterCritical>
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003470:	b25b      	sxtb	r3, r3
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d103      	bne.n	8003480 <xQueueReceive+0x14c>
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003486:	b25b      	sxtb	r3, r3
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d103      	bne.n	8003496 <xQueueReceive+0x162>
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003496:	f001 ffcd 	bl	8005434 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800349a:	1d3a      	adds	r2, r7, #4
 800349c:	f107 0310 	add.w	r3, r7, #16
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 ff7c 	bl	80043a0 <xTaskCheckForTimeOut>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d124      	bne.n	80034f8 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034b0:	f000 fa70 	bl	8003994 <prvIsQueueEmpty>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d018      	beq.n	80034ec <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	3324      	adds	r3, #36	; 0x24
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4611      	mov	r1, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fe9e 	bl	8004204 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80034c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ca:	f000 fa11 	bl	80038f0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80034ce:	f000 fcf3 	bl	8003eb8 <xTaskResumeAll>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f47f af74 	bne.w	80033c2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <xQueueReceive+0x208>)
 80034dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	e76a      	b.n	80033c2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80034ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ee:	f000 f9ff 	bl	80038f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80034f2:	f000 fce1 	bl	8003eb8 <xTaskResumeAll>
 80034f6:	e764      	b.n	80033c2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80034f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034fa:	f000 f9f9 	bl	80038f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80034fe:	f000 fcdb 	bl	8003eb8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003504:	f000 fa46 	bl	8003994 <prvIsQueueEmpty>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	f43f af59 	beq.w	80033c2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	4618      	mov	r0, r3
 8003514:	f003 fdcc 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8003518:	4604      	mov	r4, r0
 800351a:	2000      	movs	r0, #0
 800351c:	f003 fdc8 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8003520:	4602      	mov	r2, r0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2101      	movs	r1, #1
 8003526:	9100      	str	r1, [sp, #0]
 8003528:	4621      	mov	r1, r4
 800352a:	205c      	movs	r0, #92	; 0x5c
 800352c:	f003 f8cc 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003530:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003532:	4618      	mov	r0, r3
 8003534:	3734      	adds	r7, #52	; 0x34
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}
 800353a:	bf00      	nop
 800353c:	e000ed04 	.word	0xe000ed04

08003540 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b091      	sub	sp, #68	; 0x44
 8003544:	af02      	add	r7, sp, #8
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800354a:	2300      	movs	r3, #0
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003552:	2300      	movs	r3, #0
 8003554:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <xQueueSemaphoreTake+0x32>
        __asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	623b      	str	r3, [r7, #32]
    }
 800356e:	bf00      	nop
 8003570:	e7fe      	b.n	8003570 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	61fb      	str	r3, [r7, #28]
    }
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003590:	f001 f824 	bl	80045dc <xTaskGetSchedulerState>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <xQueueSemaphoreTake+0x60>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <xQueueSemaphoreTake+0x64>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <xQueueSemaphoreTake+0x66>
 80035a4:	2300      	movs	r3, #0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10a      	bne.n	80035c0 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	61bb      	str	r3, [r7, #24]
    }
 80035bc:	bf00      	nop
 80035be:	e7fe      	b.n	80035be <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80035c0:	f001 ff08 	bl	80053d4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d029      	beq.n	8003624 <xQueueSemaphoreTake+0xe4>
            {
                traceQUEUE_RECEIVE( pxQueue );
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	4618      	mov	r0, r3
 80035d4:	f003 fd6c 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 80035d8:	4604      	mov	r4, r0
 80035da:	2000      	movs	r0, #0
 80035dc:	f003 fd68 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 80035e0:	4602      	mov	r2, r0
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	9100      	str	r1, [sp, #0]
 80035e8:	4621      	mov	r1, r4
 80035ea:	205c      	movs	r0, #92	; 0x5c
 80035ec:	f003 f86c 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	1e5a      	subs	r2, r3, #1
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d104      	bne.n	800360a <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003600:	f001 f99c 	bl	800493c <pvTaskIncrementMutexHeldCount>
 8003604:	4602      	mov	r2, r0
 8003606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003608:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <xQueueSemaphoreTake+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	3310      	adds	r3, #16
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fe46 	bl	80042a8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800361c:	f001 ff0a 	bl	8005434 <vPortExitCritical>
                return pdPASS;
 8003620:	2301      	movs	r3, #1
 8003622:	e0b7      	b.n	8003794 <xQueueSemaphoreTake+0x254>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d121      	bne.n	800366e <xQueueSemaphoreTake+0x12e>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <xQueueSemaphoreTake+0x106>
        __asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	617b      	str	r3, [r7, #20]
    }
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xQueueSemaphoreTake+0x104>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003646:	f001 fef5 	bl	8005434 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364c:	4618      	mov	r0, r3
 800364e:	f003 fd2f 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8003652:	4604      	mov	r4, r0
 8003654:	2000      	movs	r0, #0
 8003656:	f003 fd2b 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 800365a:	4602      	mov	r2, r0
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	9100      	str	r1, [sp, #0]
 8003662:	4621      	mov	r1, r4
 8003664:	205c      	movs	r0, #92	; 0x5c
 8003666:	f003 f82f 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800366a:	2300      	movs	r3, #0
 800366c:	e092      	b.n	8003794 <xQueueSemaphoreTake+0x254>
                }
                else if( xEntryTimeSet == pdFALSE )
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <xQueueSemaphoreTake+0x142>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003674:	f107 030c 	add.w	r3, r7, #12
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fe7b 	bl	8004374 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800367e:	2301      	movs	r3, #1
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003682:	f001 fed7 	bl	8005434 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003686:	f000 fc09 	bl	8003e9c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800368a:	f001 fea3 	bl	80053d4 <vPortEnterCritical>
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003694:	b25b      	sxtb	r3, r3
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d103      	bne.n	80036a4 <xQueueSemaphoreTake+0x164>
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036aa:	b25b      	sxtb	r3, r3
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d103      	bne.n	80036ba <xQueueSemaphoreTake+0x17a>
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ba:	f001 febb 	bl	8005434 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036be:	463a      	mov	r2, r7
 80036c0:	f107 030c 	add.w	r3, r7, #12
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fe6a 	bl	80043a0 <xTaskCheckForTimeOut>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d132      	bne.n	8003738 <xQueueSemaphoreTake+0x1f8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036d4:	f000 f95e 	bl	8003994 <prvIsQueueEmpty>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d026      	beq.n	800372c <xQueueSemaphoreTake+0x1ec>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <xQueueSemaphoreTake+0x1ba>
                        {
                            taskENTER_CRITICAL();
 80036e6:	f001 fe75 	bl	80053d4 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 ff92 	bl	8004618 <xTaskPriorityInherit>
 80036f4:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80036f6:	f001 fe9d 	bl	8005434 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	3324      	adds	r3, #36	; 0x24
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fd7e 	bl	8004204 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800370a:	f000 f8f1 	bl	80038f0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800370e:	f000 fbd3 	bl	8003eb8 <xTaskResumeAll>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	f47f af53 	bne.w	80035c0 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <xQueueSemaphoreTake+0x25c>)
 800371c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	e749      	b.n	80035c0 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800372c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800372e:	f000 f8df 	bl	80038f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003732:	f000 fbc1 	bl	8003eb8 <xTaskResumeAll>
 8003736:	e743      	b.n	80035c0 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800373a:	f000 f8d9 	bl	80038f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800373e:	f000 fbbb 	bl	8003eb8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003744:	f000 f926 	bl	8003994 <prvIsQueueEmpty>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	f43f af38 	beq.w	80035c0 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00d      	beq.n	8003772 <xQueueSemaphoreTake+0x232>
                        {
                            taskENTER_CRITICAL();
 8003756:	f001 fe3d 	bl	80053d4 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800375a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800375c:	f000 f820 	bl	80037a0 <prvGetDisinheritPriorityAfterTimeout>
 8003760:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003768:	4618      	mov	r0, r3
 800376a:	f001 f84f 	bl	800480c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800376e:	f001 fe61 	bl	8005434 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	4618      	mov	r0, r3
 8003776:	f003 fc9b 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 800377a:	4604      	mov	r4, r0
 800377c:	2000      	movs	r0, #0
 800377e:	f003 fc97 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8003782:	4602      	mov	r2, r0
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2101      	movs	r1, #1
 8003788:	9100      	str	r1, [sp, #0]
 800378a:	4621      	mov	r1, r4
 800378c:	205c      	movs	r0, #92	; 0x5c
 800378e:	f002 ff9b 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003792:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003794:	4618      	mov	r0, r3
 8003796:	373c      	adds	r7, #60	; 0x3c
 8003798:	46bd      	mov	sp, r7
 800379a:	bd90      	pop	{r4, r7, pc}
 800379c:	e000ed04 	.word	0xe000ed04

080037a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d006      	beq.n	80037be <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f1c3 0305 	rsb	r3, r3, #5
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	e001      	b.n	80037c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80037c2:	68fb      	ldr	r3, [r7, #12]
    }
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10d      	bne.n	800380a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d14d      	bne.n	8003892 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 ff86 	bl	800470c <xTaskPriorityDisinherit>
 8003800:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	e043      	b.n	8003892 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d119      	bne.n	8003844 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6858      	ldr	r0, [r3, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	461a      	mov	r2, r3
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	f003 ff7f 	bl	800771e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	441a      	add	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	429a      	cmp	r2, r3
 8003838:	d32b      	bcc.n	8003892 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	e026      	b.n	8003892 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68d8      	ldr	r0, [r3, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	461a      	mov	r2, r3
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	f003 ff65 	bl	800771e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	425b      	negs	r3, r3
 800385e:	441a      	add	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d207      	bcs.n	8003880 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	425b      	negs	r3, r3
 800387a:	441a      	add	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d105      	bne.n	8003892 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	3b01      	subs	r3, #1
 8003890:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800389a:	697b      	ldr	r3, [r7, #20]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d018      	beq.n	80038e8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	441a      	add	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d303      	bcc.n	80038d8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68d9      	ldr	r1, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	461a      	mov	r2, r3
 80038e2:	6838      	ldr	r0, [r7, #0]
 80038e4:	f003 ff1b 	bl	800771e <memcpy>
    }
}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80038f8:	f001 fd6c 	bl	80053d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003902:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003904:	e011      	b.n	800392a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d012      	beq.n	8003934 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3324      	adds	r3, #36	; 0x24
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fcc8 	bl	80042a8 <xTaskRemoveFromEventList>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800391e:	f000 fda5 	bl	800446c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	3b01      	subs	r3, #1
 8003926:	b2db      	uxtb	r3, r3
 8003928:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392e:	2b00      	cmp	r3, #0
 8003930:	dce9      	bgt.n	8003906 <prvUnlockQueue+0x16>
 8003932:	e000      	b.n	8003936 <prvUnlockQueue+0x46>
                        break;
 8003934:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	22ff      	movs	r2, #255	; 0xff
 800393a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800393e:	f001 fd79 	bl	8005434 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003942:	f001 fd47 	bl	80053d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800394c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800394e:	e011      	b.n	8003974 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d012      	beq.n	800397e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3310      	adds	r3, #16
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fca3 	bl	80042a8 <xTaskRemoveFromEventList>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003968:	f000 fd80 	bl	800446c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800396c:	7bbb      	ldrb	r3, [r7, #14]
 800396e:	3b01      	subs	r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003974:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003978:	2b00      	cmp	r3, #0
 800397a:	dce9      	bgt.n	8003950 <prvUnlockQueue+0x60>
 800397c:	e000      	b.n	8003980 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800397e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	22ff      	movs	r2, #255	; 0xff
 8003984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003988:	f001 fd54 	bl	8005434 <vPortExitCritical>
}
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800399c:	f001 fd1a 	bl	80053d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80039a8:	2301      	movs	r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e001      	b.n	80039b2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80039b2:	f001 fd3f 	bl	8005434 <vPortExitCritical>

    return xReturn;
 80039b6:	68fb      	ldr	r3, [r7, #12]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80039c8:	f001 fd04 	bl	80053d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d102      	bne.n	80039de <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80039d8:	2301      	movs	r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e001      	b.n	80039e2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80039e2:	f001 fd27 	bl	8005434 <vPortExitCritical>

    return xReturn;
 80039e6:	68fb      	ldr	r3, [r7, #12]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	e01e      	b.n	8003a3e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a00:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <vQueueAddToRegistry+0x60>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d115      	bne.n	8003a38 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a0c:	4910      	ldr	r1, [pc, #64]	; (8003a50 <vQueueAddToRegistry+0x60>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003a16:	4a0e      	ldr	r2, [pc, #56]	; (8003a50 <vQueueAddToRegistry+0x60>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 fb43 	bl	80070b0 <SEGGER_SYSVIEW_ShrinkId>
 8003a2a:	4601      	mov	r1, r0
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2071      	movs	r0, #113	; 0x71
 8003a32:	f002 fd79 	bl	8006528 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003a36:	e006      	b.n	8003a46 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b07      	cmp	r3, #7
 8003a42:	d9dd      	bls.n	8003a00 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	2000022c 	.word	0x2000022c

08003a54 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003a64:	f001 fcb6 	bl	80053d4 <vPortEnterCritical>
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a6e:	b25b      	sxtb	r3, r3
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d103      	bne.n	8003a7e <vQueueWaitForMessageRestricted+0x2a>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a84:	b25b      	sxtb	r3, r3
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d103      	bne.n	8003a94 <vQueueWaitForMessageRestricted+0x40>
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a94:	f001 fcce 	bl	8005434 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	3324      	adds	r3, #36	; 0x24
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fbcf 	bl	800424c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003aae:	6978      	ldr	r0, [r7, #20]
 8003ab0:	f7ff ff1e 	bl	80038f0 <prvUnlockQueue>
    }
 8003ab4:	bf00      	nop
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08c      	sub	sp, #48	; 0x30
 8003ac0:	af04      	add	r7, sp, #16
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 fdab 	bl	800562c <pvPortMalloc>
 8003ad6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00e      	beq.n	8003afc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ade:	2058      	movs	r0, #88	; 0x58
 8003ae0:	f001 fda4 	bl	800562c <pvPortMalloc>
 8003ae4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
 8003af2:	e005      	b.n	8003b00 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003af4:	6978      	ldr	r0, [r7, #20]
 8003af6:	f001 fe79 	bl	80057ec <vPortFree>
 8003afa:	e001      	b.n	8003b00 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d013      	beq.n	8003b2e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9303      	str	r3, [sp, #12]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	9302      	str	r3, [sp, #8]
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f80e 	bl	8003b3e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003b22:	69f8      	ldr	r0, [r7, #28]
 8003b24:	f000 f8a2 	bl	8003c6c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	e002      	b.n	8003b34 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b32:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003b34:	69bb      	ldr	r3, [r7, #24]
    }
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b088      	sub	sp, #32
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	461a      	mov	r2, r3
 8003b56:	21a5      	movs	r1, #165	; 0xa5
 8003b58:	f003 fd77 	bl	800764a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b66:	3b01      	subs	r3, #1
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f023 0307 	bic.w	r3, r3, #7
 8003b74:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	617b      	str	r3, [r7, #20]
    }
 8003b92:	bf00      	nop
 8003b94:	e7fe      	b.n	8003b94 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01f      	beq.n	8003bdc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	e012      	b.n	8003bc8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	7819      	ldrb	r1, [r3, #0]
 8003baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	3334      	adds	r3, #52	; 0x34
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d006      	beq.n	8003bd0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b09      	cmp	r3, #9
 8003bcc:	d9e9      	bls.n	8003ba2 <prvInitialiseNewTask+0x64>
 8003bce:	e000      	b.n	8003bd2 <prvInitialiseNewTask+0x94>
            {
                break;
 8003bd0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bda:	e003      	b.n	8003be4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d901      	bls.n	8003bee <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bea:	2304      	movs	r3, #4
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	3304      	adds	r3, #4
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff f851 	bl	8002cac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	3318      	adds	r3, #24
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff f84c 	bl	8002cac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c18:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	f1c3 0205 	rsb	r2, r3, #5
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	3350      	adds	r3, #80	; 0x50
 8003c2e:	2204      	movs	r2, #4
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f003 fd09 	bl	800764a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	3354      	adds	r3, #84	; 0x54
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 fd02 	bl	800764a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	68f9      	ldr	r1, [r7, #12]
 8003c4a:	69b8      	ldr	r0, [r7, #24]
 8003c4c:	f001 fa14 	bl	8005078 <pxPortInitialiseStack>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c62:	bf00      	nop
 8003c64:	3720      	adds	r7, #32
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003c6c:	b5b0      	push	{r4, r5, r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003c74:	f001 fbae 	bl	80053d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003c78:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <prvAddNewTaskToReadyList+0xe4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	4a34      	ldr	r2, [pc, #208]	; (8003d50 <prvAddNewTaskToReadyList+0xe4>)
 8003c80:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003c82:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <prvAddNewTaskToReadyList+0xe8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003c8a:	4a32      	ldr	r2, [pc, #200]	; (8003d54 <prvAddNewTaskToReadyList+0xe8>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c90:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <prvAddNewTaskToReadyList+0xe4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d110      	bne.n	8003cba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003c98:	f000 fc06 	bl	80044a8 <prvInitialiseTaskLists>
 8003c9c:	e00d      	b.n	8003cba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003c9e:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <prvAddNewTaskToReadyList+0xec>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ca6:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <prvAddNewTaskToReadyList+0xe8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d802      	bhi.n	8003cba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003cb4:	4a27      	ldr	r2, [pc, #156]	; (8003d54 <prvAddNewTaskToReadyList+0xe8>)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003cba:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <prvAddNewTaskToReadyList+0xf0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <prvAddNewTaskToReadyList+0xf0>)
 8003cc2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cc4:	4b25      	ldr	r3, [pc, #148]	; (8003d5c <prvAddNewTaskToReadyList+0xf0>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <prvAddNewTaskToReadyList+0x94>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f003 f8c5 	bl	8006e64 <SEGGER_SYSVIEW_OnTaskCreate>
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	461d      	mov	r5, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461c      	mov	r4, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	1ae3      	subs	r3, r4, r3
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	462b      	mov	r3, r5
 8003cfc:	f001 fe94 	bl	8005a28 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f003 f932 	bl	8006f6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <prvAddNewTaskToReadyList+0xf4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <prvAddNewTaskToReadyList+0xf4>)
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <prvAddNewTaskToReadyList+0xf8>)
 8003d28:	441a      	add	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f7fe ffc8 	bl	8002cc6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003d36:	f001 fb7d 	bl	8005434 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <prvAddNewTaskToReadyList+0xec>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <prvAddNewTaskToReadyList+0xe8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000344 	.word	0x20000344
 8003d54:	2000026c 	.word	0x2000026c
 8003d58:	20000350 	.word	0x20000350
 8003d5c:	20000360 	.word	0x20000360
 8003d60:	2000034c 	.word	0x2000034c
 8003d64:	20000270 	.word	0x20000270

08003d68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d01b      	beq.n	8003db2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <vTaskDelay+0x68>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <vTaskDelay+0x30>
        __asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60bb      	str	r3, [r7, #8]
    }
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003d98:	f000 f880 	bl	8003e9c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	2023      	movs	r0, #35	; 0x23
 8003da0:	f002 fb86 	bl	80064b0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003da4:	2100      	movs	r1, #0
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fddc 	bl	8004964 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003dac:	f000 f884 	bl	8003eb8 <xTaskResumeAll>
 8003db0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d107      	bne.n	8003dc8 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <vTaskDelay+0x6c>)
 8003dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	2000036c 	.word	0x2000036c
 8003dd4:	e000ed04 	.word	0xe000ed04

08003dd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003dde:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <vTaskStartScheduler+0xa4>)
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	2300      	movs	r3, #0
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	2300      	movs	r3, #0
 8003de8:	2282      	movs	r2, #130	; 0x82
 8003dea:	4925      	ldr	r1, [pc, #148]	; (8003e80 <vTaskStartScheduler+0xa8>)
 8003dec:	4825      	ldr	r0, [pc, #148]	; (8003e84 <vTaskStartScheduler+0xac>)
 8003dee:	f7ff fe65 	bl	8003abc <xTaskCreate>
 8003df2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d102      	bne.n	8003e00 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003dfa:	f000 fe2b 	bl	8004a54 <xTimerCreateTimerTask>
 8003dfe:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d124      	bne.n	8003e50 <vTaskStartScheduler+0x78>
        __asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	60bb      	str	r3, [r7, #8]
    }
 8003e18:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <vTaskStartScheduler+0xb0>)
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003e22:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <vTaskStartScheduler+0xb4>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e28:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <vTaskStartScheduler+0xb8>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003e2e:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <vTaskStartScheduler+0xbc>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <vTaskStartScheduler+0xa4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d102      	bne.n	8003e40 <vTaskStartScheduler+0x68>
 8003e3a:	f002 fff7 	bl	8006e2c <SEGGER_SYSVIEW_OnIdle>
 8003e3e:	e004      	b.n	8003e4a <vTaskStartScheduler+0x72>
 8003e40:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <vTaskStartScheduler+0xbc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f003 f84f 	bl	8006ee8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003e4a:	f001 f9a3 	bl	8005194 <xPortStartScheduler>
 8003e4e:	e00e      	b.n	8003e6e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	d10a      	bne.n	8003e6e <vTaskStartScheduler+0x96>
        __asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	607b      	str	r3, [r7, #4]
    }
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <vTaskStartScheduler+0xc0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000368 	.word	0x20000368
 8003e80:	080087b4 	.word	0x080087b4
 8003e84:	08004485 	.word	0x08004485
 8003e88:	20000364 	.word	0x20000364
 8003e8c:	20000350 	.word	0x20000350
 8003e90:	20000348 	.word	0x20000348
 8003e94:	2000026c 	.word	0x2000026c
 8003e98:	2000000c 	.word	0x2000000c

08003e9c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <vTaskSuspendAll+0x18>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4a03      	ldr	r2, [pc, #12]	; (8003eb4 <vTaskSuspendAll+0x18>)
 8003ea8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003eaa:	bf00      	nop
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	2000036c 	.word	0x2000036c

08003eb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003ec6:	4b3d      	ldr	r3, [pc, #244]	; (8003fbc <xTaskResumeAll+0x104>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <xTaskResumeAll+0x2c>
        __asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	603b      	str	r3, [r7, #0]
    }
 8003ee0:	bf00      	nop
 8003ee2:	e7fe      	b.n	8003ee2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003ee4:	f001 fa76 	bl	80053d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003ee8:	4b34      	ldr	r3, [pc, #208]	; (8003fbc <xTaskResumeAll+0x104>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	4a33      	ldr	r2, [pc, #204]	; (8003fbc <xTaskResumeAll+0x104>)
 8003ef0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ef2:	4b32      	ldr	r3, [pc, #200]	; (8003fbc <xTaskResumeAll+0x104>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d159      	bne.n	8003fae <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003efa:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <xTaskResumeAll+0x108>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d055      	beq.n	8003fae <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f02:	e032      	b.n	8003f6a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f04:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <xTaskResumeAll+0x10c>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3318      	adds	r3, #24
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe ff35 	bl	8002d80 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe ff30 	bl	8002d80 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f003 f822 	bl	8006f6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <xTaskResumeAll+0x110>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <xTaskResumeAll+0x110>)
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4a21      	ldr	r2, [pc, #132]	; (8003fcc <xTaskResumeAll+0x114>)
 8003f48:	441a      	add	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4610      	mov	r0, r2
 8003f52:	f7fe feb8 	bl	8002cc6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <xTaskResumeAll+0x118>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <xTaskResumeAll+0x11c>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f6a:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <xTaskResumeAll+0x10c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1c8      	bne.n	8003f04 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003f78:	f000 fb14 	bl	80045a4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f7c:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <xTaskResumeAll+0x120>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d010      	beq.n	8003faa <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003f88:	f000 f838 	bl	8003ffc <xTaskIncrementTick>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <xTaskResumeAll+0x11c>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f1      	bne.n	8003f88 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <xTaskResumeAll+0x120>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <xTaskResumeAll+0x11c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003fae:	f001 fa41 	bl	8005434 <vPortExitCritical>

    return xAlreadyYielded;
 8003fb2:	687b      	ldr	r3, [r7, #4]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	2000036c 	.word	0x2000036c
 8003fc0:	20000344 	.word	0x20000344
 8003fc4:	20000304 	.word	0x20000304
 8003fc8:	2000034c 	.word	0x2000034c
 8003fcc:	20000270 	.word	0x20000270
 8003fd0:	2000026c 	.word	0x2000026c
 8003fd4:	20000358 	.word	0x20000358
 8003fd8:	20000354 	.word	0x20000354

08003fdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <xTaskGetTickCount+0x1c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003fe8:	687b      	ldr	r3, [r7, #4]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000348 	.word	0x20000348

08003ffc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004006:	4b41      	ldr	r3, [pc, #260]	; (800410c <xTaskIncrementTick+0x110>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d173      	bne.n	80040f6 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800400e:	4b40      	ldr	r3, [pc, #256]	; (8004110 <xTaskIncrementTick+0x114>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3301      	adds	r3, #1
 8004014:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004016:	4a3e      	ldr	r2, [pc, #248]	; (8004110 <xTaskIncrementTick+0x114>)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d120      	bne.n	8004064 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8004022:	4b3c      	ldr	r3, [pc, #240]	; (8004114 <xTaskIncrementTick+0x118>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <xTaskIncrementTick+0x46>
        __asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	603b      	str	r3, [r7, #0]
    }
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <xTaskIncrementTick+0x44>
 8004042:	4b34      	ldr	r3, [pc, #208]	; (8004114 <xTaskIncrementTick+0x118>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	4b33      	ldr	r3, [pc, #204]	; (8004118 <xTaskIncrementTick+0x11c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a31      	ldr	r2, [pc, #196]	; (8004114 <xTaskIncrementTick+0x118>)
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	4a31      	ldr	r2, [pc, #196]	; (8004118 <xTaskIncrementTick+0x11c>)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b31      	ldr	r3, [pc, #196]	; (800411c <xTaskIncrementTick+0x120>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	4a2f      	ldr	r2, [pc, #188]	; (800411c <xTaskIncrementTick+0x120>)
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	f000 faa0 	bl	80045a4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004064:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <xTaskIncrementTick+0x124>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	429a      	cmp	r2, r3
 800406c:	d348      	bcc.n	8004100 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800406e:	4b29      	ldr	r3, [pc, #164]	; (8004114 <xTaskIncrementTick+0x118>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d104      	bne.n	8004082 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004078:	4b29      	ldr	r3, [pc, #164]	; (8004120 <xTaskIncrementTick+0x124>)
 800407a:	f04f 32ff 	mov.w	r2, #4294967295
 800407e:	601a      	str	r2, [r3, #0]
                    break;
 8004080:	e03e      	b.n	8004100 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004082:	4b24      	ldr	r3, [pc, #144]	; (8004114 <xTaskIncrementTick+0x118>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	429a      	cmp	r2, r3
 8004098:	d203      	bcs.n	80040a2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800409a:	4a21      	ldr	r2, [pc, #132]	; (8004120 <xTaskIncrementTick+0x124>)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040a0:	e02e      	b.n	8004100 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	3304      	adds	r3, #4
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fe6a 	bl	8002d80 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d004      	beq.n	80040be <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	3318      	adds	r3, #24
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe fe61 	bl	8002d80 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f002 ff53 	bl	8006f6c <SEGGER_SYSVIEW_OnTaskStartReady>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	2201      	movs	r2, #1
 80040cc:	409a      	lsls	r2, r3
 80040ce:	4b15      	ldr	r3, [pc, #84]	; (8004124 <xTaskIncrementTick+0x128>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	4a13      	ldr	r2, [pc, #76]	; (8004124 <xTaskIncrementTick+0x128>)
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4a10      	ldr	r2, [pc, #64]	; (8004128 <xTaskIncrementTick+0x12c>)
 80040e6:	441a      	add	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	3304      	adds	r3, #4
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f7fe fde9 	bl	8002cc6 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f4:	e7bb      	b.n	800406e <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <xTaskIncrementTick+0x130>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3301      	adds	r3, #1
 80040fc:	4a0b      	ldr	r2, [pc, #44]	; (800412c <xTaskIncrementTick+0x130>)
 80040fe:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004100:	697b      	ldr	r3, [r7, #20]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	2000036c 	.word	0x2000036c
 8004110:	20000348 	.word	0x20000348
 8004114:	200002fc 	.word	0x200002fc
 8004118:	20000300 	.word	0x20000300
 800411c:	2000035c 	.word	0x2000035c
 8004120:	20000364 	.word	0x20000364
 8004124:	2000034c 	.word	0x2000034c
 8004128:	20000270 	.word	0x20000270
 800412c:	20000354 	.word	0x20000354

08004130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004136:	4b2d      	ldr	r3, [pc, #180]	; (80041ec <vTaskSwitchContext+0xbc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800413e:	4b2c      	ldr	r3, [pc, #176]	; (80041f0 <vTaskSwitchContext+0xc0>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004144:	e04d      	b.n	80041e2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8004146:	4b2a      	ldr	r3, [pc, #168]	; (80041f0 <vTaskSwitchContext+0xc0>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800414c:	4b29      	ldr	r3, [pc, #164]	; (80041f4 <vTaskSwitchContext+0xc4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	fab3 f383 	clz	r3, r3
 8004158:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800415a:	7afb      	ldrb	r3, [r7, #11]
 800415c:	f1c3 031f 	rsb	r3, r3, #31
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	4925      	ldr	r1, [pc, #148]	; (80041f8 <vTaskSwitchContext+0xc8>)
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <vTaskSwitchContext+0x5c>
        __asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	607b      	str	r3, [r7, #4]
    }
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <vTaskSwitchContext+0x5a>
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <vTaskSwitchContext+0xc8>)
 8004198:	4413      	add	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	3308      	adds	r3, #8
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d104      	bne.n	80041bc <vTaskSwitchContext+0x8c>
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	605a      	str	r2, [r3, #4]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	4a0e      	ldr	r2, [pc, #56]	; (80041fc <vTaskSwitchContext+0xcc>)
 80041c4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80041c6:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <vTaskSwitchContext+0xcc>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <vTaskSwitchContext+0xd0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d102      	bne.n	80041d8 <vTaskSwitchContext+0xa8>
 80041d2:	f002 fe2b 	bl	8006e2c <SEGGER_SYSVIEW_OnIdle>
}
 80041d6:	e004      	b.n	80041e2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80041d8:	4b08      	ldr	r3, [pc, #32]	; (80041fc <vTaskSwitchContext+0xcc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f002 fe83 	bl	8006ee8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80041e2:	bf00      	nop
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	2000036c 	.word	0x2000036c
 80041f0:	20000358 	.word	0x20000358
 80041f4:	2000034c 	.word	0x2000034c
 80041f8:	20000270 	.word	0x20000270
 80041fc:	2000026c 	.word	0x2000026c
 8004200:	20000368 	.word	0x20000368

08004204 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	60fb      	str	r3, [r7, #12]
    }
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <vTaskPlaceOnEventList+0x44>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3318      	adds	r3, #24
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fe fd6b 	bl	8002d0e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004238:	2101      	movs	r1, #1
 800423a:	6838      	ldr	r0, [r7, #0]
 800423c:	f000 fb92 	bl	8004964 <prvAddCurrentTaskToDelayedList>
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	2000026c 	.word	0x2000026c

0800424c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	617b      	str	r3, [r7, #20]
    }
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <vTaskPlaceOnEventListRestricted+0x58>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3318      	adds	r3, #24
 800427a:	4619      	mov	r1, r3
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7fe fd22 	bl	8002cc6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004288:	f04f 33ff 	mov.w	r3, #4294967295
 800428c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800428e:	2024      	movs	r0, #36	; 0x24
 8004290:	f002 f8f0 	bl	8006474 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	68b8      	ldr	r0, [r7, #8]
 8004298:	f000 fb64 	bl	8004964 <prvAddCurrentTaskToDelayedList>
    }
 800429c:	bf00      	nop
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	2000026c 	.word	0x2000026c

080042a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	60fb      	str	r3, [r7, #12]
    }
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	3318      	adds	r3, #24
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe fd51 	bl	8002d80 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042de:	4b1f      	ldr	r3, [pc, #124]	; (800435c <xTaskRemoveFromEventList+0xb4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d120      	bne.n	8004328 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	3304      	adds	r3, #4
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fd48 	bl	8002d80 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f002 fe3a 	bl	8006f6c <SEGGER_SYSVIEW_OnTaskStartReady>
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	2201      	movs	r2, #1
 80042fe:	409a      	lsls	r2, r3
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <xTaskRemoveFromEventList+0xb8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4313      	orrs	r3, r2
 8004306:	4a16      	ldr	r2, [pc, #88]	; (8004360 <xTaskRemoveFromEventList+0xb8>)
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4a13      	ldr	r2, [pc, #76]	; (8004364 <xTaskRemoveFromEventList+0xbc>)
 8004318:	441a      	add	r2, r3
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3304      	adds	r3, #4
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f7fe fcd0 	bl	8002cc6 <vListInsertEnd>
 8004326:	e005      	b.n	8004334 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	3318      	adds	r3, #24
 800432c:	4619      	mov	r1, r3
 800432e:	480e      	ldr	r0, [pc, #56]	; (8004368 <xTaskRemoveFromEventList+0xc0>)
 8004330:	f7fe fcc9 	bl	8002cc6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <xTaskRemoveFromEventList+0xc4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	429a      	cmp	r2, r3
 8004340:	d905      	bls.n	800434e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004342:	2301      	movs	r3, #1
 8004344:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004346:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <xTaskRemoveFromEventList+0xc8>)
 8004348:	2201      	movs	r2, #1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e001      	b.n	8004352 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004352:	697b      	ldr	r3, [r7, #20]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	2000036c 	.word	0x2000036c
 8004360:	2000034c 	.word	0x2000034c
 8004364:	20000270 	.word	0x20000270
 8004368:	20000304 	.word	0x20000304
 800436c:	2000026c 	.word	0x2000026c
 8004370:	20000358 	.word	0x20000358

08004374 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <vTaskInternalSetTimeOutState+0x24>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <vTaskInternalSetTimeOutState+0x28>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	605a      	str	r2, [r3, #4]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	2000035c 	.word	0x2000035c
 800439c:	20000348 	.word	0x20000348

080043a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	613b      	str	r3, [r7, #16]
    }
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	60fb      	str	r3, [r7, #12]
    }
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80043e2:	f000 fff7 	bl	80053d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80043e6:	4b1f      	ldr	r3, [pc, #124]	; (8004464 <xTaskCheckForTimeOut+0xc4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d102      	bne.n	8004406 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]
 8004404:	e026      	b.n	8004454 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4b17      	ldr	r3, [pc, #92]	; (8004468 <xTaskCheckForTimeOut+0xc8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d00a      	beq.n	8004428 <xTaskCheckForTimeOut+0x88>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	429a      	cmp	r2, r3
 800441a:	d305      	bcc.n	8004428 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800441c:	2301      	movs	r3, #1
 800441e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e015      	b.n	8004454 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	429a      	cmp	r2, r3
 8004430:	d20b      	bcs.n	800444a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	1ad2      	subs	r2, r2, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff ff98 	bl	8004374 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004444:	2300      	movs	r3, #0
 8004446:	61fb      	str	r3, [r7, #28]
 8004448:	e004      	b.n	8004454 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004450:	2301      	movs	r3, #1
 8004452:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004454:	f000 ffee 	bl	8005434 <vPortExitCritical>

    return xReturn;
 8004458:	69fb      	ldr	r3, [r7, #28]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000348 	.word	0x20000348
 8004468:	2000035c 	.word	0x2000035c

0800446c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <vTaskMissedYield+0x14>)
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]
}
 8004476:	bf00      	nop
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	20000358 	.word	0x20000358

08004484 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800448c:	f000 f84c 	bl	8004528 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8004490:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <prvIdleTask+0x20>)
 8004492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80044a0:	e7f4      	b.n	800448c <prvIdleTask+0x8>
 80044a2:	bf00      	nop
 80044a4:	e000ed04 	.word	0xe000ed04

080044a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	e00c      	b.n	80044ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4a12      	ldr	r2, [pc, #72]	; (8004508 <prvInitialiseTaskLists+0x60>)
 80044c0:	4413      	add	r3, r2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fbd2 	bl	8002c6c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3301      	adds	r3, #1
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d9ef      	bls.n	80044b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80044d4:	480d      	ldr	r0, [pc, #52]	; (800450c <prvInitialiseTaskLists+0x64>)
 80044d6:	f7fe fbc9 	bl	8002c6c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80044da:	480d      	ldr	r0, [pc, #52]	; (8004510 <prvInitialiseTaskLists+0x68>)
 80044dc:	f7fe fbc6 	bl	8002c6c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80044e0:	480c      	ldr	r0, [pc, #48]	; (8004514 <prvInitialiseTaskLists+0x6c>)
 80044e2:	f7fe fbc3 	bl	8002c6c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80044e6:	480c      	ldr	r0, [pc, #48]	; (8004518 <prvInitialiseTaskLists+0x70>)
 80044e8:	f7fe fbc0 	bl	8002c6c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80044ec:	480b      	ldr	r0, [pc, #44]	; (800451c <prvInitialiseTaskLists+0x74>)
 80044ee:	f7fe fbbd 	bl	8002c6c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <prvInitialiseTaskLists+0x78>)
 80044f4:	4a05      	ldr	r2, [pc, #20]	; (800450c <prvInitialiseTaskLists+0x64>)
 80044f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044f8:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <prvInitialiseTaskLists+0x7c>)
 80044fa:	4a05      	ldr	r2, [pc, #20]	; (8004510 <prvInitialiseTaskLists+0x68>)
 80044fc:	601a      	str	r2, [r3, #0]
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000270 	.word	0x20000270
 800450c:	200002d4 	.word	0x200002d4
 8004510:	200002e8 	.word	0x200002e8
 8004514:	20000304 	.word	0x20000304
 8004518:	20000318 	.word	0x20000318
 800451c:	20000330 	.word	0x20000330
 8004520:	200002fc 	.word	0x200002fc
 8004524:	20000300 	.word	0x20000300

08004528 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800452e:	e019      	b.n	8004564 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004530:	f000 ff50 	bl	80053d4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <prvCheckTasksWaitingTermination+0x50>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3304      	adds	r3, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe fc1d 	bl	8002d80 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004546:	4b0d      	ldr	r3, [pc, #52]	; (800457c <prvCheckTasksWaitingTermination+0x54>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	4a0b      	ldr	r2, [pc, #44]	; (800457c <prvCheckTasksWaitingTermination+0x54>)
 800454e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <prvCheckTasksWaitingTermination+0x58>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3b01      	subs	r3, #1
 8004556:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <prvCheckTasksWaitingTermination+0x58>)
 8004558:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800455a:	f000 ff6b 	bl	8005434 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f810 	bl	8004584 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <prvCheckTasksWaitingTermination+0x58>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e1      	bne.n	8004530 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20000318 	.word	0x20000318
 800457c:	20000344 	.word	0x20000344
 8004580:	2000032c 	.word	0x2000032c

08004584 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	4618      	mov	r0, r3
 8004592:	f001 f92b 	bl	80057ec <vPortFree>
                vPortFree( pxTCB );
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f001 f928 	bl	80057ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <prvResetNextTaskUnblockTime+0x30>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <prvResetNextTaskUnblockTime+0x34>)
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80045ba:	e005      	b.n	80045c8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <prvResetNextTaskUnblockTime+0x30>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <prvResetNextTaskUnblockTime+0x34>)
 80045c6:	6013      	str	r3, [r2, #0]
}
 80045c8:	bf00      	nop
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	200002fc 	.word	0x200002fc
 80045d8:	20000364 	.word	0x20000364

080045dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <xTaskGetSchedulerState+0x34>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80045ea:	2301      	movs	r3, #1
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	e008      	b.n	8004602 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <xTaskGetSchedulerState+0x38>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80045f8:	2302      	movs	r3, #2
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	e001      	b.n	8004602 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80045fe:	2300      	movs	r3, #0
 8004600:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004602:	687b      	ldr	r3, [r7, #4]
    }
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	20000350 	.word	0x20000350
 8004614:	2000036c 	.word	0x2000036c

08004618 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d063      	beq.n	80046f6 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004632:	4b33      	ldr	r3, [pc, #204]	; (8004700 <xTaskPriorityInherit+0xe8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	429a      	cmp	r2, r3
 800463a:	d253      	bcs.n	80046e4 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	db06      	blt.n	8004652 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004644:	4b2e      	ldr	r3, [pc, #184]	; (8004700 <xTaskPriorityInherit+0xe8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	f1c3 0205 	rsb	r2, r3, #5
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6959      	ldr	r1, [r3, #20]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4a28      	ldr	r2, [pc, #160]	; (8004704 <xTaskPriorityInherit+0xec>)
 8004664:	4413      	add	r3, r2
 8004666:	4299      	cmp	r1, r3
 8004668:	d12f      	bne.n	80046ca <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	3304      	adds	r3, #4
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fb86 	bl	8002d80 <uxListRemove>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	2201      	movs	r2, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	43da      	mvns	r2, r3
 8004686:	4b20      	ldr	r3, [pc, #128]	; (8004708 <xTaskPriorityInherit+0xf0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4013      	ands	r3, r2
 800468c:	4a1e      	ldr	r2, [pc, #120]	; (8004708 <xTaskPriorityInherit+0xf0>)
 800468e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004690:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <xTaskPriorityInherit+0xe8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	2201      	movs	r2, #1
 80046a0:	409a      	lsls	r2, r3
 80046a2:	4b19      	ldr	r3, [pc, #100]	; (8004708 <xTaskPriorityInherit+0xf0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	4a17      	ldr	r2, [pc, #92]	; (8004708 <xTaskPriorityInherit+0xf0>)
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4a12      	ldr	r2, [pc, #72]	; (8004704 <xTaskPriorityInherit+0xec>)
 80046ba:	441a      	add	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	3304      	adds	r3, #4
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f7fe faff 	bl	8002cc6 <vListInsertEnd>
 80046c8:	e004      	b.n	80046d4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046ca:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <xTaskPriorityInherit+0xe8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4619      	mov	r1, r3
 80046d8:	2049      	movs	r0, #73	; 0x49
 80046da:	f001 fee9 	bl	80064b0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80046de:	2301      	movs	r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e008      	b.n	80046f6 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <xTaskPriorityInherit+0xe8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d201      	bcs.n	80046f6 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80046f2:	2301      	movs	r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80046f6:	68fb      	ldr	r3, [r7, #12]
    }
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	2000026c 	.word	0x2000026c
 8004704:	20000270 	.word	0x20000270
 8004708:	2000034c 	.word	0x2000034c

0800470c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d068      	beq.n	80047f4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004722:	4b37      	ldr	r3, [pc, #220]	; (8004800 <xTaskPriorityDisinherit+0xf4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	429a      	cmp	r2, r3
 800472a:	d00a      	beq.n	8004742 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	60fb      	str	r3, [r7, #12]
    }
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60bb      	str	r3, [r7, #8]
    }
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004764:	1e5a      	subs	r2, r3, #1
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004772:	429a      	cmp	r2, r3
 8004774:	d03e      	beq.n	80047f4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d13a      	bne.n	80047f4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	3304      	adds	r3, #4
 8004782:	4618      	mov	r0, r3
 8004784:	f7fe fafc 	bl	8002d80 <uxListRemove>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	2201      	movs	r2, #1
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	43da      	mvns	r2, r3
 800479a:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <xTaskPriorityDisinherit+0xf8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4013      	ands	r3, r2
 80047a0:	4a18      	ldr	r2, [pc, #96]	; (8004804 <xTaskPriorityDisinherit+0xf8>)
 80047a2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4619      	mov	r1, r3
 80047a8:	204a      	movs	r0, #74	; 0x4a
 80047aa:	f001 fe81 	bl	80064b0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	f1c3 0205 	rsb	r2, r3, #5
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	2201      	movs	r2, #1
 80047c8:	409a      	lsls	r2, r3
 80047ca:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <xTaskPriorityDisinherit+0xf8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	4a0c      	ldr	r2, [pc, #48]	; (8004804 <xTaskPriorityDisinherit+0xf8>)
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4a09      	ldr	r2, [pc, #36]	; (8004808 <xTaskPriorityDisinherit+0xfc>)
 80047e2:	441a      	add	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7fe fa6b 	bl	8002cc6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80047f4:	697b      	ldr	r3, [r7, #20]
    }
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2000026c 	.word	0x2000026c
 8004804:	2000034c 	.word	0x2000034c
 8004808:	20000270 	.word	0x20000270

0800480c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8081 	beq.w	8004928 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10a      	bne.n	8004844 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	60fb      	str	r3, [r7, #12]
    }
 8004840:	bf00      	nop
 8004842:	e7fe      	b.n	8004842 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d902      	bls.n	8004854 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e002      	b.n	800485a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004858:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	429a      	cmp	r2, r3
 8004862:	d061      	beq.n	8004928 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	429a      	cmp	r2, r3
 800486c:	d15c      	bne.n	8004928 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800486e:	4b30      	ldr	r3, [pc, #192]	; (8004930 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	429a      	cmp	r2, r3
 8004876:	d10a      	bne.n	800488e <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	60bb      	str	r3, [r7, #8]
    }
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4619      	mov	r1, r3
 8004892:	204a      	movs	r0, #74	; 0x4a
 8004894:	f001 fe0c 	bl	80064b0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	db04      	blt.n	80048b6 <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f1c3 0205 	rsb	r2, r3, #5
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	6959      	ldr	r1, [r3, #20]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80048c6:	4413      	add	r3, r2
 80048c8:	4299      	cmp	r1, r3
 80048ca:	d12d      	bne.n	8004928 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fe fa55 	bl	8002d80 <uxListRemove>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	2201      	movs	r2, #1
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43da      	mvns	r2, r3
 80048e8:	4b13      	ldr	r3, [pc, #76]	; (8004938 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4013      	ands	r3, r2
 80048ee:	4a12      	ldr	r2, [pc, #72]	; (8004938 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80048f0:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f002 fb39 	bl	8006f6c <SEGGER_SYSVIEW_OnTaskStartReady>
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	2201      	movs	r2, #1
 8004900:	409a      	lsls	r2, r3
 8004902:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4313      	orrs	r3, r2
 8004908:	4a0b      	ldr	r2, [pc, #44]	; (8004938 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4a06      	ldr	r2, [pc, #24]	; (8004934 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800491a:	441a      	add	r2, r3
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	3304      	adds	r3, #4
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f7fe f9cf 	bl	8002cc6 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004928:	bf00      	nop
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	2000026c 	.word	0x2000026c
 8004934:	20000270 	.word	0x20000270
 8004938:	2000034c 	.word	0x2000034c

0800493c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004940:	4b07      	ldr	r3, [pc, #28]	; (8004960 <pvTaskIncrementMutexHeldCount+0x24>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d004      	beq.n	8004952 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <pvTaskIncrementMutexHeldCount+0x24>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800494e:	3201      	adds	r2, #1
 8004950:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004952:	4b03      	ldr	r3, [pc, #12]	; (8004960 <pvTaskIncrementMutexHeldCount+0x24>)
 8004954:	681b      	ldr	r3, [r3, #0]
    }
 8004956:	4618      	mov	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	2000026c 	.word	0x2000026c

08004964 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800496e:	4b32      	ldr	r3, [pc, #200]	; (8004a38 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004974:	4b31      	ldr	r3, [pc, #196]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3304      	adds	r3, #4
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fa00 	bl	8002d80 <uxListRemove>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004986:	4b2d      	ldr	r3, [pc, #180]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	2201      	movs	r2, #1
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43da      	mvns	r2, r3
 8004994:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4013      	ands	r3, r2
 800499a:	4a29      	ldr	r2, [pc, #164]	; (8004a40 <prvAddCurrentTaskToDelayedList+0xdc>)
 800499c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d110      	bne.n	80049c8 <prvAddCurrentTaskToDelayedList+0x64>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00d      	beq.n	80049c8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80049ac:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xd8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	211b      	movs	r1, #27
 80049b2:	4618      	mov	r0, r3
 80049b4:	f002 fb1c 	bl	8006ff0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049b8:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xd8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3304      	adds	r3, #4
 80049be:	4619      	mov	r1, r3
 80049c0:	4820      	ldr	r0, [pc, #128]	; (8004a44 <prvAddCurrentTaskToDelayedList+0xe0>)
 80049c2:	f7fe f980 	bl	8002cc6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80049c6:	e032      	b.n	8004a2e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4413      	add	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049d0:	4b1a      	ldr	r3, [pc, #104]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xd8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d20f      	bcs.n	8004a00 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80049e0:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xd8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2104      	movs	r1, #4
 80049e6:	4618      	mov	r0, r3
 80049e8:	f002 fb02 	bl	8006ff0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049ec:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <prvAddCurrentTaskToDelayedList+0xe4>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xd8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3304      	adds	r3, #4
 80049f6:	4619      	mov	r1, r3
 80049f8:	4610      	mov	r0, r2
 80049fa:	f7fe f988 	bl	8002d0e <vListInsert>
}
 80049fe:	e016      	b.n	8004a2e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004a00:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2104      	movs	r1, #4
 8004a06:	4618      	mov	r0, r3
 8004a08:	f002 faf2 	bl	8006ff0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a0c:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3304      	adds	r3, #4
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f7fe f978 	bl	8002d0e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <prvAddCurrentTaskToDelayedList+0xec>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d202      	bcs.n	8004a2e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004a28:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <prvAddCurrentTaskToDelayedList+0xec>)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	6013      	str	r3, [r2, #0]
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000348 	.word	0x20000348
 8004a3c:	2000026c 	.word	0x2000026c
 8004a40:	2000034c 	.word	0x2000034c
 8004a44:	20000330 	.word	0x20000330
 8004a48:	20000300 	.word	0x20000300
 8004a4c:	200002fc 	.word	0x200002fc
 8004a50:	20000364 	.word	0x20000364

08004a54 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004a5e:	f000 fad5 	bl	800500c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004a62:	4b11      	ldr	r3, [pc, #68]	; (8004aa8 <xTimerCreateTimerTask+0x54>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <xTimerCreateTimerTask+0x58>)
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	2302      	movs	r3, #2
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a78:	490d      	ldr	r1, [pc, #52]	; (8004ab0 <xTimerCreateTimerTask+0x5c>)
 8004a7a:	480e      	ldr	r0, [pc, #56]	; (8004ab4 <xTimerCreateTimerTask+0x60>)
 8004a7c:	f7ff f81e 	bl	8003abc <xTaskCreate>
 8004a80:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	603b      	str	r3, [r7, #0]
    }
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004a9e:	687b      	ldr	r3, [r7, #4]
    }
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	200003a0 	.word	0x200003a0
 8004aac:	200003a4 	.word	0x200003a4
 8004ab0:	080087bc 	.word	0x080087bc
 8004ab4:	08004bed 	.word	0x08004bed

08004ab8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	; 0x28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	623b      	str	r3, [r7, #32]
    }
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <xTimerGenericCommand+0x98>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d02a      	beq.n	8004b44 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	dc18      	bgt.n	8004b32 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b00:	f7ff fd6c 	bl	80045dc <xTaskGetSchedulerState>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d109      	bne.n	8004b1e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b0a:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <xTimerGenericCommand+0x98>)
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	f107 0114 	add.w	r1, r7, #20
 8004b12:	2300      	movs	r3, #0
 8004b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b16:	f7fe fa41 	bl	8002f9c <xQueueGenericSend>
 8004b1a:	6278      	str	r0, [r7, #36]	; 0x24
 8004b1c:	e012      	b.n	8004b44 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <xTimerGenericCommand+0x98>)
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	f107 0114 	add.w	r1, r7, #20
 8004b26:	2300      	movs	r3, #0
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f7fe fa37 	bl	8002f9c <xQueueGenericSend>
 8004b2e:	6278      	str	r0, [r7, #36]	; 0x24
 8004b30:	e008      	b.n	8004b44 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b32:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <xTimerGenericCommand+0x98>)
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	f107 0114 	add.w	r1, r7, #20
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	f7fe fb3b 	bl	80031b8 <xQueueGenericSendFromISR>
 8004b42:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004b46:	4618      	mov	r0, r3
 8004b48:	3728      	adds	r7, #40	; 0x28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	200003a0 	.word	0x200003a0

08004b54 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b5e:	4b22      	ldr	r3, [pc, #136]	; (8004be8 <prvProcessExpiredTimer+0x94>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe f907 	bl	8002d80 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d022      	beq.n	8004bc6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	18d1      	adds	r1, r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	6978      	ldr	r0, [r7, #20]
 8004b8e:	f000 f8d1 	bl	8004d34 <prvInsertTimerInActiveList>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01f      	beq.n	8004bd8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	6978      	ldr	r0, [r7, #20]
 8004ba4:	f7ff ff88 	bl	8004ab8 <xTimerGenericCommand>
 8004ba8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d113      	bne.n	8004bd8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60fb      	str	r3, [r7, #12]
    }
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bcc:	f023 0301 	bic.w	r3, r3, #1
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	6978      	ldr	r0, [r7, #20]
 8004bde:	4798      	blx	r3
    }
 8004be0:	bf00      	nop
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000398 	.word	0x20000398

08004bec <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bf4:	f107 0308 	add.w	r3, r7, #8
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 f857 	bl	8004cac <prvGetNextExpireTime>
 8004bfe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4619      	mov	r1, r3
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f803 	bl	8004c10 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004c0a:	f000 f8d5 	bl	8004db8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c0e:	e7f1      	b.n	8004bf4 <prvTimerTask+0x8>

08004c10 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004c1a:	f7ff f93f 	bl	8003e9c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c1e:	f107 0308 	add.w	r3, r7, #8
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f866 	bl	8004cf4 <prvSampleTimeNow>
 8004c28:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d130      	bne.n	8004c92 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <prvProcessTimerOrBlockTask+0x3c>
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d806      	bhi.n	8004c4c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004c3e:	f7ff f93b 	bl	8003eb8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff85 	bl	8004b54 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004c4a:	e024      	b.n	8004c96 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c52:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <prvProcessTimerOrBlockTask+0x90>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <prvProcessTimerOrBlockTask+0x50>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <prvProcessTimerOrBlockTask+0x52>
 8004c60:	2300      	movs	r3, #0
 8004c62:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <prvProcessTimerOrBlockTask+0x94>)
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	4619      	mov	r1, r3
 8004c72:	f7fe feef 	bl	8003a54 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004c76:	f7ff f91f 	bl	8003eb8 <xTaskResumeAll>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004c80:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <prvProcessTimerOrBlockTask+0x98>)
 8004c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
    }
 8004c90:	e001      	b.n	8004c96 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004c92:	f7ff f911 	bl	8003eb8 <xTaskResumeAll>
    }
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	2000039c 	.word	0x2000039c
 8004ca4:	200003a0 	.word	0x200003a0
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cb4:	4b0e      	ldr	r3, [pc, #56]	; (8004cf0 <prvGetNextExpireTime+0x44>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <prvGetNextExpireTime+0x16>
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	e000      	b.n	8004cc4 <prvGetNextExpireTime+0x18>
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d105      	bne.n	8004cdc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <prvGetNextExpireTime+0x44>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	e001      	b.n	8004ce0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
    }
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000398 	.word	0x20000398

08004cf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004cfc:	f7ff f96e 	bl	8003fdc <xTaskGetTickCount>
 8004d00:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004d02:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <prvSampleTimeNow+0x3c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d205      	bcs.n	8004d18 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004d0c:	f000 f91a 	bl	8004f44 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e002      	b.n	8004d1e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004d1e:	4a04      	ldr	r2, [pc, #16]	; (8004d30 <prvSampleTimeNow+0x3c>)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004d24:	68fb      	ldr	r3, [r7, #12]
    }
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	200003a8 	.word	0x200003a8

08004d34 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d812      	bhi.n	8004d80 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	1ad2      	subs	r2, r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d302      	bcc.n	8004d6e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e01b      	b.n	8004da6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d6e:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <prvInsertTimerInActiveList+0x7c>)
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f7fd ffc8 	bl	8002d0e <vListInsert>
 8004d7e:	e012      	b.n	8004da6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d206      	bcs.n	8004d96 <prvInsertTimerInActiveList+0x62>
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d302      	bcc.n	8004d96 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	e007      	b.n	8004da6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d96:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <prvInsertTimerInActiveList+0x80>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f7fd ffb4 	bl	8002d0e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004da6:	697b      	ldr	r3, [r7, #20]
    }
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	2000039c 	.word	0x2000039c
 8004db4:	20000398 	.word	0x20000398

08004db8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08c      	sub	sp, #48	; 0x30
 8004dbc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dbe:	e0ae      	b.n	8004f1e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f2c0 80ab 	blt.w	8004f1e <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fd ffd1 	bl	8002d80 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dde:	1d3b      	adds	r3, r7, #4
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff ff87 	bl	8004cf4 <prvSampleTimeNow>
 8004de6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b09      	cmp	r3, #9
 8004dec:	f200 8096 	bhi.w	8004f1c <prvProcessReceivedCommands+0x164>
 8004df0:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <prvProcessReceivedCommands+0x40>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e21 	.word	0x08004e21
 8004e04:	08004e95 	.word	0x08004e95
 8004e08:	08004ea9 	.word	0x08004ea9
 8004e0c:	08004ef3 	.word	0x08004ef3
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e21 	.word	0x08004e21
 8004e18:	08004e95 	.word	0x08004e95
 8004e1c:	08004ea9 	.word	0x08004ea9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	18d1      	adds	r1, r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e40:	f7ff ff78 	bl	8004d34 <prvInsertTimerInActiveList>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d069      	beq.n	8004f1e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e50:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d05e      	beq.n	8004f1e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	441a      	add	r2, r3
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2100      	movs	r1, #0
 8004e70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e72:	f7ff fe21 	bl	8004ab8 <xTimerGenericCommand>
 8004e76:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d14f      	bne.n	8004f1e <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	61bb      	str	r3, [r7, #24]
    }
 8004e90:	bf00      	nop
 8004e92:	e7fe      	b.n	8004e92 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004ea6:	e03a      	b.n	8004f1e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	617b      	str	r3, [r7, #20]
    }
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	18d1      	adds	r1, r2, r3
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	6a3a      	ldr	r2, [r7, #32]
 8004eea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eec:	f7ff ff22 	bl	8004d34 <prvInsertTimerInActiveList>
                        break;
 8004ef0:	e015      	b.n	8004f1e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f02:	f000 fc73 	bl	80057ec <vPortFree>
 8004f06:	e00a      	b.n	8004f1e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004f1a:	e000      	b.n	8004f1e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004f1c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f1e:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <prvProcessReceivedCommands+0x188>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f107 0108 	add.w	r1, r7, #8
 8004f26:	2200      	movs	r2, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fe fa03 	bl	8003334 <xQueueReceive>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f47f af45 	bne.w	8004dc0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004f36:	bf00      	nop
 8004f38:	bf00      	nop
 8004f3a:	3728      	adds	r7, #40	; 0x28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	200003a0 	.word	0x200003a0

08004f44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f4a:	e048      	b.n	8004fde <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f4c:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <prvSwitchTimerLists+0xc0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f56:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <prvSwitchTimerLists+0xc0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fd ff0b 	bl	8002d80 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d02e      	beq.n	8004fde <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4413      	add	r3, r2
 8004f88:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d90e      	bls.n	8004fb0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f9e:	4b19      	ldr	r3, [pc, #100]	; (8005004 <prvSwitchTimerLists+0xc0>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4610      	mov	r0, r2
 8004faa:	f7fd feb0 	bl	8002d0e <vListInsert>
 8004fae:	e016      	b.n	8004fde <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	2100      	movs	r1, #0
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7ff fd7c 	bl	8004ab8 <xTimerGenericCommand>
 8004fc0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	603b      	str	r3, [r7, #0]
    }
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <prvSwitchTimerLists+0xc0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1b1      	bne.n	8004f4c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <prvSwitchTimerLists+0xc0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <prvSwitchTimerLists+0xc4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a04      	ldr	r2, [pc, #16]	; (8005004 <prvSwitchTimerLists+0xc0>)
 8004ff4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004ff6:	4a04      	ldr	r2, [pc, #16]	; (8005008 <prvSwitchTimerLists+0xc4>)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	6013      	str	r3, [r2, #0]
    }
 8004ffc:	bf00      	nop
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000398 	.word	0x20000398
 8005008:	2000039c 	.word	0x2000039c

0800500c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005010:	f000 f9e0 	bl	80053d4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005014:	4b12      	ldr	r3, [pc, #72]	; (8005060 <prvCheckForValidListAndQueue+0x54>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d11d      	bne.n	8005058 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800501c:	4811      	ldr	r0, [pc, #68]	; (8005064 <prvCheckForValidListAndQueue+0x58>)
 800501e:	f7fd fe25 	bl	8002c6c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005022:	4811      	ldr	r0, [pc, #68]	; (8005068 <prvCheckForValidListAndQueue+0x5c>)
 8005024:	f7fd fe22 	bl	8002c6c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005028:	4b10      	ldr	r3, [pc, #64]	; (800506c <prvCheckForValidListAndQueue+0x60>)
 800502a:	4a0e      	ldr	r2, [pc, #56]	; (8005064 <prvCheckForValidListAndQueue+0x58>)
 800502c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <prvCheckForValidListAndQueue+0x64>)
 8005030:	4a0d      	ldr	r2, [pc, #52]	; (8005068 <prvCheckForValidListAndQueue+0x5c>)
 8005032:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005034:	2200      	movs	r2, #0
 8005036:	210c      	movs	r1, #12
 8005038:	200a      	movs	r0, #10
 800503a:	f7fd ff26 	bl	8002e8a <xQueueGenericCreate>
 800503e:	4603      	mov	r3, r0
 8005040:	4a07      	ldr	r2, [pc, #28]	; (8005060 <prvCheckForValidListAndQueue+0x54>)
 8005042:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005044:	4b06      	ldr	r3, [pc, #24]	; (8005060 <prvCheckForValidListAndQueue+0x54>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800504c:	4b04      	ldr	r3, [pc, #16]	; (8005060 <prvCheckForValidListAndQueue+0x54>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4908      	ldr	r1, [pc, #32]	; (8005074 <prvCheckForValidListAndQueue+0x68>)
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fccc 	bl	80039f0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005058:	f000 f9ec 	bl	8005434 <vPortExitCritical>
    }
 800505c:	bf00      	nop
 800505e:	bd80      	pop	{r7, pc}
 8005060:	200003a0 	.word	0x200003a0
 8005064:	20000370 	.word	0x20000370
 8005068:	20000384 	.word	0x20000384
 800506c:	20000398 	.word	0x20000398
 8005070:	2000039c 	.word	0x2000039c
 8005074:	080087c4 	.word	0x080087c4

08005078 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3b04      	subs	r3, #4
 8005088:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005090:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3b04      	subs	r3, #4
 8005096:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f023 0201 	bic.w	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3b04      	subs	r3, #4
 80050a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80050a8:	4a0c      	ldr	r2, [pc, #48]	; (80050dc <pxPortInitialiseStack+0x64>)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3b14      	subs	r3, #20
 80050b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3b04      	subs	r3, #4
 80050be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f06f 0202 	mvn.w	r2, #2
 80050c6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3b20      	subs	r3, #32
 80050cc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80050ce:	68fb      	ldr	r3, [r7, #12]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	080050e1 	.word	0x080050e1

080050e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80050ea:	4b12      	ldr	r3, [pc, #72]	; (8005134 <prvTaskExitError+0x54>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f2:	d00a      	beq.n	800510a <prvTaskExitError+0x2a>
        __asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	60fb      	str	r3, [r7, #12]
    }
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <prvTaskExitError+0x28>
        __asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	60bb      	str	r3, [r7, #8]
    }
 800511c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800511e:	bf00      	nop
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0fc      	beq.n	8005120 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	20000010 	.word	0x20000010
	...

08005140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <pxCurrentTCBConst2>)
 8005142:	6819      	ldr	r1, [r3, #0]
 8005144:	6808      	ldr	r0, [r1, #0]
 8005146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514a:	f380 8809 	msr	PSP, r0
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f04f 0000 	mov.w	r0, #0
 8005156:	f380 8811 	msr	BASEPRI, r0
 800515a:	4770      	bx	lr
 800515c:	f3af 8000 	nop.w

08005160 <pxCurrentTCBConst2>:
 8005160:	2000026c 	.word	0x2000026c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop

08005168 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005168:	4808      	ldr	r0, [pc, #32]	; (800518c <prvPortStartFirstTask+0x24>)
 800516a:	6800      	ldr	r0, [r0, #0]
 800516c:	6800      	ldr	r0, [r0, #0]
 800516e:	f380 8808 	msr	MSP, r0
 8005172:	f04f 0000 	mov.w	r0, #0
 8005176:	f380 8814 	msr	CONTROL, r0
 800517a:	b662      	cpsie	i
 800517c:	b661      	cpsie	f
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	df00      	svc	0
 8005188:	bf00      	nop
 800518a:	0000      	.short	0x0000
 800518c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop

08005194 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800519a:	4b46      	ldr	r3, [pc, #280]	; (80052b4 <xPortStartScheduler+0x120>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a46      	ldr	r2, [pc, #280]	; (80052b8 <xPortStartScheduler+0x124>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d10a      	bne.n	80051ba <xPortStartScheduler+0x26>
        __asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	613b      	str	r3, [r7, #16]
    }
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051ba:	4b3e      	ldr	r3, [pc, #248]	; (80052b4 <xPortStartScheduler+0x120>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a3f      	ldr	r2, [pc, #252]	; (80052bc <xPortStartScheduler+0x128>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10a      	bne.n	80051da <xPortStartScheduler+0x46>
        __asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	60fb      	str	r3, [r7, #12]
    }
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051da:	4b39      	ldr	r3, [pc, #228]	; (80052c0 <xPortStartScheduler+0x12c>)
 80051dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	22ff      	movs	r2, #255	; 0xff
 80051ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	4b31      	ldr	r3, [pc, #196]	; (80052c4 <xPortStartScheduler+0x130>)
 8005200:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005202:	4b31      	ldr	r3, [pc, #196]	; (80052c8 <xPortStartScheduler+0x134>)
 8005204:	2207      	movs	r2, #7
 8005206:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005208:	e009      	b.n	800521e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800520a:	4b2f      	ldr	r3, [pc, #188]	; (80052c8 <xPortStartScheduler+0x134>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3b01      	subs	r3, #1
 8005210:	4a2d      	ldr	r2, [pc, #180]	; (80052c8 <xPortStartScheduler+0x134>)
 8005212:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	b2db      	uxtb	r3, r3
 800521c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d0ef      	beq.n	800520a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800522a:	4b27      	ldr	r3, [pc, #156]	; (80052c8 <xPortStartScheduler+0x134>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f1c3 0307 	rsb	r3, r3, #7
 8005232:	2b04      	cmp	r3, #4
 8005234:	d00a      	beq.n	800524c <xPortStartScheduler+0xb8>
        __asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60bb      	str	r3, [r7, #8]
    }
 8005248:	bf00      	nop
 800524a:	e7fe      	b.n	800524a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800524c:	4b1e      	ldr	r3, [pc, #120]	; (80052c8 <xPortStartScheduler+0x134>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <xPortStartScheduler+0x134>)
 8005254:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005256:	4b1c      	ldr	r3, [pc, #112]	; (80052c8 <xPortStartScheduler+0x134>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800525e:	4a1a      	ldr	r2, [pc, #104]	; (80052c8 <xPortStartScheduler+0x134>)
 8005260:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	b2da      	uxtb	r2, r3
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800526a:	4b18      	ldr	r3, [pc, #96]	; (80052cc <xPortStartScheduler+0x138>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a17      	ldr	r2, [pc, #92]	; (80052cc <xPortStartScheduler+0x138>)
 8005270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005274:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005276:	4b15      	ldr	r3, [pc, #84]	; (80052cc <xPortStartScheduler+0x138>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a14      	ldr	r2, [pc, #80]	; (80052cc <xPortStartScheduler+0x138>)
 800527c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005280:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005282:	f000 f963 	bl	800554c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005286:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <xPortStartScheduler+0x13c>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800528c:	f000 f982 	bl	8005594 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005290:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <xPortStartScheduler+0x140>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a0f      	ldr	r2, [pc, #60]	; (80052d4 <xPortStartScheduler+0x140>)
 8005296:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800529a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800529c:	f7ff ff64 	bl	8005168 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80052a0:	f7fe ff46 	bl	8004130 <vTaskSwitchContext>
    prvTaskExitError();
 80052a4:	f7ff ff1c 	bl	80050e0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	e000ed00 	.word	0xe000ed00
 80052b8:	410fc271 	.word	0x410fc271
 80052bc:	410fc270 	.word	0x410fc270
 80052c0:	e000e400 	.word	0xe000e400
 80052c4:	200003ac 	.word	0x200003ac
 80052c8:	200003b0 	.word	0x200003b0
 80052cc:	e000ed20 	.word	0xe000ed20
 80052d0:	20000010 	.word	0x20000010
 80052d4:	e000ef34 	.word	0xe000ef34

080052d8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
	    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	    /* This port can be used on all revisions of the Cortex-M7 core other than
	     * the r0p1 parts.  r0p1 parts should use the port from the
	     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
	    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052de:	4b37      	ldr	r3, [pc, #220]	; (80053bc <vInitPrioGroupValue+0xe4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a37      	ldr	r2, [pc, #220]	; (80053c0 <vInitPrioGroupValue+0xe8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d10a      	bne.n	80052fe <vInitPrioGroupValue+0x26>
        __asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	613b      	str	r3, [r7, #16]
    }
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <vInitPrioGroupValue+0x24>
	    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052fe:	4b2f      	ldr	r3, [pc, #188]	; (80053bc <vInitPrioGroupValue+0xe4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a30      	ldr	r2, [pc, #192]	; (80053c4 <vInitPrioGroupValue+0xec>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d10a      	bne.n	800531e <vInitPrioGroupValue+0x46>
        __asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	60fb      	str	r3, [r7, #12]
    }
 800531a:	bf00      	nop
 800531c:	e7fe      	b.n	800531c <vInitPrioGroupValue+0x44>

	    #if ( configASSERT_DEFINED == 1 )
	        {
	            volatile uint32_t ulOriginalPriority;
	            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800531e:	4b2a      	ldr	r3, [pc, #168]	; (80053c8 <vInitPrioGroupValue+0xf0>)
 8005320:	617b      	str	r3, [r7, #20]
	             * functions can be called.  ISR safe functions are those that end in
	             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
	             * ensure interrupt entry is as fast and simple as possible.
	             *
	             * Save the interrupt priority value that is about to be clobbered. */
	            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	607b      	str	r3, [r7, #4]

	            /* Determine the number of priority bits available.  First write to all
	             * possible bits. */
	            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	22ff      	movs	r2, #255	; 0xff
 800532e:	701a      	strb	r2, [r3, #0]

	            /* Read the value back to see how many bits stuck. */
	            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	70fb      	strb	r3, [r7, #3]

	            /* Use the same mask on the maximum system call priority. */
	            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005340:	b2da      	uxtb	r2, r3
 8005342:	4b22      	ldr	r3, [pc, #136]	; (80053cc <vInitPrioGroupValue+0xf4>)
 8005344:	701a      	strb	r2, [r3, #0]

	            /* Calculate the maximum acceptable priority group value for the number
	             * of bits read back. */
	            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005346:	4b22      	ldr	r3, [pc, #136]	; (80053d0 <vInitPrioGroupValue+0xf8>)
 8005348:	2207      	movs	r2, #7
 800534a:	601a      	str	r2, [r3, #0]

	            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800534c:	e009      	b.n	8005362 <vInitPrioGroupValue+0x8a>
	            {
	                ulMaxPRIGROUPValue--;
 800534e:	4b20      	ldr	r3, [pc, #128]	; (80053d0 <vInitPrioGroupValue+0xf8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3b01      	subs	r3, #1
 8005354:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <vInitPrioGroupValue+0xf8>)
 8005356:	6013      	str	r3, [r2, #0]
	                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	b2db      	uxtb	r3, r3
 8005360:	70fb      	strb	r3, [r7, #3]
	            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b80      	cmp	r3, #128	; 0x80
 800536c:	d0ef      	beq.n	800534e <vInitPrioGroupValue+0x76>
	            #ifdef configPRIO_BITS
	                {
	                    /* Check the FreeRTOS configuration that defines the number of
	                     * priority bits matches the number of priority bits actually queried
	                     * from the hardware. */
	                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800536e:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <vInitPrioGroupValue+0xf8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1c3 0307 	rsb	r3, r3, #7
 8005376:	2b04      	cmp	r3, #4
 8005378:	d00a      	beq.n	8005390 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	60bb      	str	r3, [r7, #8]
    }
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <vInitPrioGroupValue+0xb6>
	                }
	            #endif

	            /* Shift the priority group value back to its position within the AIRCR
	             * register. */
	            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005390:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <vInitPrioGroupValue+0xf8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	4a0e      	ldr	r2, [pc, #56]	; (80053d0 <vInitPrioGroupValue+0xf8>)
 8005398:	6013      	str	r3, [r2, #0]
	            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800539a:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <vInitPrioGroupValue+0xf8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053a2:	4a0b      	ldr	r2, [pc, #44]	; (80053d0 <vInitPrioGroupValue+0xf8>)
 80053a4:	6013      	str	r3, [r2, #0]

	            /* Restore the clobbered interrupt priority register to its original
	             * value. */
	            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	701a      	strb	r2, [r3, #0]
	        }
	    #endif /* conifgASSERT_DEFINED */
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	e000ed00 	.word	0xe000ed00
 80053c0:	410fc271 	.word	0x410fc271
 80053c4:	410fc270 	.word	0x410fc270
 80053c8:	e000e400 	.word	0xe000e400
 80053cc:	200003ac 	.word	0x200003ac
 80053d0:	200003b0 	.word	0x200003b0

080053d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
        __asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	607b      	str	r3, [r7, #4]
    }
 80053ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80053ee:	4b0f      	ldr	r3, [pc, #60]	; (800542c <vPortEnterCritical+0x58>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3301      	adds	r3, #1
 80053f4:	4a0d      	ldr	r2, [pc, #52]	; (800542c <vPortEnterCritical+0x58>)
 80053f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80053f8:	4b0c      	ldr	r3, [pc, #48]	; (800542c <vPortEnterCritical+0x58>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d10f      	bne.n	8005420 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <vPortEnterCritical+0x5c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <vPortEnterCritical+0x4c>
        __asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	603b      	str	r3, [r7, #0]
    }
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <vPortEnterCritical+0x4a>
    }
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	20000010 	.word	0x20000010
 8005430:	e000ed04 	.word	0xe000ed04

08005434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800543a:	4b12      	ldr	r3, [pc, #72]	; (8005484 <vPortExitCritical+0x50>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <vPortExitCritical+0x24>
        __asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	607b      	str	r3, [r7, #4]
    }
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <vPortExitCritical+0x50>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3b01      	subs	r3, #1
 800545e:	4a09      	ldr	r2, [pc, #36]	; (8005484 <vPortExitCritical+0x50>)
 8005460:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005462:	4b08      	ldr	r3, [pc, #32]	; (8005484 <vPortExitCritical+0x50>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d105      	bne.n	8005476 <vPortExitCritical+0x42>
 800546a:	2300      	movs	r3, #0
 800546c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f383 8811 	msr	BASEPRI, r3
    }
 8005474:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20000010 	.word	0x20000010
	...

08005490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005490:	f3ef 8009 	mrs	r0, PSP
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <pxCurrentTCBConst>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	f01e 0f10 	tst.w	lr, #16
 80054a0:	bf08      	it	eq
 80054a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054aa:	6010      	str	r0, [r2, #0]
 80054ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054b4:	f380 8811 	msr	BASEPRI, r0
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f7fe fe36 	bl	8004130 <vTaskSwitchContext>
 80054c4:	f04f 0000 	mov.w	r0, #0
 80054c8:	f380 8811 	msr	BASEPRI, r0
 80054cc:	bc09      	pop	{r0, r3}
 80054ce:	6819      	ldr	r1, [r3, #0]
 80054d0:	6808      	ldr	r0, [r1, #0]
 80054d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d6:	f01e 0f10 	tst.w	lr, #16
 80054da:	bf08      	it	eq
 80054dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054e0:	f380 8809 	msr	PSP, r0
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	f3af 8000 	nop.w

080054f0 <pxCurrentTCBConst>:
 80054f0:	2000026c 	.word	0x2000026c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop

080054f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
        __asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	607b      	str	r3, [r7, #4]
    }
 8005510:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005512:	f001 fc11 	bl	8006d38 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005516:	f7fe fd71 	bl	8003ffc <xTaskIncrementTick>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d006      	beq.n	800552e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005520:	f001 fc68 	bl	8006df4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005524:	4b08      	ldr	r3, [pc, #32]	; (8005548 <SysTick_Handler+0x50>)
 8005526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e001      	b.n	8005532 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800552e:	f001 fc45 	bl	8006dbc <SEGGER_SYSVIEW_RecordExitISR>
 8005532:	2300      	movs	r3, #0
 8005534:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f383 8811 	msr	BASEPRI, r3
    }
 800553c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <vPortSetupTimerInterrupt+0x34>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <vPortSetupTimerInterrupt+0x38>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800555c:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <vPortSetupTimerInterrupt+0x3c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a0a      	ldr	r2, [pc, #40]	; (800558c <vPortSetupTimerInterrupt+0x40>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	099b      	lsrs	r3, r3, #6
 8005568:	4a09      	ldr	r2, [pc, #36]	; (8005590 <vPortSetupTimerInterrupt+0x44>)
 800556a:	3b01      	subs	r3, #1
 800556c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800556e:	4b04      	ldr	r3, [pc, #16]	; (8005580 <vPortSetupTimerInterrupt+0x34>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	e000e010 	.word	0xe000e010
 8005584:	e000e018 	.word	0xe000e018
 8005588:	20000000 	.word	0x20000000
 800558c:	10624dd3 	.word	0x10624dd3
 8005590:	e000e014 	.word	0xe000e014

08005594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80055a4 <vPortEnableVFP+0x10>
 8005598:	6801      	ldr	r1, [r0, #0]
 800559a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800559e:	6001      	str	r1, [r0, #0]
 80055a0:	4770      	bx	lr
 80055a2:	0000      	.short	0x0000
 80055a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop

080055ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80055b2:	f3ef 8305 	mrs	r3, IPSR
 80055b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b0f      	cmp	r3, #15
 80055bc:	d914      	bls.n	80055e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055be:	4a17      	ldr	r2, [pc, #92]	; (800561c <vPortValidateInterruptPriority+0x70>)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055c8:	4b15      	ldr	r3, [pc, #84]	; (8005620 <vPortValidateInterruptPriority+0x74>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	7afa      	ldrb	r2, [r7, #11]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d20a      	bcs.n	80055e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	607b      	str	r3, [r7, #4]
    }
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055e8:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <vPortValidateInterruptPriority+0x78>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055f0:	4b0d      	ldr	r3, [pc, #52]	; (8005628 <vPortValidateInterruptPriority+0x7c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d90a      	bls.n	800560e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	603b      	str	r3, [r7, #0]
    }
 800560a:	bf00      	nop
 800560c:	e7fe      	b.n	800560c <vPortValidateInterruptPriority+0x60>
    }
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	e000e3f0 	.word	0xe000e3f0
 8005620:	200003ac 	.word	0x200003ac
 8005624:	e000ed0c 	.word	0xe000ed0c
 8005628:	200003b0 	.word	0x200003b0

0800562c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005638:	f7fe fc30 	bl	8003e9c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800563c:	4b65      	ldr	r3, [pc, #404]	; (80057d4 <pvPortMalloc+0x1a8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005644:	f000 f934 	bl	80058b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005648:	4b63      	ldr	r3, [pc, #396]	; (80057d8 <pvPortMalloc+0x1ac>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4013      	ands	r3, r2
 8005650:	2b00      	cmp	r3, #0
 8005652:	f040 80a7 	bne.w	80057a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d02d      	beq.n	80056b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800565c:	2208      	movs	r2, #8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	429a      	cmp	r2, r3
 8005666:	d227      	bcs.n	80056b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005668:	2208      	movs	r2, #8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	2b00      	cmp	r3, #0
 8005678:	d021      	beq.n	80056be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f023 0307 	bic.w	r3, r3, #7
 8005680:	3308      	adds	r3, #8
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	429a      	cmp	r2, r3
 8005686:	d214      	bcs.n	80056b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	3308      	adds	r3, #8
 8005690:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	2b00      	cmp	r3, #0
 800569a:	d010      	beq.n	80056be <pvPortMalloc+0x92>
        __asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	617b      	str	r3, [r7, #20]
    }
 80056ae:	bf00      	nop
 80056b0:	e7fe      	b.n	80056b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056b6:	e002      	b.n	80056be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	607b      	str	r3, [r7, #4]
 80056bc:	e000      	b.n	80056c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d06e      	beq.n	80057a4 <pvPortMalloc+0x178>
 80056c6:	4b45      	ldr	r3, [pc, #276]	; (80057dc <pvPortMalloc+0x1b0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d869      	bhi.n	80057a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80056d0:	4b43      	ldr	r3, [pc, #268]	; (80057e0 <pvPortMalloc+0x1b4>)
 80056d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80056d4:	4b42      	ldr	r3, [pc, #264]	; (80057e0 <pvPortMalloc+0x1b4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056da:	e004      	b.n	80056e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d903      	bls.n	80056f8 <pvPortMalloc+0xcc>
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f1      	bne.n	80056dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80056f8:	4b36      	ldr	r3, [pc, #216]	; (80057d4 <pvPortMalloc+0x1a8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fe:	429a      	cmp	r2, r3
 8005700:	d050      	beq.n	80057a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2208      	movs	r2, #8
 8005708:	4413      	add	r3, r2
 800570a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	1ad2      	subs	r2, r2, r3
 800571c:	2308      	movs	r3, #8
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	429a      	cmp	r2, r3
 8005722:	d91f      	bls.n	8005764 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4413      	add	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <pvPortMalloc+0x120>
        __asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	613b      	str	r3, [r7, #16]
    }
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	1ad2      	subs	r2, r2, r3
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800575e:	69b8      	ldr	r0, [r7, #24]
 8005760:	f000 f908 	bl	8005974 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005764:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <pvPortMalloc+0x1b0>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	4a1b      	ldr	r2, [pc, #108]	; (80057dc <pvPortMalloc+0x1b0>)
 8005770:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005772:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <pvPortMalloc+0x1b0>)
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	4b1b      	ldr	r3, [pc, #108]	; (80057e4 <pvPortMalloc+0x1b8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d203      	bcs.n	8005786 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800577e:	4b17      	ldr	r3, [pc, #92]	; (80057dc <pvPortMalloc+0x1b0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <pvPortMalloc+0x1b8>)
 8005784:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <pvPortMalloc+0x1ac>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	431a      	orrs	r2, r3
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800579a:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <pvPortMalloc+0x1bc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3301      	adds	r3, #1
 80057a0:	4a11      	ldr	r2, [pc, #68]	; (80057e8 <pvPortMalloc+0x1bc>)
 80057a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80057a4:	f7fe fb88 	bl	8003eb8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <pvPortMalloc+0x19c>
        __asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	60fb      	str	r3, [r7, #12]
    }
 80057c4:	bf00      	nop
 80057c6:	e7fe      	b.n	80057c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80057c8:	69fb      	ldr	r3, [r7, #28]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3728      	adds	r7, #40	; 0x28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	200193bc 	.word	0x200193bc
 80057d8:	200193d0 	.word	0x200193d0
 80057dc:	200193c0 	.word	0x200193c0
 80057e0:	200193b4 	.word	0x200193b4
 80057e4:	200193c4 	.word	0x200193c4
 80057e8:	200193c8 	.word	0x200193c8

080057ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d04d      	beq.n	800589a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80057fe:	2308      	movs	r3, #8
 8005800:	425b      	negs	r3, r3
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4413      	add	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	4b24      	ldr	r3, [pc, #144]	; (80058a4 <vPortFree+0xb8>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4013      	ands	r3, r2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10a      	bne.n	8005830 <vPortFree+0x44>
        __asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	60fb      	str	r3, [r7, #12]
    }
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <vPortFree+0x62>
        __asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	60bb      	str	r3, [r7, #8]
    }
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <vPortFree+0xb8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01e      	beq.n	800589a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d11a      	bne.n	800589a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <vPortFree+0xb8>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	43db      	mvns	r3, r3
 800586e:	401a      	ands	r2, r3
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005874:	f7fe fb12 	bl	8003e9c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <vPortFree+0xbc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4413      	add	r3, r2
 8005882:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <vPortFree+0xbc>)
 8005884:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005886:	6938      	ldr	r0, [r7, #16]
 8005888:	f000 f874 	bl	8005974 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800588c:	4b07      	ldr	r3, [pc, #28]	; (80058ac <vPortFree+0xc0>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3301      	adds	r3, #1
 8005892:	4a06      	ldr	r2, [pc, #24]	; (80058ac <vPortFree+0xc0>)
 8005894:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005896:	f7fe fb0f 	bl	8003eb8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800589a:	bf00      	nop
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	200193d0 	.word	0x200193d0
 80058a8:	200193c0 	.word	0x200193c0
 80058ac:	200193cc 	.word	0x200193cc

080058b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058b6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80058ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80058bc:	4b27      	ldr	r3, [pc, #156]	; (800595c <prvHeapInit+0xac>)
 80058be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00c      	beq.n	80058e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3307      	adds	r3, #7
 80058ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0307 	bic.w	r3, r3, #7
 80058d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	4a1f      	ldr	r2, [pc, #124]	; (800595c <prvHeapInit+0xac>)
 80058e0:	4413      	add	r3, r2
 80058e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058e8:	4a1d      	ldr	r2, [pc, #116]	; (8005960 <prvHeapInit+0xb0>)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80058ee:	4b1c      	ldr	r3, [pc, #112]	; (8005960 <prvHeapInit+0xb0>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4413      	add	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80058fc:	2208      	movs	r2, #8
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0307 	bic.w	r3, r3, #7
 800590a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4a15      	ldr	r2, [pc, #84]	; (8005964 <prvHeapInit+0xb4>)
 8005910:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005912:	4b14      	ldr	r3, [pc, #80]	; (8005964 <prvHeapInit+0xb4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2200      	movs	r2, #0
 8005918:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800591a:	4b12      	ldr	r3, [pc, #72]	; (8005964 <prvHeapInit+0xb4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	1ad2      	subs	r2, r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005930:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <prvHeapInit+0xb4>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4a0a      	ldr	r2, [pc, #40]	; (8005968 <prvHeapInit+0xb8>)
 800593e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4a09      	ldr	r2, [pc, #36]	; (800596c <prvHeapInit+0xbc>)
 8005946:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005948:	4b09      	ldr	r3, [pc, #36]	; (8005970 <prvHeapInit+0xc0>)
 800594a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800594e:	601a      	str	r2, [r3, #0]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	200003b4 	.word	0x200003b4
 8005960:	200193b4 	.word	0x200193b4
 8005964:	200193bc 	.word	0x200193bc
 8005968:	200193c4 	.word	0x200193c4
 800596c:	200193c0 	.word	0x200193c0
 8005970:	200193d0 	.word	0x200193d0

08005974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800597c:	4b28      	ldr	r3, [pc, #160]	; (8005a20 <prvInsertBlockIntoFreeList+0xac>)
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	e002      	b.n	8005988 <prvInsertBlockIntoFreeList+0x14>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	429a      	cmp	r2, r3
 8005990:	d8f7      	bhi.n	8005982 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	4413      	add	r3, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d108      	bne.n	80059b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	441a      	add	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	441a      	add	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d118      	bne.n	80059fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	4b15      	ldr	r3, [pc, #84]	; (8005a24 <prvInsertBlockIntoFreeList+0xb0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d00d      	beq.n	80059f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	441a      	add	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	e008      	b.n	8005a04 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <prvInsertBlockIntoFreeList+0xb0>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	e003      	b.n	8005a04 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d002      	beq.n	8005a12 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005a12:	bf00      	nop
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	200193b4 	.word	0x200193b4
 8005a24:	200193bc 	.word	0x200193bc

08005a28 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005a36:	2205      	movs	r2, #5
 8005a38:	492b      	ldr	r1, [pc, #172]	; (8005ae8 <SYSVIEW_AddTask+0xc0>)
 8005a3a:	68b8      	ldr	r0, [r7, #8]
 8005a3c:	f001 fdf5 	bl	800762a <memcmp>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d04b      	beq.n	8005ade <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005a46:	4b29      	ldr	r3, [pc, #164]	; (8005aec <SYSVIEW_AddTask+0xc4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b07      	cmp	r3, #7
 8005a4c:	d903      	bls.n	8005a56 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005a4e:	4828      	ldr	r0, [pc, #160]	; (8005af0 <SYSVIEW_AddTask+0xc8>)
 8005a50:	f001 fc1a 	bl	8007288 <SEGGER_SYSVIEW_Warn>
    return;
 8005a54:	e044      	b.n	8005ae0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005a56:	4b25      	ldr	r3, [pc, #148]	; (8005aec <SYSVIEW_AddTask+0xc4>)
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4926      	ldr	r1, [pc, #152]	; (8005af4 <SYSVIEW_AddTask+0xcc>)
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005a6a:	4b20      	ldr	r3, [pc, #128]	; (8005aec <SYSVIEW_AddTask+0xc4>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4921      	ldr	r1, [pc, #132]	; (8005af4 <SYSVIEW_AddTask+0xcc>)
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005a80:	4b1a      	ldr	r3, [pc, #104]	; (8005aec <SYSVIEW_AddTask+0xc4>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	491b      	ldr	r1, [pc, #108]	; (8005af4 <SYSVIEW_AddTask+0xcc>)
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	3308      	adds	r3, #8
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005a96:	4b15      	ldr	r3, [pc, #84]	; (8005aec <SYSVIEW_AddTask+0xc4>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4916      	ldr	r1, [pc, #88]	; (8005af4 <SYSVIEW_AddTask+0xcc>)
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005aac:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <SYSVIEW_AddTask+0xc4>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	4910      	ldr	r1, [pc, #64]	; (8005af4 <SYSVIEW_AddTask+0xcc>)
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	3310      	adds	r3, #16
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005ac2:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <SYSVIEW_AddTask+0xc4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	4a08      	ldr	r2, [pc, #32]	; (8005aec <SYSVIEW_AddTask+0xc4>)
 8005aca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f80e 	bl	8005af8 <SYSVIEW_SendTaskInfo>
 8005adc:	e000      	b.n	8005ae0 <SYSVIEW_AddTask+0xb8>
    return;
 8005ade:	bf00      	nop

}
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	080087cc 	.word	0x080087cc
 8005aec:	20019474 	.word	0x20019474
 8005af0:	080087d4 	.word	0x080087d4
 8005af4:	200193d4 	.word	0x200193d4

08005af8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	; 0x28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005b06:	f107 0314 	add.w	r3, r7, #20
 8005b0a:	2214      	movs	r2, #20
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f001 fd9b 	bl	800764a <memset>
  TaskInfo.TaskID     = TaskID;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005b28:	f107 0314 	add.w	r3, r7, #20
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 ffd9 	bl	8006ae4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005b32:	bf00      	nop
 8005b34:	3728      	adds	r7, #40	; 0x28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005b42:	4b1e      	ldr	r3, [pc, #120]	; (8005bbc <USART2_IRQHandler+0x80>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d011      	beq.n	8005b76 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005b52:	4b1b      	ldr	r3, [pc, #108]	; (8005bc0 <USART2_IRQHandler+0x84>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f003 030b 	and.w	r3, r3, #11
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d108      	bne.n	8005b76 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005b64:	4b17      	ldr	r3, [pc, #92]	; (8005bc4 <USART2_IRQHandler+0x88>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d004      	beq.n	8005b76 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005b6c:	4b15      	ldr	r3, [pc, #84]	; (8005bc4 <USART2_IRQHandler+0x88>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	79fa      	ldrb	r2, [r7, #7]
 8005b72:	4610      	mov	r0, r2
 8005b74:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01a      	beq.n	8005bb6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005b80:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <USART2_IRQHandler+0x8c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d015      	beq.n	8005bb4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005b88:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <USART2_IRQHandler+0x8c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	1dfa      	adds	r2, r7, #7
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4798      	blx	r3
 8005b92:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <USART2_IRQHandler+0x90>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a0b      	ldr	r2, [pc, #44]	; (8005bcc <USART2_IRQHandler+0x90>)
 8005ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	e006      	b.n	8005bb6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <USART2_IRQHandler+0x80>)
 8005baa:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005bac:	79fa      	ldrb	r2, [r7, #7]
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <USART2_IRQHandler+0x84>)
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e000      	b.n	8005bb6 <USART2_IRQHandler+0x7a>
      return;
 8005bb4:	bf00      	nop
    }
  }
}
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40004400 	.word	0x40004400
 8005bc0:	40004404 	.word	0x40004404
 8005bc4:	20019478 	.word	0x20019478
 8005bc8:	2001947c 	.word	0x2001947c
 8005bcc:	4000440c 	.word	0x4000440c

08005bd0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005bd4:	4b05      	ldr	r3, [pc, #20]	; (8005bec <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a04      	ldr	r2, [pc, #16]	; (8005bec <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bde:	6013      	str	r3, [r2, #0]
}
 8005be0:	bf00      	nop
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	4000440c 	.word	0x4000440c

08005bf0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005bf6:	4b24      	ldr	r3, [pc, #144]	; (8005c88 <_DoInit+0x98>)
 8005bf8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2203      	movs	r2, #3
 8005bfe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2203      	movs	r2, #3
 8005c04:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a20      	ldr	r2, [pc, #128]	; (8005c8c <_DoInit+0x9c>)
 8005c0a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a20      	ldr	r2, [pc, #128]	; (8005c90 <_DoInit+0xa0>)
 8005c10:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c18:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <_DoInit+0x9c>)
 8005c30:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a17      	ldr	r2, [pc, #92]	; (8005c94 <_DoInit+0xa4>)
 8005c36:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2210      	movs	r2, #16
 8005c3c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3307      	adds	r3, #7
 8005c54:	4a10      	ldr	r2, [pc, #64]	; (8005c98 <_DoInit+0xa8>)
 8005c56:	6810      	ldr	r0, [r2, #0]
 8005c58:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005c5a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a0e      	ldr	r2, [pc, #56]	; (8005c9c <_DoInit+0xac>)
 8005c62:	6810      	ldr	r0, [r2, #0]
 8005c64:	6018      	str	r0, [r3, #0]
 8005c66:	8891      	ldrh	r1, [r2, #4]
 8005c68:	7992      	ldrb	r2, [r2, #6]
 8005c6a:	8099      	strh	r1, [r3, #4]
 8005c6c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005c6e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005c78:	f3bf 8f5f 	dmb	sy
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	20019480 	.word	0x20019480
 8005c8c:	08008824 	.word	0x08008824
 8005c90:	20019528 	.word	0x20019528
 8005c94:	20019928 	.word	0x20019928
 8005c98:	08008830 	.word	0x08008830
 8005c9c:	08008834 	.word	0x08008834

08005ca0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	; 0x28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005cac:	2300      	movs	r3, #0
 8005cae:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d905      	bls.n	8005cd0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cce:	e007      	b.n	8005ce0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	69b9      	ldr	r1, [r7, #24]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	1acb      	subs	r3, r1, r3
 8005cda:	4413      	add	r3, r2
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cea:	4293      	cmp	r3, r2
 8005cec:	bf28      	it	cs
 8005cee:	4613      	movcs	r3, r2
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	bf28      	it	cs
 8005cfa:	4613      	movcs	r3, r2
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	6978      	ldr	r0, [r7, #20]
 8005d0e:	f001 fd06 	bl	800771e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005d12:	6a3a      	ldr	r2, [r7, #32]
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	4413      	add	r3, r2
 8005d18:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	4413      	add	r3, r2
 8005d20:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005d2a:	69fa      	ldr	r2, [r7, #28]
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	4413      	add	r3, r2
 8005d30:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d101      	bne.n	8005d40 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d40:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1b2      	bne.n	8005cb6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005d50:	6a3b      	ldr	r3, [r7, #32]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3728      	adds	r7, #40	; 0x28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b088      	sub	sp, #32
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d911      	bls.n	8005da2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	6938      	ldr	r0, [r7, #16]
 8005d8e:	f001 fcc6 	bl	800771e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d92:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	441a      	add	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005da0:	e01f      	b.n	8005de2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	68b9      	ldr	r1, [r7, #8]
 8005db4:	6938      	ldr	r0, [r7, #16]
 8005db6:	f001 fcb2 	bl	800771e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	4413      	add	r3, r2
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6938      	ldr	r0, [r7, #16]
 8005dd4:	f001 fca3 	bl	800771e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005dd8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	60da      	str	r2, [r3, #12]
}
 8005de2:	bf00      	nop
 8005de4:	3720      	adds	r7, #32
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005dea:	b480      	push	{r7}
 8005dec:	b087      	sub	sp, #28
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d808      	bhi.n	8005e18 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	1ad2      	subs	r2, r2, r3
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4413      	add	r3, r2
 8005e12:	3b01      	subs	r3, #1
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e004      	b.n	8005e22 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005e22:	697b      	ldr	r3, [r7, #20]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08c      	sub	sp, #48	; 0x30
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005e3c:	4b3e      	ldr	r3, [pc, #248]	; (8005f38 <SEGGER_RTT_ReadNoLock+0x108>)
 8005e3e:	623b      	str	r3, [r7, #32]
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <SEGGER_RTT_ReadNoLock+0x1e>
 8005e4a:	f7ff fed1 	bl	8005bf0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4613      	mov	r3, r2
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	4413      	add	r3, r2
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	3360      	adds	r3, #96	; 0x60
 8005e5a:	4a37      	ldr	r2, [pc, #220]	; (8005f38 <SEGGER_RTT_ReadNoLock+0x108>)
 8005e5c:	4413      	add	r3, r2
 8005e5e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005e70:	2300      	movs	r3, #0
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d92b      	bls.n	8005ed4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	bf28      	it	cs
 8005e8e:	4613      	movcs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	4413      	add	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	6939      	ldr	r1, [r7, #16]
 8005ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ea2:	f001 fc3c 	bl	800771e <memcpy>
    NumBytesRead += NumBytesRem;
 8005ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	4413      	add	r3, r2
 8005eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d101      	bne.n	8005ed4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	bf28      	it	cs
 8005ee4:	4613      	movcs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d019      	beq.n	8005f22 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	4413      	add	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	6939      	ldr	r1, [r7, #16]
 8005efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005efe:	f001 fc0e 	bl	800771e <memcpy>
    NumBytesRead += NumBytesRem;
 8005f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	4413      	add	r3, r2
 8005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	4413      	add	r3, r2
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4413      	add	r3, r2
 8005f20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f2c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3730      	adds	r7, #48	; 0x30
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20019480 	.word	0x20019480

08005f3c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b088      	sub	sp, #32
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	4613      	mov	r3, r2
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	4413      	add	r3, r2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	4a1f      	ldr	r2, [pc, #124]	; (8005fd8 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005f5a:	4413      	add	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d029      	beq.n	8005fba <SEGGER_RTT_WriteNoLock+0x7e>
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d82e      	bhi.n	8005fc8 <SEGGER_RTT_WriteNoLock+0x8c>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <SEGGER_RTT_WriteNoLock+0x38>
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d013      	beq.n	8005f9a <SEGGER_RTT_WriteNoLock+0x5e>
 8005f72:	e029      	b.n	8005fc8 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005f74:	6978      	ldr	r0, [r7, #20]
 8005f76:	f7ff ff38 	bl	8005dea <_GetAvailWriteSpace>
 8005f7a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d202      	bcs.n	8005f8a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005f88:	e021      	b.n	8005fce <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	69b9      	ldr	r1, [r7, #24]
 8005f92:	6978      	ldr	r0, [r7, #20]
 8005f94:	f7ff fee1 	bl	8005d5a <_WriteNoCheck>
    break;
 8005f98:	e019      	b.n	8005fce <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005f9a:	6978      	ldr	r0, [r7, #20]
 8005f9c:	f7ff ff25 	bl	8005dea <_GetAvailWriteSpace>
 8005fa0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	bf28      	it	cs
 8005faa:	4613      	movcs	r3, r2
 8005fac:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	69b9      	ldr	r1, [r7, #24]
 8005fb2:	6978      	ldr	r0, [r7, #20]
 8005fb4:	f7ff fed1 	bl	8005d5a <_WriteNoCheck>
    break;
 8005fb8:	e009      	b.n	8005fce <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	69b9      	ldr	r1, [r7, #24]
 8005fbe:	6978      	ldr	r0, [r7, #20]
 8005fc0:	f7ff fe6e 	bl	8005ca0 <_WriteBlocking>
 8005fc4:	61f8      	str	r0, [r7, #28]
    break;
 8005fc6:	e002      	b.n	8005fce <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61fb      	str	r3, [r7, #28]
    break;
 8005fcc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005fce:	69fb      	ldr	r3, [r7, #28]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20019480 	.word	0x20019480

08005fdc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <SEGGER_RTT_Write+0x48>)
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <SEGGER_RTT_Write+0x1e>
 8005ff6:	f7ff fdfb 	bl	8005bf0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8005ffe:	f04f 0120 	mov.w	r1, #32
 8006002:	f381 8811 	msr	BASEPRI, r1
 8006006:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7ff ff95 	bl	8005f3c <SEGGER_RTT_WriteNoLock>
 8006012:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800601a:	697b      	ldr	r3, [r7, #20]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3720      	adds	r7, #32
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20019480 	.word	0x20019480

08006028 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006038:	e002      	b.n	8006040 <_EncodeStr+0x18>
    Len++;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	3301      	adds	r3, #1
 800603e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4413      	add	r3, r2
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f6      	bne.n	800603a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	429a      	cmp	r2, r3
 8006052:	d901      	bls.n	8006058 <_EncodeStr+0x30>
    Len = Limit;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	2bfe      	cmp	r3, #254	; 0xfe
 800605c:	d806      	bhi.n	800606c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	60fa      	str	r2, [r7, #12]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e011      	b.n	8006090 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	60fa      	str	r2, [r7, #12]
 8006072:	22ff      	movs	r2, #255	; 0xff
 8006074:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	60fa      	str	r2, [r7, #12]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	0a19      	lsrs	r1, r3, #8
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	60fa      	str	r2, [r7, #12]
 800608c:	b2ca      	uxtb	r2, r1
 800608e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006094:	e00a      	b.n	80060ac <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	1c53      	adds	r3, r2, #1
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	1c59      	adds	r1, r3, #1
 80060a0:	60f9      	str	r1, [r7, #12]
 80060a2:	7812      	ldrb	r2, [r2, #0]
 80060a4:	701a      	strb	r2, [r3, #0]
    n++;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	3301      	adds	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d3f0      	bcc.n	8006096 <_EncodeStr+0x6e>
  }
  return pPayload;
 80060b4:	68fb      	ldr	r3, [r7, #12]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3304      	adds	r3, #4
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
	...

080060dc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060e2:	4b35      	ldr	r3, [pc, #212]	; (80061b8 <_HandleIncomingPacket+0xdc>)
 80060e4:	7e1b      	ldrb	r3, [r3, #24]
 80060e6:	4618      	mov	r0, r3
 80060e8:	1cfb      	adds	r3, r7, #3
 80060ea:	2201      	movs	r2, #1
 80060ec:	4619      	mov	r1, r3
 80060ee:	f7ff fe9f 	bl	8005e30 <SEGGER_RTT_ReadNoLock>
 80060f2:	4603      	mov	r3, r0
 80060f4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	dd59      	ble.n	80061b0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	2b80      	cmp	r3, #128	; 0x80
 8006100:	d032      	beq.n	8006168 <_HandleIncomingPacket+0x8c>
 8006102:	2b80      	cmp	r3, #128	; 0x80
 8006104:	dc42      	bgt.n	800618c <_HandleIncomingPacket+0xb0>
 8006106:	2b07      	cmp	r3, #7
 8006108:	dc16      	bgt.n	8006138 <_HandleIncomingPacket+0x5c>
 800610a:	2b00      	cmp	r3, #0
 800610c:	dd3e      	ble.n	800618c <_HandleIncomingPacket+0xb0>
 800610e:	3b01      	subs	r3, #1
 8006110:	2b06      	cmp	r3, #6
 8006112:	d83b      	bhi.n	800618c <_HandleIncomingPacket+0xb0>
 8006114:	a201      	add	r2, pc, #4	; (adr r2, 800611c <_HandleIncomingPacket+0x40>)
 8006116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611a:	bf00      	nop
 800611c:	0800613f 	.word	0x0800613f
 8006120:	08006145 	.word	0x08006145
 8006124:	0800614b 	.word	0x0800614b
 8006128:	08006151 	.word	0x08006151
 800612c:	08006157 	.word	0x08006157
 8006130:	0800615d 	.word	0x0800615d
 8006134:	08006163 	.word	0x08006163
 8006138:	2b7f      	cmp	r3, #127	; 0x7f
 800613a:	d034      	beq.n	80061a6 <_HandleIncomingPacket+0xca>
 800613c:	e026      	b.n	800618c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800613e:	f000 fb55 	bl	80067ec <SEGGER_SYSVIEW_Start>
      break;
 8006142:	e035      	b.n	80061b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006144:	f000 fc0e 	bl	8006964 <SEGGER_SYSVIEW_Stop>
      break;
 8006148:	e032      	b.n	80061b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800614a:	f000 fdc3 	bl	8006cd4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800614e:	e02f      	b.n	80061b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006150:	f000 fdac 	bl	8006cac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006154:	e02c      	b.n	80061b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006156:	f000 fc2b 	bl	80069b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800615a:	e029      	b.n	80061b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800615c:	f001 f856 	bl	800720c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006160:	e026      	b.n	80061b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006162:	f001 f835 	bl	80071d0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006166:	e023      	b.n	80061b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006168:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <_HandleIncomingPacket+0xdc>)
 800616a:	7e1b      	ldrb	r3, [r3, #24]
 800616c:	4618      	mov	r0, r3
 800616e:	1cfb      	adds	r3, r7, #3
 8006170:	2201      	movs	r2, #1
 8006172:	4619      	mov	r1, r3
 8006174:	f7ff fe5c 	bl	8005e30 <SEGGER_RTT_ReadNoLock>
 8006178:	4603      	mov	r3, r0
 800617a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	dd13      	ble.n	80061aa <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	4618      	mov	r0, r3
 8006186:	f000 ffa3 	bl	80070d0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800618a:	e00e      	b.n	80061aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	b25b      	sxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	da0c      	bge.n	80061ae <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006194:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <_HandleIncomingPacket+0xdc>)
 8006196:	7e1b      	ldrb	r3, [r3, #24]
 8006198:	4618      	mov	r0, r3
 800619a:	1cfb      	adds	r3, r7, #3
 800619c:	2201      	movs	r2, #1
 800619e:	4619      	mov	r1, r3
 80061a0:	f7ff fe46 	bl	8005e30 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80061a4:	e003      	b.n	80061ae <_HandleIncomingPacket+0xd2>
      break;
 80061a6:	bf00      	nop
 80061a8:	e002      	b.n	80061b0 <_HandleIncomingPacket+0xd4>
      break;
 80061aa:	bf00      	nop
 80061ac:	e000      	b.n	80061b0 <_HandleIncomingPacket+0xd4>
      break;
 80061ae:	bf00      	nop
    }
  }
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20019938 	.word	0x20019938

080061bc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08c      	sub	sp, #48	; 0x30
 80061c0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80061c2:	2301      	movs	r3, #1
 80061c4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80061c6:	1d3b      	adds	r3, r7, #4
 80061c8:	3301      	adds	r3, #1
 80061ca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d0:	4b32      	ldr	r3, [pc, #200]	; (800629c <_TrySendOverflowPacket+0xe0>)
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d6:	e00b      	b.n	80061f0 <_TrySendOverflowPacket+0x34>
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	1c59      	adds	r1, r3, #1
 80061e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	09db      	lsrs	r3, r3, #7
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2b7f      	cmp	r3, #127	; 0x7f
 80061f4:	d8f0      	bhi.n	80061d8 <_TrySendOverflowPacket+0x1c>
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006206:	4b26      	ldr	r3, [pc, #152]	; (80062a0 <_TrySendOverflowPacket+0xe4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800620c:	4b23      	ldr	r3, [pc, #140]	; (800629c <_TrySendOverflowPacket+0xe0>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	623b      	str	r3, [r7, #32]
 800621e:	e00b      	b.n	8006238 <_TrySendOverflowPacket+0x7c>
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	b2da      	uxtb	r2, r3
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	1c59      	adds	r1, r3, #1
 8006228:	6279      	str	r1, [r7, #36]	; 0x24
 800622a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	09db      	lsrs	r3, r3, #7
 8006236:	623b      	str	r3, [r7, #32]
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	2b7f      	cmp	r3, #127	; 0x7f
 800623c:	d8f0      	bhi.n	8006220 <_TrySendOverflowPacket+0x64>
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	627a      	str	r2, [r7, #36]	; 0x24
 8006244:	6a3a      	ldr	r2, [r7, #32]
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800624e:	4b13      	ldr	r3, [pc, #76]	; (800629c <_TrySendOverflowPacket+0xe0>)
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	4618      	mov	r0, r3
 8006254:	1d3b      	adds	r3, r7, #4
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	461a      	mov	r2, r3
 800625c:	1d3b      	adds	r3, r7, #4
 800625e:	4619      	mov	r1, r3
 8006260:	f7f9 ffb6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006264:	4603      	mov	r3, r0
 8006266:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8006268:	f7ff fcb2 	bl	8005bd0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d009      	beq.n	8006286 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006272:	4a0a      	ldr	r2, [pc, #40]	; (800629c <_TrySendOverflowPacket+0xe0>)
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006278:	4b08      	ldr	r3, [pc, #32]	; (800629c <_TrySendOverflowPacket+0xe0>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	3b01      	subs	r3, #1
 800627e:	b2da      	uxtb	r2, r3
 8006280:	4b06      	ldr	r3, [pc, #24]	; (800629c <_TrySendOverflowPacket+0xe0>)
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	e004      	b.n	8006290 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006286:	4b05      	ldr	r3, [pc, #20]	; (800629c <_TrySendOverflowPacket+0xe0>)
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	3301      	adds	r3, #1
 800628c:	4a03      	ldr	r2, [pc, #12]	; (800629c <_TrySendOverflowPacket+0xe0>)
 800628e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006290:	693b      	ldr	r3, [r7, #16]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3730      	adds	r7, #48	; 0x30
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20019938 	.word	0x20019938
 80062a0:	e0001004 	.word	0xe0001004

080062a4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08a      	sub	sp, #40	; 0x28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80062b0:	4b6d      	ldr	r3, [pc, #436]	; (8006468 <_SendPacket+0x1c4>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d010      	beq.n	80062da <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80062b8:	4b6b      	ldr	r3, [pc, #428]	; (8006468 <_SendPacket+0x1c4>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 80a5 	beq.w	800640c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80062c2:	4b69      	ldr	r3, [pc, #420]	; (8006468 <_SendPacket+0x1c4>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d109      	bne.n	80062de <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80062ca:	f7ff ff77 	bl	80061bc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80062ce:	4b66      	ldr	r3, [pc, #408]	; (8006468 <_SendPacket+0x1c4>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	f040 809c 	bne.w	8006410 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80062d8:	e001      	b.n	80062de <_SendPacket+0x3a>
    goto Send;
 80062da:	bf00      	nop
 80062dc:	e000      	b.n	80062e0 <_SendPacket+0x3c>
Send:
 80062de:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b1f      	cmp	r3, #31
 80062e4:	d809      	bhi.n	80062fa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80062e6:	4b60      	ldr	r3, [pc, #384]	; (8006468 <_SendPacket+0x1c4>)
 80062e8:	69da      	ldr	r2, [r3, #28]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	fa22 f303 	lsr.w	r3, r2, r3
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f040 808d 	bne.w	8006414 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b17      	cmp	r3, #23
 80062fe:	d807      	bhi.n	8006310 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3b01      	subs	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	b2da      	uxtb	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	e03d      	b.n	800638c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2b7f      	cmp	r3, #127	; 0x7f
 800631c:	d912      	bls.n	8006344 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	09da      	lsrs	r2, r3, #7
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3b01      	subs	r3, #1
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	3a01      	subs	r2, #1
 8006336:	60fa      	str	r2, [r7, #12]
 8006338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	e006      	b.n	8006352 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3b01      	subs	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	b2da      	uxtb	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b7f      	cmp	r3, #127	; 0x7f
 8006356:	d912      	bls.n	800637e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	09da      	lsrs	r2, r3, #7
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3b01      	subs	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	3a01      	subs	r2, #1
 8006370:	60fa      	str	r2, [r7, #12]
 8006372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006376:	b2da      	uxtb	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	e006      	b.n	800638c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3b01      	subs	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	b2da      	uxtb	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800638c:	4b37      	ldr	r3, [pc, #220]	; (800646c <_SendPacket+0x1c8>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006392:	4b35      	ldr	r3, [pc, #212]	; (8006468 <_SendPacket+0x1c4>)
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	623b      	str	r3, [r7, #32]
 80063a4:	e00b      	b.n	80063be <_SendPacket+0x11a>
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	1c59      	adds	r1, r3, #1
 80063ae:	6279      	str	r1, [r7, #36]	; 0x24
 80063b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	09db      	lsrs	r3, r3, #7
 80063bc:	623b      	str	r3, [r7, #32]
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	2b7f      	cmp	r3, #127	; 0x7f
 80063c2:	d8f0      	bhi.n	80063a6 <_SendPacket+0x102>
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	627a      	str	r2, [r7, #36]	; 0x24
 80063ca:	6a3a      	ldr	r2, [r7, #32]
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80063d4:	4b24      	ldr	r3, [pc, #144]	; (8006468 <_SendPacket+0x1c4>)
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	4618      	mov	r0, r3
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	68f9      	ldr	r1, [r7, #12]
 80063e4:	f7f9 fef4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80063e8:	4603      	mov	r3, r0
 80063ea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80063ec:	f7ff fbf0 	bl	8005bd0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80063f6:	4a1c      	ldr	r2, [pc, #112]	; (8006468 <_SendPacket+0x1c4>)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	60d3      	str	r3, [r2, #12]
 80063fc:	e00b      	b.n	8006416 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80063fe:	4b1a      	ldr	r3, [pc, #104]	; (8006468 <_SendPacket+0x1c4>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	4b18      	ldr	r3, [pc, #96]	; (8006468 <_SendPacket+0x1c4>)
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	e004      	b.n	8006416 <_SendPacket+0x172>
    goto SendDone;
 800640c:	bf00      	nop
 800640e:	e002      	b.n	8006416 <_SendPacket+0x172>
      goto SendDone;
 8006410:	bf00      	nop
 8006412:	e000      	b.n	8006416 <_SendPacket+0x172>
      goto SendDone;
 8006414:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006416:	4b14      	ldr	r3, [pc, #80]	; (8006468 <_SendPacket+0x1c4>)
 8006418:	7e1b      	ldrb	r3, [r3, #24]
 800641a:	4619      	mov	r1, r3
 800641c:	4a14      	ldr	r2, [pc, #80]	; (8006470 <_SendPacket+0x1cc>)
 800641e:	460b      	mov	r3, r1
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	440b      	add	r3, r1
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4413      	add	r3, r2
 8006428:	336c      	adds	r3, #108	; 0x6c
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	4b0e      	ldr	r3, [pc, #56]	; (8006468 <_SendPacket+0x1c4>)
 800642e:	7e1b      	ldrb	r3, [r3, #24]
 8006430:	4618      	mov	r0, r3
 8006432:	490f      	ldr	r1, [pc, #60]	; (8006470 <_SendPacket+0x1cc>)
 8006434:	4603      	mov	r3, r0
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	4403      	add	r3, r0
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	440b      	add	r3, r1
 800643e:	3370      	adds	r3, #112	; 0x70
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d00b      	beq.n	800645e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006446:	4b08      	ldr	r3, [pc, #32]	; (8006468 <_SendPacket+0x1c4>)
 8006448:	789b      	ldrb	r3, [r3, #2]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d107      	bne.n	800645e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800644e:	4b06      	ldr	r3, [pc, #24]	; (8006468 <_SendPacket+0x1c4>)
 8006450:	2201      	movs	r2, #1
 8006452:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006454:	f7ff fe42 	bl	80060dc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006458:	4b03      	ldr	r3, [pc, #12]	; (8006468 <_SendPacket+0x1c4>)
 800645a:	2200      	movs	r2, #0
 800645c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800645e:	bf00      	nop
 8006460:	3728      	adds	r7, #40	; 0x28
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20019938 	.word	0x20019938
 800646c:	e0001004 	.word	0xe0001004
 8006470:	20019480 	.word	0x20019480

08006474 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800647c:	f3ef 8311 	mrs	r3, BASEPRI
 8006480:	f04f 0120 	mov.w	r1, #32
 8006484:	f381 8811 	msr	BASEPRI, r1
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	4808      	ldr	r0, [pc, #32]	; (80064ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800648c:	f7ff fe19 	bl	80060c2 <_PreparePacket>
 8006490:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	68b8      	ldr	r0, [r7, #8]
 8006498:	f7ff ff04 	bl	80062a4 <_SendPacket>
  RECORD_END();
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f383 8811 	msr	BASEPRI, r3
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20019968 	.word	0x20019968

080064b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064ba:	f3ef 8311 	mrs	r3, BASEPRI
 80064be:	f04f 0120 	mov.w	r1, #32
 80064c2:	f381 8811 	msr	BASEPRI, r1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	4816      	ldr	r0, [pc, #88]	; (8006524 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80064ca:	f7ff fdfa 	bl	80060c2 <_PreparePacket>
 80064ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	e00b      	b.n	80064f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	1c59      	adds	r1, r3, #1
 80064e6:	61f9      	str	r1, [r7, #28]
 80064e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	09db      	lsrs	r3, r3, #7
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b7f      	cmp	r3, #127	; 0x7f
 80064fa:	d8f0      	bhi.n	80064de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	61fa      	str	r2, [r7, #28]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	6938      	ldr	r0, [r7, #16]
 8006512:	f7ff fec7 	bl	80062a4 <_SendPacket>
  RECORD_END();
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f383 8811 	msr	BASEPRI, r3
}
 800651c:	bf00      	nop
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20019968 	.word	0x20019968

08006528 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b08c      	sub	sp, #48	; 0x30
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006534:	f3ef 8311 	mrs	r3, BASEPRI
 8006538:	f04f 0120 	mov.w	r1, #32
 800653c:	f381 8811 	msr	BASEPRI, r1
 8006540:	61fb      	str	r3, [r7, #28]
 8006542:	4825      	ldr	r0, [pc, #148]	; (80065d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006544:	f7ff fdbd 	bl	80060c2 <_PreparePacket>
 8006548:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
 8006556:	e00b      	b.n	8006570 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	b2da      	uxtb	r2, r3
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	1c59      	adds	r1, r3, #1
 8006560:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006562:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	09db      	lsrs	r3, r3, #7
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	2b7f      	cmp	r3, #127	; 0x7f
 8006574:	d8f0      	bhi.n	8006558 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800657c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	623b      	str	r3, [r7, #32]
 800658e:	e00b      	b.n	80065a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	6279      	str	r1, [r7, #36]	; 0x24
 800659a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	09db      	lsrs	r3, r3, #7
 80065a6:	623b      	str	r3, [r7, #32]
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	2b7f      	cmp	r3, #127	; 0x7f
 80065ac:	d8f0      	bhi.n	8006590 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	627a      	str	r2, [r7, #36]	; 0x24
 80065b4:	6a3a      	ldr	r2, [r7, #32]
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	6979      	ldr	r1, [r7, #20]
 80065c2:	69b8      	ldr	r0, [r7, #24]
 80065c4:	f7ff fe6e 	bl	80062a4 <_SendPacket>
  RECORD_END();
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f383 8811 	msr	BASEPRI, r3
}
 80065ce:	bf00      	nop
 80065d0:	3730      	adds	r7, #48	; 0x30
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20019968 	.word	0x20019968

080065dc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08e      	sub	sp, #56	; 0x38
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80065ea:	f3ef 8311 	mrs	r3, BASEPRI
 80065ee:	f04f 0120 	mov.w	r1, #32
 80065f2:	f381 8811 	msr	BASEPRI, r1
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	4832      	ldr	r0, [pc, #200]	; (80066c4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80065fa:	f7ff fd62 	bl	80060c2 <_PreparePacket>
 80065fe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	633b      	str	r3, [r7, #48]	; 0x30
 800660c:	e00b      	b.n	8006626 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	b2da      	uxtb	r2, r3
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	1c59      	adds	r1, r3, #1
 8006616:	6379      	str	r1, [r7, #52]	; 0x34
 8006618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	09db      	lsrs	r3, r3, #7
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	2b7f      	cmp	r3, #127	; 0x7f
 800662a:	d8f0      	bhi.n	800660e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	637a      	str	r2, [r7, #52]	; 0x34
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
 8006644:	e00b      	b.n	800665e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	b2da      	uxtb	r2, r3
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	1c59      	adds	r1, r3, #1
 800664e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006650:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	09db      	lsrs	r3, r3, #7
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	2b7f      	cmp	r3, #127	; 0x7f
 8006662:	d8f0      	bhi.n	8006646 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	62fa      	str	r2, [r7, #44]	; 0x2c
 800666a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	623b      	str	r3, [r7, #32]
 800667c:	e00b      	b.n	8006696 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	1c59      	adds	r1, r3, #1
 8006686:	6279      	str	r1, [r7, #36]	; 0x24
 8006688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	09db      	lsrs	r3, r3, #7
 8006694:	623b      	str	r3, [r7, #32]
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	2b7f      	cmp	r3, #127	; 0x7f
 800669a:	d8f0      	bhi.n	800667e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	627a      	str	r2, [r7, #36]	; 0x24
 80066a2:	6a3a      	ldr	r2, [r7, #32]
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	6979      	ldr	r1, [r7, #20]
 80066b0:	69b8      	ldr	r0, [r7, #24]
 80066b2:	f7ff fdf7 	bl	80062a4 <_SendPacket>
  RECORD_END();
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f383 8811 	msr	BASEPRI, r3
}
 80066bc:	bf00      	nop
 80066be:	3738      	adds	r7, #56	; 0x38
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20019968 	.word	0x20019968

080066c8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b090      	sub	sp, #64	; 0x40
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066d6:	f3ef 8311 	mrs	r3, BASEPRI
 80066da:	f04f 0120 	mov.w	r1, #32
 80066de:	f381 8811 	msr	BASEPRI, r1
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	4840      	ldr	r0, [pc, #256]	; (80067e8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80066e6:	f7ff fcec 	bl	80060c2 <_PreparePacket>
 80066ea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80066f8:	e00b      	b.n	8006712 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006700:	1c59      	adds	r1, r3, #1
 8006702:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006704:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	09db      	lsrs	r3, r3, #7
 8006710:	63bb      	str	r3, [r7, #56]	; 0x38
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	2b7f      	cmp	r3, #127	; 0x7f
 8006716:	d8f0      	bhi.n	80066fa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800671e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006726:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	633b      	str	r3, [r7, #48]	; 0x30
 8006730:	e00b      	b.n	800674a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	b2da      	uxtb	r2, r3
 8006736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006738:	1c59      	adds	r1, r3, #1
 800673a:	6379      	str	r1, [r7, #52]	; 0x34
 800673c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	09db      	lsrs	r3, r3, #7
 8006748:	633b      	str	r3, [r7, #48]	; 0x30
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	2b7f      	cmp	r3, #127	; 0x7f
 800674e:	d8f0      	bhi.n	8006732 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	637a      	str	r2, [r7, #52]	; 0x34
 8006756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]
 800675c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
 8006768:	e00b      	b.n	8006782 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	b2da      	uxtb	r2, r3
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	1c59      	adds	r1, r3, #1
 8006772:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006774:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	09db      	lsrs	r3, r3, #7
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	2b7f      	cmp	r3, #127	; 0x7f
 8006786:	d8f0      	bhi.n	800676a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800678e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
 800679c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800679e:	623b      	str	r3, [r7, #32]
 80067a0:	e00b      	b.n	80067ba <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	1c59      	adds	r1, r3, #1
 80067aa:	6279      	str	r1, [r7, #36]	; 0x24
 80067ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	09db      	lsrs	r3, r3, #7
 80067b8:	623b      	str	r3, [r7, #32]
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	2b7f      	cmp	r3, #127	; 0x7f
 80067be:	d8f0      	bhi.n	80067a2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	627a      	str	r2, [r7, #36]	; 0x24
 80067c6:	6a3a      	ldr	r2, [r7, #32]
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	6979      	ldr	r1, [r7, #20]
 80067d4:	69b8      	ldr	r0, [r7, #24]
 80067d6:	f7ff fd65 	bl	80062a4 <_SendPacket>
  RECORD_END();
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	f383 8811 	msr	BASEPRI, r3
}
 80067e0:	bf00      	nop
 80067e2:	3740      	adds	r7, #64	; 0x40
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20019968 	.word	0x20019968

080067ec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08c      	sub	sp, #48	; 0x30
 80067f0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80067f2:	4b59      	ldr	r3, [pc, #356]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80067f8:	f3ef 8311 	mrs	r3, BASEPRI
 80067fc:	f04f 0120 	mov.w	r1, #32
 8006800:	f381 8811 	msr	BASEPRI, r1
 8006804:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006806:	4b54      	ldr	r3, [pc, #336]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	220a      	movs	r2, #10
 800680c:	4953      	ldr	r1, [pc, #332]	; (800695c <SEGGER_SYSVIEW_Start+0x170>)
 800680e:	4618      	mov	r0, r3
 8006810:	f7f9 fcde 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800681a:	f7ff f9d9 	bl	8005bd0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800681e:	200a      	movs	r0, #10
 8006820:	f7ff fe28 	bl	8006474 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006824:	f3ef 8311 	mrs	r3, BASEPRI
 8006828:	f04f 0120 	mov.w	r1, #32
 800682c:	f381 8811 	msr	BASEPRI, r1
 8006830:	60bb      	str	r3, [r7, #8]
 8006832:	484b      	ldr	r0, [pc, #300]	; (8006960 <SEGGER_SYSVIEW_Start+0x174>)
 8006834:	f7ff fc45 	bl	80060c2 <_PreparePacket>
 8006838:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006842:	4b45      	ldr	r3, [pc, #276]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
 8006848:	e00b      	b.n	8006862 <SEGGER_SYSVIEW_Start+0x76>
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	b2da      	uxtb	r2, r3
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	1c59      	adds	r1, r3, #1
 8006852:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	09db      	lsrs	r3, r3, #7
 8006860:	62bb      	str	r3, [r7, #40]	; 0x28
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	2b7f      	cmp	r3, #127	; 0x7f
 8006866:	d8f0      	bhi.n	800684a <SEGGER_SYSVIEW_Start+0x5e>
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800686e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
 800687c:	4b36      	ldr	r3, [pc, #216]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	e00b      	b.n	800689c <SEGGER_SYSVIEW_Start+0xb0>
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	1c59      	adds	r1, r3, #1
 800688c:	6279      	str	r1, [r7, #36]	; 0x24
 800688e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	09db      	lsrs	r3, r3, #7
 800689a:	623b      	str	r3, [r7, #32]
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	2b7f      	cmp	r3, #127	; 0x7f
 80068a0:	d8f0      	bhi.n	8006884 <SEGGER_SYSVIEW_Start+0x98>
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	627a      	str	r2, [r7, #36]	; 0x24
 80068a8:	6a3a      	ldr	r2, [r7, #32]
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	4b28      	ldr	r3, [pc, #160]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	61bb      	str	r3, [r7, #24]
 80068bc:	e00b      	b.n	80068d6 <SEGGER_SYSVIEW_Start+0xea>
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	1c59      	adds	r1, r3, #1
 80068c6:	61f9      	str	r1, [r7, #28]
 80068c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	09db      	lsrs	r3, r3, #7
 80068d4:	61bb      	str	r3, [r7, #24]
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b7f      	cmp	r3, #127	; 0x7f
 80068da:	d8f0      	bhi.n	80068be <SEGGER_SYSVIEW_Start+0xd2>
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	61fa      	str	r2, [r7, #28]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	e00b      	b.n	800690e <SEGGER_SYSVIEW_Start+0x122>
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	1c59      	adds	r1, r3, #1
 80068fe:	6179      	str	r1, [r7, #20]
 8006900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	09db      	lsrs	r3, r3, #7
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b7f      	cmp	r3, #127	; 0x7f
 8006912:	d8f0      	bhi.n	80068f6 <SEGGER_SYSVIEW_Start+0x10a>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	617a      	str	r2, [r7, #20]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006924:	2218      	movs	r2, #24
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff fcbb 	bl	80062a4 <_SendPacket>
      RECORD_END();
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006934:	4b08      	ldr	r3, [pc, #32]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800693c:	4b06      	ldr	r3, [pc, #24]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006942:	f000 f9c7 	bl	8006cd4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006946:	f000 f9b1 	bl	8006cac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800694a:	f000 fc5f 	bl	800720c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800694e:	bf00      	nop
 8006950:	3730      	adds	r7, #48	; 0x30
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20019938 	.word	0x20019938
 800695c:	08008854 	.word	0x08008854
 8006960:	20019968 	.word	0x20019968

08006964 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800696a:	f3ef 8311 	mrs	r3, BASEPRI
 800696e:	f04f 0120 	mov.w	r1, #32
 8006972:	f381 8811 	msr	BASEPRI, r1
 8006976:	607b      	str	r3, [r7, #4]
 8006978:	480b      	ldr	r0, [pc, #44]	; (80069a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800697a:	f7ff fba2 	bl	80060c2 <_PreparePacket>
 800697e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <SEGGER_SYSVIEW_Stop+0x48>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006988:	220b      	movs	r2, #11
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6838      	ldr	r0, [r7, #0]
 800698e:	f7ff fc89 	bl	80062a4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006992:	4b06      	ldr	r3, [pc, #24]	; (80069ac <SEGGER_SYSVIEW_Stop+0x48>)
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f383 8811 	msr	BASEPRI, r3
}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20019968 	.word	0x20019968
 80069ac:	20019938 	.word	0x20019938

080069b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08c      	sub	sp, #48	; 0x30
 80069b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069b6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ba:	f04f 0120 	mov.w	r1, #32
 80069be:	f381 8811 	msr	BASEPRI, r1
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	4845      	ldr	r0, [pc, #276]	; (8006adc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80069c6:	f7ff fb7c 	bl	80060c2 <_PreparePacket>
 80069ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069d4:	4b42      	ldr	r3, [pc, #264]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069da:	e00b      	b.n	80069f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	09db      	lsrs	r3, r3, #7
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	2b7f      	cmp	r3, #127	; 0x7f
 80069f8:	d8f0      	bhi.n	80069dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0e:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	e00b      	b.n	8006a2e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	1c59      	adds	r1, r3, #1
 8006a1e:	6279      	str	r1, [r7, #36]	; 0x24
 8006a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	09db      	lsrs	r3, r3, #7
 8006a2c:	623b      	str	r3, [r7, #32]
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	2b7f      	cmp	r3, #127	; 0x7f
 8006a32:	d8f0      	bhi.n	8006a16 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	627a      	str	r2, [r7, #36]	; 0x24
 8006a3a:	6a3a      	ldr	r2, [r7, #32]
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	e00b      	b.n	8006a68 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	61f9      	str	r1, [r7, #28]
 8006a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	09db      	lsrs	r3, r3, #7
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a6c:	d8f0      	bhi.n	8006a50 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	61fa      	str	r2, [r7, #28]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	2300      	movs	r3, #0
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	e00b      	b.n	8006aa0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	1c59      	adds	r1, r3, #1
 8006a90:	6179      	str	r1, [r7, #20]
 8006a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	09db      	lsrs	r3, r3, #7
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa4:	d8f0      	bhi.n	8006a88 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	617a      	str	r2, [r7, #20]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ab6:	2218      	movs	r2, #24
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	68b8      	ldr	r0, [r7, #8]
 8006abc:	f7ff fbf2 	bl	80062a4 <_SendPacket>
  RECORD_END();
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006ac6:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006ace:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	4798      	blx	r3
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3730      	adds	r7, #48	; 0x30
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20019968 	.word	0x20019968
 8006ae0:	20019938 	.word	0x20019938

08006ae4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b092      	sub	sp, #72	; 0x48
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006aec:	f3ef 8311 	mrs	r3, BASEPRI
 8006af0:	f04f 0120 	mov.w	r1, #32
 8006af4:	f381 8811 	msr	BASEPRI, r1
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	486a      	ldr	r0, [pc, #424]	; (8006ca4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006afc:	f7ff fae1 	bl	80060c2 <_PreparePacket>
 8006b00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	647b      	str	r3, [r7, #68]	; 0x44
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4b66      	ldr	r3, [pc, #408]	; (8006ca8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	643b      	str	r3, [r7, #64]	; 0x40
 8006b16:	e00b      	b.n	8006b30 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b1e:	1c59      	adds	r1, r3, #1
 8006b20:	6479      	str	r1, [r7, #68]	; 0x44
 8006b22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2c:	09db      	lsrs	r3, r3, #7
 8006b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8006b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b32:	2b7f      	cmp	r3, #127	; 0x7f
 8006b34:	d8f0      	bhi.n	8006b18 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]
 8006b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b50:	e00b      	b.n	8006b6a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b58:	1c59      	adds	r1, r3, #1
 8006b5a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	09db      	lsrs	r3, r3, #7
 8006b68:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b6e:	d8f0      	bhi.n	8006b52 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	4619      	mov	r1, r3
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f7ff fa4d 	bl	8006028 <_EncodeStr>
 8006b8e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006b90:	2209      	movs	r2, #9
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	6938      	ldr	r0, [r7, #16]
 8006b96:	f7ff fb85 	bl	80062a4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b40      	ldr	r3, [pc, #256]	; (8006ca8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	633b      	str	r3, [r7, #48]	; 0x30
 8006bae:	e00b      	b.n	8006bc8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	1c59      	adds	r1, r3, #1
 8006bb8:	6379      	str	r1, [r7, #52]	; 0x34
 8006bba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	09db      	lsrs	r3, r3, #7
 8006bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	2b7f      	cmp	r3, #127	; 0x7f
 8006bcc:	d8f0      	bhi.n	8006bb0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	637a      	str	r2, [r7, #52]	; 0x34
 8006bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be8:	e00b      	b.n	8006c02 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	1c59      	adds	r1, r3, #1
 8006bf2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	09db      	lsrs	r3, r3, #7
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	2b7f      	cmp	r3, #127	; 0x7f
 8006c06:	d8f0      	bhi.n	8006bea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	623b      	str	r3, [r7, #32]
 8006c22:	e00b      	b.n	8006c3c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	6279      	str	r1, [r7, #36]	; 0x24
 8006c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	09db      	lsrs	r3, r3, #7
 8006c3a:	623b      	str	r3, [r7, #32]
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c40:	d8f0      	bhi.n	8006c24 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	627a      	str	r2, [r7, #36]	; 0x24
 8006c48:	6a3a      	ldr	r2, [r7, #32]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	2300      	movs	r3, #0
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	e00b      	b.n	8006c74 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	1c59      	adds	r1, r3, #1
 8006c64:	61f9      	str	r1, [r7, #28]
 8006c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	09db      	lsrs	r3, r3, #7
 8006c72:	61bb      	str	r3, [r7, #24]
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2b7f      	cmp	r3, #127	; 0x7f
 8006c78:	d8f0      	bhi.n	8006c5c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	61fa      	str	r2, [r7, #28]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006c8a:	2215      	movs	r2, #21
 8006c8c:	68f9      	ldr	r1, [r7, #12]
 8006c8e:	6938      	ldr	r0, [r7, #16]
 8006c90:	f7ff fb08 	bl	80062a4 <_SendPacket>
  RECORD_END();
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f383 8811 	msr	BASEPRI, r3
}
 8006c9a:	bf00      	nop
 8006c9c:	3748      	adds	r7, #72	; 0x48
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20019968 	.word	0x20019968
 8006ca8:	20019938 	.word	0x20019938

08006cac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006cb0:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006cc2:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4798      	blx	r3
  }
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20019938 	.word	0x20019938

08006cd4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006cd4:	b590      	push	{r4, r7, lr}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006cda:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d01a      	beq.n	8006d18 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006ce2:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d015      	beq.n	8006d18 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006cec:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4798      	blx	r3
 8006cf4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006cf8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006cfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	000a      	movs	r2, r1
 8006d08:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4621      	mov	r1, r4
 8006d10:	200d      	movs	r0, #13
 8006d12:	f7ff fc09 	bl	8006528 <SEGGER_SYSVIEW_RecordU32x2>
 8006d16:	e006      	b.n	8006d26 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006d18:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	200c      	movs	r0, #12
 8006d20:	f7ff fbc6 	bl	80064b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd90      	pop	{r4, r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20019938 	.word	0x20019938
 8006d34:	e0001004 	.word	0xe0001004

08006d38 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d42:	f04f 0120 	mov.w	r1, #32
 8006d46:	f381 8811 	msr	BASEPRI, r1
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	4819      	ldr	r0, [pc, #100]	; (8006db4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006d4e:	f7ff f9b8 	bl	80060c2 <_PreparePacket>
 8006d52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006d58:	4b17      	ldr	r3, [pc, #92]	; (8006db8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d60:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	e00b      	b.n	8006d84 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	1c59      	adds	r1, r3, #1
 8006d74:	6179      	str	r1, [r7, #20]
 8006d76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	09db      	lsrs	r3, r3, #7
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b7f      	cmp	r3, #127	; 0x7f
 8006d88:	d8f0      	bhi.n	8006d6c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	617a      	str	r2, [r7, #20]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	68b8      	ldr	r0, [r7, #8]
 8006da0:	f7ff fa80 	bl	80062a4 <_SendPacket>
  RECORD_END();
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f383 8811 	msr	BASEPRI, r3
}
 8006daa:	bf00      	nop
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20019968 	.word	0x20019968
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc6:	f04f 0120 	mov.w	r1, #32
 8006dca:	f381 8811 	msr	BASEPRI, r1
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	4807      	ldr	r0, [pc, #28]	; (8006df0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006dd2:	f7ff f976 	bl	80060c2 <_PreparePacket>
 8006dd6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006dd8:	2203      	movs	r2, #3
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6838      	ldr	r0, [r7, #0]
 8006dde:	f7ff fa61 	bl	80062a4 <_SendPacket>
  RECORD_END();
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f383 8811 	msr	BASEPRI, r3
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20019968 	.word	0x20019968

08006df4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006dfa:	f3ef 8311 	mrs	r3, BASEPRI
 8006dfe:	f04f 0120 	mov.w	r1, #32
 8006e02:	f381 8811 	msr	BASEPRI, r1
 8006e06:	607b      	str	r3, [r7, #4]
 8006e08:	4807      	ldr	r0, [pc, #28]	; (8006e28 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006e0a:	f7ff f95a 	bl	80060c2 <_PreparePacket>
 8006e0e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006e10:	2212      	movs	r2, #18
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6838      	ldr	r0, [r7, #0]
 8006e16:	f7ff fa45 	bl	80062a4 <_SendPacket>
  RECORD_END();
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f383 8811 	msr	BASEPRI, r3
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20019968 	.word	0x20019968

08006e2c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e32:	f3ef 8311 	mrs	r3, BASEPRI
 8006e36:	f04f 0120 	mov.w	r1, #32
 8006e3a:	f381 8811 	msr	BASEPRI, r1
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	4807      	ldr	r0, [pc, #28]	; (8006e60 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006e42:	f7ff f93e 	bl	80060c2 <_PreparePacket>
 8006e46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006e48:	2211      	movs	r2, #17
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6838      	ldr	r0, [r7, #0]
 8006e4e:	f7ff fa29 	bl	80062a4 <_SendPacket>
  RECORD_END();
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f383 8811 	msr	BASEPRI, r3
}
 8006e58:	bf00      	nop
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20019968 	.word	0x20019968

08006e64 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e70:	f04f 0120 	mov.w	r1, #32
 8006e74:	f381 8811 	msr	BASEPRI, r1
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	4819      	ldr	r0, [pc, #100]	; (8006ee0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006e7c:	f7ff f921 	bl	80060c2 <_PreparePacket>
 8006e80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e86:	4b17      	ldr	r3, [pc, #92]	; (8006ee4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	61bb      	str	r3, [r7, #24]
 8006e98:	e00b      	b.n	8006eb2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	1c59      	adds	r1, r3, #1
 8006ea2:	61f9      	str	r1, [r7, #28]
 8006ea4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	09db      	lsrs	r3, r3, #7
 8006eb0:	61bb      	str	r3, [r7, #24]
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006eb6:	d8f0      	bhi.n	8006e9a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	61fa      	str	r2, [r7, #28]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006ec8:	2208      	movs	r2, #8
 8006eca:	68f9      	ldr	r1, [r7, #12]
 8006ecc:	6938      	ldr	r0, [r7, #16]
 8006ece:	f7ff f9e9 	bl	80062a4 <_SendPacket>
  RECORD_END();
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f383 8811 	msr	BASEPRI, r3
}
 8006ed8:	bf00      	nop
 8006eda:	3720      	adds	r7, #32
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20019968 	.word	0x20019968
 8006ee4:	20019938 	.word	0x20019938

08006ee8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ef0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ef4:	f04f 0120 	mov.w	r1, #32
 8006ef8:	f381 8811 	msr	BASEPRI, r1
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	4819      	ldr	r0, [pc, #100]	; (8006f64 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f00:	f7ff f8df 	bl	80060c2 <_PreparePacket>
 8006f04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f0a:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	61fb      	str	r3, [r7, #28]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	e00b      	b.n	8006f36 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	1c59      	adds	r1, r3, #1
 8006f26:	61f9      	str	r1, [r7, #28]
 8006f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	09db      	lsrs	r3, r3, #7
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b7f      	cmp	r3, #127	; 0x7f
 8006f3a:	d8f0      	bhi.n	8006f1e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	61fa      	str	r2, [r7, #28]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006f4c:	2204      	movs	r2, #4
 8006f4e:	68f9      	ldr	r1, [r7, #12]
 8006f50:	6938      	ldr	r0, [r7, #16]
 8006f52:	f7ff f9a7 	bl	80062a4 <_SendPacket>
  RECORD_END();
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f383 8811 	msr	BASEPRI, r3
}
 8006f5c:	bf00      	nop
 8006f5e:	3720      	adds	r7, #32
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20019968 	.word	0x20019968
 8006f68:	20019938 	.word	0x20019938

08006f6c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b088      	sub	sp, #32
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f74:	f3ef 8311 	mrs	r3, BASEPRI
 8006f78:	f04f 0120 	mov.w	r1, #32
 8006f7c:	f381 8811 	msr	BASEPRI, r1
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	4819      	ldr	r0, [pc, #100]	; (8006fe8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006f84:	f7ff f89d 	bl	80060c2 <_PreparePacket>
 8006f88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f8e:	4b17      	ldr	r3, [pc, #92]	; (8006fec <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	61bb      	str	r3, [r7, #24]
 8006fa0:	e00b      	b.n	8006fba <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	1c59      	adds	r1, r3, #1
 8006faa:	61f9      	str	r1, [r7, #28]
 8006fac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	09db      	lsrs	r3, r3, #7
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8006fbe:	d8f0      	bhi.n	8006fa2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	61fa      	str	r2, [r7, #28]
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006fd0:	2206      	movs	r2, #6
 8006fd2:	68f9      	ldr	r1, [r7, #12]
 8006fd4:	6938      	ldr	r0, [r7, #16]
 8006fd6:	f7ff f965 	bl	80062a4 <_SendPacket>
  RECORD_END();
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f383 8811 	msr	BASEPRI, r3
}
 8006fe0:	bf00      	nop
 8006fe2:	3720      	adds	r7, #32
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20019968 	.word	0x20019968
 8006fec:	20019938 	.word	0x20019938

08006ff0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08a      	sub	sp, #40	; 0x28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8006ffe:	f04f 0120 	mov.w	r1, #32
 8007002:	f381 8811 	msr	BASEPRI, r1
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	4827      	ldr	r0, [pc, #156]	; (80070a8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800700a:	f7ff f85a 	bl	80060c2 <_PreparePacket>
 800700e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007014:	4b25      	ldr	r3, [pc, #148]	; (80070ac <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	623b      	str	r3, [r7, #32]
 8007026:	e00b      	b.n	8007040 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	b2da      	uxtb	r2, r3
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	1c59      	adds	r1, r3, #1
 8007030:	6279      	str	r1, [r7, #36]	; 0x24
 8007032:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	09db      	lsrs	r3, r3, #7
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	2b7f      	cmp	r3, #127	; 0x7f
 8007044:	d8f0      	bhi.n	8007028 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	627a      	str	r2, [r7, #36]	; 0x24
 800704c:	6a3a      	ldr	r2, [r7, #32]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	61fb      	str	r3, [r7, #28]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e00b      	b.n	8007078 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	1c59      	adds	r1, r3, #1
 8007068:	61f9      	str	r1, [r7, #28]
 800706a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	09db      	lsrs	r3, r3, #7
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b7f      	cmp	r3, #127	; 0x7f
 800707c:	d8f0      	bhi.n	8007060 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	61fa      	str	r2, [r7, #28]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800708e:	2207      	movs	r2, #7
 8007090:	68f9      	ldr	r1, [r7, #12]
 8007092:	6938      	ldr	r0, [r7, #16]
 8007094:	f7ff f906 	bl	80062a4 <_SendPacket>
  RECORD_END();
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f383 8811 	msr	BASEPRI, r3
}
 800709e:	bf00      	nop
 80070a0:	3728      	adds	r7, #40	; 0x28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20019968 	.word	0x20019968
 80070ac:	20019938 	.word	0x20019938

080070b0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80070b8:	4b04      	ldr	r3, [pc, #16]	; (80070cc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	1ad3      	subs	r3, r2, r3
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	20019938 	.word	0x20019938

080070d0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08c      	sub	sp, #48	; 0x30
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80070da:	4b3b      	ldr	r3, [pc, #236]	; (80071c8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d06d      	beq.n	80071be <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80070e2:	4b39      	ldr	r3, [pc, #228]	; (80071c8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80070e8:	2300      	movs	r3, #0
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ec:	e008      	b.n	8007100 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d007      	beq.n	800710a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	3301      	adds	r3, #1
 80070fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007104:	429a      	cmp	r2, r3
 8007106:	d3f2      	bcc.n	80070ee <SEGGER_SYSVIEW_SendModule+0x1e>
 8007108:	e000      	b.n	800710c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800710a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d055      	beq.n	80071be <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007112:	f3ef 8311 	mrs	r3, BASEPRI
 8007116:	f04f 0120 	mov.w	r1, #32
 800711a:	f381 8811 	msr	BASEPRI, r1
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	482a      	ldr	r0, [pc, #168]	; (80071cc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007122:	f7fe ffce 	bl	80060c2 <_PreparePacket>
 8007126:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	627b      	str	r3, [r7, #36]	; 0x24
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	623b      	str	r3, [r7, #32]
 8007134:	e00b      	b.n	800714e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	b2da      	uxtb	r2, r3
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	1c59      	adds	r1, r3, #1
 800713e:	6279      	str	r1, [r7, #36]	; 0x24
 8007140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	701a      	strb	r2, [r3, #0]
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	09db      	lsrs	r3, r3, #7
 800714c:	623b      	str	r3, [r7, #32]
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	2b7f      	cmp	r3, #127	; 0x7f
 8007152:	d8f0      	bhi.n	8007136 <SEGGER_SYSVIEW_SendModule+0x66>
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	627a      	str	r2, [r7, #36]	; 0x24
 800715a:	6a3a      	ldr	r2, [r7, #32]
 800715c:	b2d2      	uxtb	r2, r2
 800715e:	701a      	strb	r2, [r3, #0]
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	61fb      	str	r3, [r7, #28]
 8007168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	61bb      	str	r3, [r7, #24]
 800716e:	e00b      	b.n	8007188 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	b2da      	uxtb	r2, r3
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	1c59      	adds	r1, r3, #1
 8007178:	61f9      	str	r1, [r7, #28]
 800717a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	09db      	lsrs	r3, r3, #7
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b7f      	cmp	r3, #127	; 0x7f
 800718c:	d8f0      	bhi.n	8007170 <SEGGER_SYSVIEW_SendModule+0xa0>
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	61fa      	str	r2, [r7, #28]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2280      	movs	r2, #128	; 0x80
 80071a4:	4619      	mov	r1, r3
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f7fe ff3e 	bl	8006028 <_EncodeStr>
 80071ac:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80071ae:	2216      	movs	r2, #22
 80071b0:	68f9      	ldr	r1, [r7, #12]
 80071b2:	6938      	ldr	r0, [r7, #16]
 80071b4:	f7ff f876 	bl	80062a4 <_SendPacket>
      RECORD_END();
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80071be:	bf00      	nop
 80071c0:	3730      	adds	r7, #48	; 0x30
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20019960 	.word	0x20019960
 80071cc:	20019968 	.word	0x20019968

080071d0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00f      	beq.n	80071fe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80071de:	4b0a      	ldr	r3, [pc, #40]	; (8007208 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1f2      	bne.n	80071e4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20019960 	.word	0x20019960

0800720c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007212:	f3ef 8311 	mrs	r3, BASEPRI
 8007216:	f04f 0120 	mov.w	r1, #32
 800721a:	f381 8811 	msr	BASEPRI, r1
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	4817      	ldr	r0, [pc, #92]	; (8007280 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007222:	f7fe ff4e 	bl	80060c2 <_PreparePacket>
 8007226:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	4b14      	ldr	r3, [pc, #80]	; (8007284 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	e00b      	b.n	8007250 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	b2da      	uxtb	r2, r3
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	1c59      	adds	r1, r3, #1
 8007240:	6179      	str	r1, [r7, #20]
 8007242:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	09db      	lsrs	r3, r3, #7
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	2b7f      	cmp	r3, #127	; 0x7f
 8007254:	d8f0      	bhi.n	8007238 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	617a      	str	r2, [r7, #20]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007266:	221b      	movs	r2, #27
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	68b8      	ldr	r0, [r7, #8]
 800726c:	f7ff f81a 	bl	80062a4 <_SendPacket>
  RECORD_END();
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f383 8811 	msr	BASEPRI, r3
}
 8007276:	bf00      	nop
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20019968 	.word	0x20019968
 8007284:	20019964 	.word	0x20019964

08007288 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007288:	b580      	push	{r7, lr}
 800728a:	b08a      	sub	sp, #40	; 0x28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007290:	f3ef 8311 	mrs	r3, BASEPRI
 8007294:	f04f 0120 	mov.w	r1, #32
 8007298:	f381 8811 	msr	BASEPRI, r1
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	4827      	ldr	r0, [pc, #156]	; (800733c <SEGGER_SYSVIEW_Warn+0xb4>)
 80072a0:	f7fe ff0f 	bl	80060c2 <_PreparePacket>
 80072a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072a6:	2280      	movs	r2, #128	; 0x80
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	6938      	ldr	r0, [r7, #16]
 80072ac:	f7fe febc 	bl	8006028 <_EncodeStr>
 80072b0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
 80072b6:	2301      	movs	r3, #1
 80072b8:	623b      	str	r3, [r7, #32]
 80072ba:	e00b      	b.n	80072d4 <SEGGER_SYSVIEW_Warn+0x4c>
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	1c59      	adds	r1, r3, #1
 80072c4:	6279      	str	r1, [r7, #36]	; 0x24
 80072c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	701a      	strb	r2, [r3, #0]
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	09db      	lsrs	r3, r3, #7
 80072d2:	623b      	str	r3, [r7, #32]
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	2b7f      	cmp	r3, #127	; 0x7f
 80072d8:	d8f0      	bhi.n	80072bc <SEGGER_SYSVIEW_Warn+0x34>
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	627a      	str	r2, [r7, #36]	; 0x24
 80072e0:	6a3a      	ldr	r2, [r7, #32]
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	61fb      	str	r3, [r7, #28]
 80072ee:	2300      	movs	r3, #0
 80072f0:	61bb      	str	r3, [r7, #24]
 80072f2:	e00b      	b.n	800730c <SEGGER_SYSVIEW_Warn+0x84>
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	1c59      	adds	r1, r3, #1
 80072fc:	61f9      	str	r1, [r7, #28]
 80072fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007302:	b2d2      	uxtb	r2, r2
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	09db      	lsrs	r3, r3, #7
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2b7f      	cmp	r3, #127	; 0x7f
 8007310:	d8f0      	bhi.n	80072f4 <SEGGER_SYSVIEW_Warn+0x6c>
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	61fa      	str	r2, [r7, #28]
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007322:	221a      	movs	r2, #26
 8007324:	68f9      	ldr	r1, [r7, #12]
 8007326:	6938      	ldr	r0, [r7, #16]
 8007328:	f7fe ffbc 	bl	80062a4 <_SendPacket>
  RECORD_END();
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f383 8811 	msr	BASEPRI, r3
}
 8007332:	bf00      	nop
 8007334:	3728      	adds	r7, #40	; 0x28
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20019968 	.word	0x20019968

08007340 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	2000      	movs	r0, #0
 8007354:	f7fe fe42 	bl	8005fdc <SEGGER_RTT_Write>
  return len;
 8007358:	683b      	ldr	r3, [r7, #0]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <rand>:
 8007364:	4b16      	ldr	r3, [pc, #88]	; (80073c0 <rand+0x5c>)
 8007366:	b510      	push	{r4, lr}
 8007368:	681c      	ldr	r4, [r3, #0]
 800736a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800736c:	b9b3      	cbnz	r3, 800739c <rand+0x38>
 800736e:	2018      	movs	r0, #24
 8007370:	f000 fa4e 	bl	8007810 <malloc>
 8007374:	4602      	mov	r2, r0
 8007376:	6320      	str	r0, [r4, #48]	; 0x30
 8007378:	b920      	cbnz	r0, 8007384 <rand+0x20>
 800737a:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <rand+0x60>)
 800737c:	4812      	ldr	r0, [pc, #72]	; (80073c8 <rand+0x64>)
 800737e:	2152      	movs	r1, #82	; 0x52
 8007380:	f000 f9dc 	bl	800773c <__assert_func>
 8007384:	4911      	ldr	r1, [pc, #68]	; (80073cc <rand+0x68>)
 8007386:	4b12      	ldr	r3, [pc, #72]	; (80073d0 <rand+0x6c>)
 8007388:	e9c0 1300 	strd	r1, r3, [r0]
 800738c:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <rand+0x70>)
 800738e:	6083      	str	r3, [r0, #8]
 8007390:	230b      	movs	r3, #11
 8007392:	8183      	strh	r3, [r0, #12]
 8007394:	2100      	movs	r1, #0
 8007396:	2001      	movs	r0, #1
 8007398:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800739c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800739e:	480e      	ldr	r0, [pc, #56]	; (80073d8 <rand+0x74>)
 80073a0:	690b      	ldr	r3, [r1, #16]
 80073a2:	694c      	ldr	r4, [r1, #20]
 80073a4:	4a0d      	ldr	r2, [pc, #52]	; (80073dc <rand+0x78>)
 80073a6:	4358      	muls	r0, r3
 80073a8:	fb02 0004 	mla	r0, r2, r4, r0
 80073ac:	fba3 3202 	umull	r3, r2, r3, r2
 80073b0:	3301      	adds	r3, #1
 80073b2:	eb40 0002 	adc.w	r0, r0, r2
 80073b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80073ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80073be:	bd10      	pop	{r4, pc}
 80073c0:	2000006c 	.word	0x2000006c
 80073c4:	0800885e 	.word	0x0800885e
 80073c8:	08008875 	.word	0x08008875
 80073cc:	abcd330e 	.word	0xabcd330e
 80073d0:	e66d1234 	.word	0xe66d1234
 80073d4:	0005deec 	.word	0x0005deec
 80073d8:	5851f42d 	.word	0x5851f42d
 80073dc:	4c957f2d 	.word	0x4c957f2d

080073e0 <std>:
 80073e0:	2300      	movs	r3, #0
 80073e2:	b510      	push	{r4, lr}
 80073e4:	4604      	mov	r4, r0
 80073e6:	e9c0 3300 	strd	r3, r3, [r0]
 80073ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073ee:	6083      	str	r3, [r0, #8]
 80073f0:	8181      	strh	r1, [r0, #12]
 80073f2:	6643      	str	r3, [r0, #100]	; 0x64
 80073f4:	81c2      	strh	r2, [r0, #14]
 80073f6:	6183      	str	r3, [r0, #24]
 80073f8:	4619      	mov	r1, r3
 80073fa:	2208      	movs	r2, #8
 80073fc:	305c      	adds	r0, #92	; 0x5c
 80073fe:	f000 f924 	bl	800764a <memset>
 8007402:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <std+0x58>)
 8007404:	6263      	str	r3, [r4, #36]	; 0x24
 8007406:	4b0d      	ldr	r3, [pc, #52]	; (800743c <std+0x5c>)
 8007408:	62a3      	str	r3, [r4, #40]	; 0x28
 800740a:	4b0d      	ldr	r3, [pc, #52]	; (8007440 <std+0x60>)
 800740c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800740e:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <std+0x64>)
 8007410:	6323      	str	r3, [r4, #48]	; 0x30
 8007412:	4b0d      	ldr	r3, [pc, #52]	; (8007448 <std+0x68>)
 8007414:	6224      	str	r4, [r4, #32]
 8007416:	429c      	cmp	r4, r3
 8007418:	d006      	beq.n	8007428 <std+0x48>
 800741a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800741e:	4294      	cmp	r4, r2
 8007420:	d002      	beq.n	8007428 <std+0x48>
 8007422:	33d0      	adds	r3, #208	; 0xd0
 8007424:	429c      	cmp	r4, r3
 8007426:	d105      	bne.n	8007434 <std+0x54>
 8007428:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800742c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007430:	f000 b972 	b.w	8007718 <__retarget_lock_init_recursive>
 8007434:	bd10      	pop	{r4, pc}
 8007436:	bf00      	nop
 8007438:	080075a5 	.word	0x080075a5
 800743c:	080075c7 	.word	0x080075c7
 8007440:	080075ff 	.word	0x080075ff
 8007444:	08007623 	.word	0x08007623
 8007448:	20019a4c 	.word	0x20019a4c

0800744c <stdio_exit_handler>:
 800744c:	4a02      	ldr	r2, [pc, #8]	; (8007458 <stdio_exit_handler+0xc>)
 800744e:	4903      	ldr	r1, [pc, #12]	; (800745c <stdio_exit_handler+0x10>)
 8007450:	4803      	ldr	r0, [pc, #12]	; (8007460 <stdio_exit_handler+0x14>)
 8007452:	f000 b869 	b.w	8007528 <_fwalk_sglue>
 8007456:	bf00      	nop
 8007458:	20000014 	.word	0x20000014
 800745c:	08008055 	.word	0x08008055
 8007460:	20000020 	.word	0x20000020

08007464 <cleanup_stdio>:
 8007464:	6841      	ldr	r1, [r0, #4]
 8007466:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <cleanup_stdio+0x34>)
 8007468:	4299      	cmp	r1, r3
 800746a:	b510      	push	{r4, lr}
 800746c:	4604      	mov	r4, r0
 800746e:	d001      	beq.n	8007474 <cleanup_stdio+0x10>
 8007470:	f000 fdf0 	bl	8008054 <_fflush_r>
 8007474:	68a1      	ldr	r1, [r4, #8]
 8007476:	4b09      	ldr	r3, [pc, #36]	; (800749c <cleanup_stdio+0x38>)
 8007478:	4299      	cmp	r1, r3
 800747a:	d002      	beq.n	8007482 <cleanup_stdio+0x1e>
 800747c:	4620      	mov	r0, r4
 800747e:	f000 fde9 	bl	8008054 <_fflush_r>
 8007482:	68e1      	ldr	r1, [r4, #12]
 8007484:	4b06      	ldr	r3, [pc, #24]	; (80074a0 <cleanup_stdio+0x3c>)
 8007486:	4299      	cmp	r1, r3
 8007488:	d004      	beq.n	8007494 <cleanup_stdio+0x30>
 800748a:	4620      	mov	r0, r4
 800748c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007490:	f000 bde0 	b.w	8008054 <_fflush_r>
 8007494:	bd10      	pop	{r4, pc}
 8007496:	bf00      	nop
 8007498:	20019a4c 	.word	0x20019a4c
 800749c:	20019ab4 	.word	0x20019ab4
 80074a0:	20019b1c 	.word	0x20019b1c

080074a4 <global_stdio_init.part.0>:
 80074a4:	b510      	push	{r4, lr}
 80074a6:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <global_stdio_init.part.0+0x30>)
 80074a8:	4c0b      	ldr	r4, [pc, #44]	; (80074d8 <global_stdio_init.part.0+0x34>)
 80074aa:	4a0c      	ldr	r2, [pc, #48]	; (80074dc <global_stdio_init.part.0+0x38>)
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	4620      	mov	r0, r4
 80074b0:	2200      	movs	r2, #0
 80074b2:	2104      	movs	r1, #4
 80074b4:	f7ff ff94 	bl	80073e0 <std>
 80074b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80074bc:	2201      	movs	r2, #1
 80074be:	2109      	movs	r1, #9
 80074c0:	f7ff ff8e 	bl	80073e0 <std>
 80074c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80074c8:	2202      	movs	r2, #2
 80074ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ce:	2112      	movs	r1, #18
 80074d0:	f7ff bf86 	b.w	80073e0 <std>
 80074d4:	20019b84 	.word	0x20019b84
 80074d8:	20019a4c 	.word	0x20019a4c
 80074dc:	0800744d 	.word	0x0800744d

080074e0 <__sfp_lock_acquire>:
 80074e0:	4801      	ldr	r0, [pc, #4]	; (80074e8 <__sfp_lock_acquire+0x8>)
 80074e2:	f000 b91a 	b.w	800771a <__retarget_lock_acquire_recursive>
 80074e6:	bf00      	nop
 80074e8:	20019b8d 	.word	0x20019b8d

080074ec <__sfp_lock_release>:
 80074ec:	4801      	ldr	r0, [pc, #4]	; (80074f4 <__sfp_lock_release+0x8>)
 80074ee:	f000 b915 	b.w	800771c <__retarget_lock_release_recursive>
 80074f2:	bf00      	nop
 80074f4:	20019b8d 	.word	0x20019b8d

080074f8 <__sinit>:
 80074f8:	b510      	push	{r4, lr}
 80074fa:	4604      	mov	r4, r0
 80074fc:	f7ff fff0 	bl	80074e0 <__sfp_lock_acquire>
 8007500:	6a23      	ldr	r3, [r4, #32]
 8007502:	b11b      	cbz	r3, 800750c <__sinit+0x14>
 8007504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007508:	f7ff bff0 	b.w	80074ec <__sfp_lock_release>
 800750c:	4b04      	ldr	r3, [pc, #16]	; (8007520 <__sinit+0x28>)
 800750e:	6223      	str	r3, [r4, #32]
 8007510:	4b04      	ldr	r3, [pc, #16]	; (8007524 <__sinit+0x2c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1f5      	bne.n	8007504 <__sinit+0xc>
 8007518:	f7ff ffc4 	bl	80074a4 <global_stdio_init.part.0>
 800751c:	e7f2      	b.n	8007504 <__sinit+0xc>
 800751e:	bf00      	nop
 8007520:	08007465 	.word	0x08007465
 8007524:	20019b84 	.word	0x20019b84

08007528 <_fwalk_sglue>:
 8007528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800752c:	4607      	mov	r7, r0
 800752e:	4688      	mov	r8, r1
 8007530:	4614      	mov	r4, r2
 8007532:	2600      	movs	r6, #0
 8007534:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007538:	f1b9 0901 	subs.w	r9, r9, #1
 800753c:	d505      	bpl.n	800754a <_fwalk_sglue+0x22>
 800753e:	6824      	ldr	r4, [r4, #0]
 8007540:	2c00      	cmp	r4, #0
 8007542:	d1f7      	bne.n	8007534 <_fwalk_sglue+0xc>
 8007544:	4630      	mov	r0, r6
 8007546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800754a:	89ab      	ldrh	r3, [r5, #12]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d907      	bls.n	8007560 <_fwalk_sglue+0x38>
 8007550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007554:	3301      	adds	r3, #1
 8007556:	d003      	beq.n	8007560 <_fwalk_sglue+0x38>
 8007558:	4629      	mov	r1, r5
 800755a:	4638      	mov	r0, r7
 800755c:	47c0      	blx	r8
 800755e:	4306      	orrs	r6, r0
 8007560:	3568      	adds	r5, #104	; 0x68
 8007562:	e7e9      	b.n	8007538 <_fwalk_sglue+0x10>

08007564 <siprintf>:
 8007564:	b40e      	push	{r1, r2, r3}
 8007566:	b500      	push	{lr}
 8007568:	b09c      	sub	sp, #112	; 0x70
 800756a:	ab1d      	add	r3, sp, #116	; 0x74
 800756c:	9002      	str	r0, [sp, #8]
 800756e:	9006      	str	r0, [sp, #24]
 8007570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007574:	4809      	ldr	r0, [pc, #36]	; (800759c <siprintf+0x38>)
 8007576:	9107      	str	r1, [sp, #28]
 8007578:	9104      	str	r1, [sp, #16]
 800757a:	4909      	ldr	r1, [pc, #36]	; (80075a0 <siprintf+0x3c>)
 800757c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007580:	9105      	str	r1, [sp, #20]
 8007582:	6800      	ldr	r0, [r0, #0]
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	a902      	add	r1, sp, #8
 8007588:	f000 fa50 	bl	8007a2c <_svfiprintf_r>
 800758c:	9b02      	ldr	r3, [sp, #8]
 800758e:	2200      	movs	r2, #0
 8007590:	701a      	strb	r2, [r3, #0]
 8007592:	b01c      	add	sp, #112	; 0x70
 8007594:	f85d eb04 	ldr.w	lr, [sp], #4
 8007598:	b003      	add	sp, #12
 800759a:	4770      	bx	lr
 800759c:	2000006c 	.word	0x2000006c
 80075a0:	ffff0208 	.word	0xffff0208

080075a4 <__sread>:
 80075a4:	b510      	push	{r4, lr}
 80075a6:	460c      	mov	r4, r1
 80075a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ac:	f000 f878 	bl	80076a0 <_read_r>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	bfab      	itete	ge
 80075b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075b6:	89a3      	ldrhlt	r3, [r4, #12]
 80075b8:	181b      	addge	r3, r3, r0
 80075ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075be:	bfac      	ite	ge
 80075c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80075c2:	81a3      	strhlt	r3, [r4, #12]
 80075c4:	bd10      	pop	{r4, pc}

080075c6 <__swrite>:
 80075c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ca:	461f      	mov	r7, r3
 80075cc:	898b      	ldrh	r3, [r1, #12]
 80075ce:	05db      	lsls	r3, r3, #23
 80075d0:	4605      	mov	r5, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	4616      	mov	r6, r2
 80075d6:	d505      	bpl.n	80075e4 <__swrite+0x1e>
 80075d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075dc:	2302      	movs	r3, #2
 80075de:	2200      	movs	r2, #0
 80075e0:	f000 f84c 	bl	800767c <_lseek_r>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ee:	81a3      	strh	r3, [r4, #12]
 80075f0:	4632      	mov	r2, r6
 80075f2:	463b      	mov	r3, r7
 80075f4:	4628      	mov	r0, r5
 80075f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075fa:	f7ff bea1 	b.w	8007340 <_write_r>

080075fe <__sseek>:
 80075fe:	b510      	push	{r4, lr}
 8007600:	460c      	mov	r4, r1
 8007602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007606:	f000 f839 	bl	800767c <_lseek_r>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	bf15      	itete	ne
 8007610:	6560      	strne	r0, [r4, #84]	; 0x54
 8007612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800761a:	81a3      	strheq	r3, [r4, #12]
 800761c:	bf18      	it	ne
 800761e:	81a3      	strhne	r3, [r4, #12]
 8007620:	bd10      	pop	{r4, pc}

08007622 <__sclose>:
 8007622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007626:	f000 b819 	b.w	800765c <_close_r>

0800762a <memcmp>:
 800762a:	b510      	push	{r4, lr}
 800762c:	3901      	subs	r1, #1
 800762e:	4402      	add	r2, r0
 8007630:	4290      	cmp	r0, r2
 8007632:	d101      	bne.n	8007638 <memcmp+0xe>
 8007634:	2000      	movs	r0, #0
 8007636:	e005      	b.n	8007644 <memcmp+0x1a>
 8007638:	7803      	ldrb	r3, [r0, #0]
 800763a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800763e:	42a3      	cmp	r3, r4
 8007640:	d001      	beq.n	8007646 <memcmp+0x1c>
 8007642:	1b18      	subs	r0, r3, r4
 8007644:	bd10      	pop	{r4, pc}
 8007646:	3001      	adds	r0, #1
 8007648:	e7f2      	b.n	8007630 <memcmp+0x6>

0800764a <memset>:
 800764a:	4402      	add	r2, r0
 800764c:	4603      	mov	r3, r0
 800764e:	4293      	cmp	r3, r2
 8007650:	d100      	bne.n	8007654 <memset+0xa>
 8007652:	4770      	bx	lr
 8007654:	f803 1b01 	strb.w	r1, [r3], #1
 8007658:	e7f9      	b.n	800764e <memset+0x4>
	...

0800765c <_close_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4d06      	ldr	r5, [pc, #24]	; (8007678 <_close_r+0x1c>)
 8007660:	2300      	movs	r3, #0
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	602b      	str	r3, [r5, #0]
 8007668:	f7f9 fc3d 	bl	8000ee6 <_close>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_close_r+0x1a>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b103      	cbz	r3, 8007676 <_close_r+0x1a>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	20019b88 	.word	0x20019b88

0800767c <_lseek_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d07      	ldr	r5, [pc, #28]	; (800769c <_lseek_r+0x20>)
 8007680:	4604      	mov	r4, r0
 8007682:	4608      	mov	r0, r1
 8007684:	4611      	mov	r1, r2
 8007686:	2200      	movs	r2, #0
 8007688:	602a      	str	r2, [r5, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	f7f9 fc52 	bl	8000f34 <_lseek>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_lseek_r+0x1e>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	b103      	cbz	r3, 800769a <_lseek_r+0x1e>
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	20019b88 	.word	0x20019b88

080076a0 <_read_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4d07      	ldr	r5, [pc, #28]	; (80076c0 <_read_r+0x20>)
 80076a4:	4604      	mov	r4, r0
 80076a6:	4608      	mov	r0, r1
 80076a8:	4611      	mov	r1, r2
 80076aa:	2200      	movs	r2, #0
 80076ac:	602a      	str	r2, [r5, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	f7f9 fbfc 	bl	8000eac <_read>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_read_r+0x1e>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_read_r+0x1e>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	20019b88 	.word	0x20019b88

080076c4 <__errno>:
 80076c4:	4b01      	ldr	r3, [pc, #4]	; (80076cc <__errno+0x8>)
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	2000006c 	.word	0x2000006c

080076d0 <__libc_init_array>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	4d0d      	ldr	r5, [pc, #52]	; (8007708 <__libc_init_array+0x38>)
 80076d4:	4c0d      	ldr	r4, [pc, #52]	; (800770c <__libc_init_array+0x3c>)
 80076d6:	1b64      	subs	r4, r4, r5
 80076d8:	10a4      	asrs	r4, r4, #2
 80076da:	2600      	movs	r6, #0
 80076dc:	42a6      	cmp	r6, r4
 80076de:	d109      	bne.n	80076f4 <__libc_init_array+0x24>
 80076e0:	4d0b      	ldr	r5, [pc, #44]	; (8007710 <__libc_init_array+0x40>)
 80076e2:	4c0c      	ldr	r4, [pc, #48]	; (8007714 <__libc_init_array+0x44>)
 80076e4:	f001 f808 	bl	80086f8 <_init>
 80076e8:	1b64      	subs	r4, r4, r5
 80076ea:	10a4      	asrs	r4, r4, #2
 80076ec:	2600      	movs	r6, #0
 80076ee:	42a6      	cmp	r6, r4
 80076f0:	d105      	bne.n	80076fe <__libc_init_array+0x2e>
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f8:	4798      	blx	r3
 80076fa:	3601      	adds	r6, #1
 80076fc:	e7ee      	b.n	80076dc <__libc_init_array+0xc>
 80076fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007702:	4798      	blx	r3
 8007704:	3601      	adds	r6, #1
 8007706:	e7f2      	b.n	80076ee <__libc_init_array+0x1e>
 8007708:	08008944 	.word	0x08008944
 800770c:	08008944 	.word	0x08008944
 8007710:	08008944 	.word	0x08008944
 8007714:	08008948 	.word	0x08008948

08007718 <__retarget_lock_init_recursive>:
 8007718:	4770      	bx	lr

0800771a <__retarget_lock_acquire_recursive>:
 800771a:	4770      	bx	lr

0800771c <__retarget_lock_release_recursive>:
 800771c:	4770      	bx	lr

0800771e <memcpy>:
 800771e:	440a      	add	r2, r1
 8007720:	4291      	cmp	r1, r2
 8007722:	f100 33ff 	add.w	r3, r0, #4294967295
 8007726:	d100      	bne.n	800772a <memcpy+0xc>
 8007728:	4770      	bx	lr
 800772a:	b510      	push	{r4, lr}
 800772c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007730:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007734:	4291      	cmp	r1, r2
 8007736:	d1f9      	bne.n	800772c <memcpy+0xe>
 8007738:	bd10      	pop	{r4, pc}
	...

0800773c <__assert_func>:
 800773c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800773e:	4614      	mov	r4, r2
 8007740:	461a      	mov	r2, r3
 8007742:	4b09      	ldr	r3, [pc, #36]	; (8007768 <__assert_func+0x2c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4605      	mov	r5, r0
 8007748:	68d8      	ldr	r0, [r3, #12]
 800774a:	b14c      	cbz	r4, 8007760 <__assert_func+0x24>
 800774c:	4b07      	ldr	r3, [pc, #28]	; (800776c <__assert_func+0x30>)
 800774e:	9100      	str	r1, [sp, #0]
 8007750:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007754:	4906      	ldr	r1, [pc, #24]	; (8007770 <__assert_func+0x34>)
 8007756:	462b      	mov	r3, r5
 8007758:	f000 fca4 	bl	80080a4 <fiprintf>
 800775c:	f000 fcde 	bl	800811c <abort>
 8007760:	4b04      	ldr	r3, [pc, #16]	; (8007774 <__assert_func+0x38>)
 8007762:	461c      	mov	r4, r3
 8007764:	e7f3      	b.n	800774e <__assert_func+0x12>
 8007766:	bf00      	nop
 8007768:	2000006c 	.word	0x2000006c
 800776c:	080088cd 	.word	0x080088cd
 8007770:	080088da 	.word	0x080088da
 8007774:	08008908 	.word	0x08008908

08007778 <_free_r>:
 8007778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800777a:	2900      	cmp	r1, #0
 800777c:	d044      	beq.n	8007808 <_free_r+0x90>
 800777e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007782:	9001      	str	r0, [sp, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f1a1 0404 	sub.w	r4, r1, #4
 800778a:	bfb8      	it	lt
 800778c:	18e4      	addlt	r4, r4, r3
 800778e:	f000 f8e7 	bl	8007960 <__malloc_lock>
 8007792:	4a1e      	ldr	r2, [pc, #120]	; (800780c <_free_r+0x94>)
 8007794:	9801      	ldr	r0, [sp, #4]
 8007796:	6813      	ldr	r3, [r2, #0]
 8007798:	b933      	cbnz	r3, 80077a8 <_free_r+0x30>
 800779a:	6063      	str	r3, [r4, #4]
 800779c:	6014      	str	r4, [r2, #0]
 800779e:	b003      	add	sp, #12
 80077a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077a4:	f000 b8e2 	b.w	800796c <__malloc_unlock>
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	d908      	bls.n	80077be <_free_r+0x46>
 80077ac:	6825      	ldr	r5, [r4, #0]
 80077ae:	1961      	adds	r1, r4, r5
 80077b0:	428b      	cmp	r3, r1
 80077b2:	bf01      	itttt	eq
 80077b4:	6819      	ldreq	r1, [r3, #0]
 80077b6:	685b      	ldreq	r3, [r3, #4]
 80077b8:	1949      	addeq	r1, r1, r5
 80077ba:	6021      	streq	r1, [r4, #0]
 80077bc:	e7ed      	b.n	800779a <_free_r+0x22>
 80077be:	461a      	mov	r2, r3
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	b10b      	cbz	r3, 80077c8 <_free_r+0x50>
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	d9fa      	bls.n	80077be <_free_r+0x46>
 80077c8:	6811      	ldr	r1, [r2, #0]
 80077ca:	1855      	adds	r5, r2, r1
 80077cc:	42a5      	cmp	r5, r4
 80077ce:	d10b      	bne.n	80077e8 <_free_r+0x70>
 80077d0:	6824      	ldr	r4, [r4, #0]
 80077d2:	4421      	add	r1, r4
 80077d4:	1854      	adds	r4, r2, r1
 80077d6:	42a3      	cmp	r3, r4
 80077d8:	6011      	str	r1, [r2, #0]
 80077da:	d1e0      	bne.n	800779e <_free_r+0x26>
 80077dc:	681c      	ldr	r4, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	6053      	str	r3, [r2, #4]
 80077e2:	440c      	add	r4, r1
 80077e4:	6014      	str	r4, [r2, #0]
 80077e6:	e7da      	b.n	800779e <_free_r+0x26>
 80077e8:	d902      	bls.n	80077f0 <_free_r+0x78>
 80077ea:	230c      	movs	r3, #12
 80077ec:	6003      	str	r3, [r0, #0]
 80077ee:	e7d6      	b.n	800779e <_free_r+0x26>
 80077f0:	6825      	ldr	r5, [r4, #0]
 80077f2:	1961      	adds	r1, r4, r5
 80077f4:	428b      	cmp	r3, r1
 80077f6:	bf04      	itt	eq
 80077f8:	6819      	ldreq	r1, [r3, #0]
 80077fa:	685b      	ldreq	r3, [r3, #4]
 80077fc:	6063      	str	r3, [r4, #4]
 80077fe:	bf04      	itt	eq
 8007800:	1949      	addeq	r1, r1, r5
 8007802:	6021      	streq	r1, [r4, #0]
 8007804:	6054      	str	r4, [r2, #4]
 8007806:	e7ca      	b.n	800779e <_free_r+0x26>
 8007808:	b003      	add	sp, #12
 800780a:	bd30      	pop	{r4, r5, pc}
 800780c:	20019b90 	.word	0x20019b90

08007810 <malloc>:
 8007810:	4b02      	ldr	r3, [pc, #8]	; (800781c <malloc+0xc>)
 8007812:	4601      	mov	r1, r0
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	f000 b823 	b.w	8007860 <_malloc_r>
 800781a:	bf00      	nop
 800781c:	2000006c 	.word	0x2000006c

08007820 <sbrk_aligned>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	4e0e      	ldr	r6, [pc, #56]	; (800785c <sbrk_aligned+0x3c>)
 8007824:	460c      	mov	r4, r1
 8007826:	6831      	ldr	r1, [r6, #0]
 8007828:	4605      	mov	r5, r0
 800782a:	b911      	cbnz	r1, 8007832 <sbrk_aligned+0x12>
 800782c:	f000 fc66 	bl	80080fc <_sbrk_r>
 8007830:	6030      	str	r0, [r6, #0]
 8007832:	4621      	mov	r1, r4
 8007834:	4628      	mov	r0, r5
 8007836:	f000 fc61 	bl	80080fc <_sbrk_r>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	d00a      	beq.n	8007854 <sbrk_aligned+0x34>
 800783e:	1cc4      	adds	r4, r0, #3
 8007840:	f024 0403 	bic.w	r4, r4, #3
 8007844:	42a0      	cmp	r0, r4
 8007846:	d007      	beq.n	8007858 <sbrk_aligned+0x38>
 8007848:	1a21      	subs	r1, r4, r0
 800784a:	4628      	mov	r0, r5
 800784c:	f000 fc56 	bl	80080fc <_sbrk_r>
 8007850:	3001      	adds	r0, #1
 8007852:	d101      	bne.n	8007858 <sbrk_aligned+0x38>
 8007854:	f04f 34ff 	mov.w	r4, #4294967295
 8007858:	4620      	mov	r0, r4
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	20019b94 	.word	0x20019b94

08007860 <_malloc_r>:
 8007860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007864:	1ccd      	adds	r5, r1, #3
 8007866:	f025 0503 	bic.w	r5, r5, #3
 800786a:	3508      	adds	r5, #8
 800786c:	2d0c      	cmp	r5, #12
 800786e:	bf38      	it	cc
 8007870:	250c      	movcc	r5, #12
 8007872:	2d00      	cmp	r5, #0
 8007874:	4607      	mov	r7, r0
 8007876:	db01      	blt.n	800787c <_malloc_r+0x1c>
 8007878:	42a9      	cmp	r1, r5
 800787a:	d905      	bls.n	8007888 <_malloc_r+0x28>
 800787c:	230c      	movs	r3, #12
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	2600      	movs	r6, #0
 8007882:	4630      	mov	r0, r6
 8007884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007888:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800795c <_malloc_r+0xfc>
 800788c:	f000 f868 	bl	8007960 <__malloc_lock>
 8007890:	f8d8 3000 	ldr.w	r3, [r8]
 8007894:	461c      	mov	r4, r3
 8007896:	bb5c      	cbnz	r4, 80078f0 <_malloc_r+0x90>
 8007898:	4629      	mov	r1, r5
 800789a:	4638      	mov	r0, r7
 800789c:	f7ff ffc0 	bl	8007820 <sbrk_aligned>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	4604      	mov	r4, r0
 80078a4:	d155      	bne.n	8007952 <_malloc_r+0xf2>
 80078a6:	f8d8 4000 	ldr.w	r4, [r8]
 80078aa:	4626      	mov	r6, r4
 80078ac:	2e00      	cmp	r6, #0
 80078ae:	d145      	bne.n	800793c <_malloc_r+0xdc>
 80078b0:	2c00      	cmp	r4, #0
 80078b2:	d048      	beq.n	8007946 <_malloc_r+0xe6>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	4631      	mov	r1, r6
 80078b8:	4638      	mov	r0, r7
 80078ba:	eb04 0903 	add.w	r9, r4, r3
 80078be:	f000 fc1d 	bl	80080fc <_sbrk_r>
 80078c2:	4581      	cmp	r9, r0
 80078c4:	d13f      	bne.n	8007946 <_malloc_r+0xe6>
 80078c6:	6821      	ldr	r1, [r4, #0]
 80078c8:	1a6d      	subs	r5, r5, r1
 80078ca:	4629      	mov	r1, r5
 80078cc:	4638      	mov	r0, r7
 80078ce:	f7ff ffa7 	bl	8007820 <sbrk_aligned>
 80078d2:	3001      	adds	r0, #1
 80078d4:	d037      	beq.n	8007946 <_malloc_r+0xe6>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	442b      	add	r3, r5
 80078da:	6023      	str	r3, [r4, #0]
 80078dc:	f8d8 3000 	ldr.w	r3, [r8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d038      	beq.n	8007956 <_malloc_r+0xf6>
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	42a2      	cmp	r2, r4
 80078e8:	d12b      	bne.n	8007942 <_malloc_r+0xe2>
 80078ea:	2200      	movs	r2, #0
 80078ec:	605a      	str	r2, [r3, #4]
 80078ee:	e00f      	b.n	8007910 <_malloc_r+0xb0>
 80078f0:	6822      	ldr	r2, [r4, #0]
 80078f2:	1b52      	subs	r2, r2, r5
 80078f4:	d41f      	bmi.n	8007936 <_malloc_r+0xd6>
 80078f6:	2a0b      	cmp	r2, #11
 80078f8:	d917      	bls.n	800792a <_malloc_r+0xca>
 80078fa:	1961      	adds	r1, r4, r5
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	6025      	str	r5, [r4, #0]
 8007900:	bf18      	it	ne
 8007902:	6059      	strne	r1, [r3, #4]
 8007904:	6863      	ldr	r3, [r4, #4]
 8007906:	bf08      	it	eq
 8007908:	f8c8 1000 	streq.w	r1, [r8]
 800790c:	5162      	str	r2, [r4, r5]
 800790e:	604b      	str	r3, [r1, #4]
 8007910:	4638      	mov	r0, r7
 8007912:	f104 060b 	add.w	r6, r4, #11
 8007916:	f000 f829 	bl	800796c <__malloc_unlock>
 800791a:	f026 0607 	bic.w	r6, r6, #7
 800791e:	1d23      	adds	r3, r4, #4
 8007920:	1af2      	subs	r2, r6, r3
 8007922:	d0ae      	beq.n	8007882 <_malloc_r+0x22>
 8007924:	1b9b      	subs	r3, r3, r6
 8007926:	50a3      	str	r3, [r4, r2]
 8007928:	e7ab      	b.n	8007882 <_malloc_r+0x22>
 800792a:	42a3      	cmp	r3, r4
 800792c:	6862      	ldr	r2, [r4, #4]
 800792e:	d1dd      	bne.n	80078ec <_malloc_r+0x8c>
 8007930:	f8c8 2000 	str.w	r2, [r8]
 8007934:	e7ec      	b.n	8007910 <_malloc_r+0xb0>
 8007936:	4623      	mov	r3, r4
 8007938:	6864      	ldr	r4, [r4, #4]
 800793a:	e7ac      	b.n	8007896 <_malloc_r+0x36>
 800793c:	4634      	mov	r4, r6
 800793e:	6876      	ldr	r6, [r6, #4]
 8007940:	e7b4      	b.n	80078ac <_malloc_r+0x4c>
 8007942:	4613      	mov	r3, r2
 8007944:	e7cc      	b.n	80078e0 <_malloc_r+0x80>
 8007946:	230c      	movs	r3, #12
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	4638      	mov	r0, r7
 800794c:	f000 f80e 	bl	800796c <__malloc_unlock>
 8007950:	e797      	b.n	8007882 <_malloc_r+0x22>
 8007952:	6025      	str	r5, [r4, #0]
 8007954:	e7dc      	b.n	8007910 <_malloc_r+0xb0>
 8007956:	605b      	str	r3, [r3, #4]
 8007958:	deff      	udf	#255	; 0xff
 800795a:	bf00      	nop
 800795c:	20019b90 	.word	0x20019b90

08007960 <__malloc_lock>:
 8007960:	4801      	ldr	r0, [pc, #4]	; (8007968 <__malloc_lock+0x8>)
 8007962:	f7ff beda 	b.w	800771a <__retarget_lock_acquire_recursive>
 8007966:	bf00      	nop
 8007968:	20019b8c 	.word	0x20019b8c

0800796c <__malloc_unlock>:
 800796c:	4801      	ldr	r0, [pc, #4]	; (8007974 <__malloc_unlock+0x8>)
 800796e:	f7ff bed5 	b.w	800771c <__retarget_lock_release_recursive>
 8007972:	bf00      	nop
 8007974:	20019b8c 	.word	0x20019b8c

08007978 <__ssputs_r>:
 8007978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	688e      	ldr	r6, [r1, #8]
 800797e:	461f      	mov	r7, r3
 8007980:	42be      	cmp	r6, r7
 8007982:	680b      	ldr	r3, [r1, #0]
 8007984:	4682      	mov	sl, r0
 8007986:	460c      	mov	r4, r1
 8007988:	4690      	mov	r8, r2
 800798a:	d82c      	bhi.n	80079e6 <__ssputs_r+0x6e>
 800798c:	898a      	ldrh	r2, [r1, #12]
 800798e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007992:	d026      	beq.n	80079e2 <__ssputs_r+0x6a>
 8007994:	6965      	ldr	r5, [r4, #20]
 8007996:	6909      	ldr	r1, [r1, #16]
 8007998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800799c:	eba3 0901 	sub.w	r9, r3, r1
 80079a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079a4:	1c7b      	adds	r3, r7, #1
 80079a6:	444b      	add	r3, r9
 80079a8:	106d      	asrs	r5, r5, #1
 80079aa:	429d      	cmp	r5, r3
 80079ac:	bf38      	it	cc
 80079ae:	461d      	movcc	r5, r3
 80079b0:	0553      	lsls	r3, r2, #21
 80079b2:	d527      	bpl.n	8007a04 <__ssputs_r+0x8c>
 80079b4:	4629      	mov	r1, r5
 80079b6:	f7ff ff53 	bl	8007860 <_malloc_r>
 80079ba:	4606      	mov	r6, r0
 80079bc:	b360      	cbz	r0, 8007a18 <__ssputs_r+0xa0>
 80079be:	6921      	ldr	r1, [r4, #16]
 80079c0:	464a      	mov	r2, r9
 80079c2:	f7ff feac 	bl	800771e <memcpy>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	6126      	str	r6, [r4, #16]
 80079d4:	6165      	str	r5, [r4, #20]
 80079d6:	444e      	add	r6, r9
 80079d8:	eba5 0509 	sub.w	r5, r5, r9
 80079dc:	6026      	str	r6, [r4, #0]
 80079de:	60a5      	str	r5, [r4, #8]
 80079e0:	463e      	mov	r6, r7
 80079e2:	42be      	cmp	r6, r7
 80079e4:	d900      	bls.n	80079e8 <__ssputs_r+0x70>
 80079e6:	463e      	mov	r6, r7
 80079e8:	6820      	ldr	r0, [r4, #0]
 80079ea:	4632      	mov	r2, r6
 80079ec:	4641      	mov	r1, r8
 80079ee:	f000 fb6b 	bl	80080c8 <memmove>
 80079f2:	68a3      	ldr	r3, [r4, #8]
 80079f4:	1b9b      	subs	r3, r3, r6
 80079f6:	60a3      	str	r3, [r4, #8]
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	4433      	add	r3, r6
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	2000      	movs	r0, #0
 8007a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a04:	462a      	mov	r2, r5
 8007a06:	f000 fb90 	bl	800812a <_realloc_r>
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d1e0      	bne.n	80079d2 <__ssputs_r+0x5a>
 8007a10:	6921      	ldr	r1, [r4, #16]
 8007a12:	4650      	mov	r0, sl
 8007a14:	f7ff feb0 	bl	8007778 <_free_r>
 8007a18:	230c      	movs	r3, #12
 8007a1a:	f8ca 3000 	str.w	r3, [sl]
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a24:	81a3      	strh	r3, [r4, #12]
 8007a26:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2a:	e7e9      	b.n	8007a00 <__ssputs_r+0x88>

08007a2c <_svfiprintf_r>:
 8007a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	4698      	mov	r8, r3
 8007a32:	898b      	ldrh	r3, [r1, #12]
 8007a34:	061b      	lsls	r3, r3, #24
 8007a36:	b09d      	sub	sp, #116	; 0x74
 8007a38:	4607      	mov	r7, r0
 8007a3a:	460d      	mov	r5, r1
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	d50e      	bpl.n	8007a5e <_svfiprintf_r+0x32>
 8007a40:	690b      	ldr	r3, [r1, #16]
 8007a42:	b963      	cbnz	r3, 8007a5e <_svfiprintf_r+0x32>
 8007a44:	2140      	movs	r1, #64	; 0x40
 8007a46:	f7ff ff0b 	bl	8007860 <_malloc_r>
 8007a4a:	6028      	str	r0, [r5, #0]
 8007a4c:	6128      	str	r0, [r5, #16]
 8007a4e:	b920      	cbnz	r0, 8007a5a <_svfiprintf_r+0x2e>
 8007a50:	230c      	movs	r3, #12
 8007a52:	603b      	str	r3, [r7, #0]
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	e0d0      	b.n	8007bfc <_svfiprintf_r+0x1d0>
 8007a5a:	2340      	movs	r3, #64	; 0x40
 8007a5c:	616b      	str	r3, [r5, #20]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	9309      	str	r3, [sp, #36]	; 0x24
 8007a62:	2320      	movs	r3, #32
 8007a64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a6c:	2330      	movs	r3, #48	; 0x30
 8007a6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007c14 <_svfiprintf_r+0x1e8>
 8007a72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a76:	f04f 0901 	mov.w	r9, #1
 8007a7a:	4623      	mov	r3, r4
 8007a7c:	469a      	mov	sl, r3
 8007a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a82:	b10a      	cbz	r2, 8007a88 <_svfiprintf_r+0x5c>
 8007a84:	2a25      	cmp	r2, #37	; 0x25
 8007a86:	d1f9      	bne.n	8007a7c <_svfiprintf_r+0x50>
 8007a88:	ebba 0b04 	subs.w	fp, sl, r4
 8007a8c:	d00b      	beq.n	8007aa6 <_svfiprintf_r+0x7a>
 8007a8e:	465b      	mov	r3, fp
 8007a90:	4622      	mov	r2, r4
 8007a92:	4629      	mov	r1, r5
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7ff ff6f 	bl	8007978 <__ssputs_r>
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f000 80a9 	beq.w	8007bf2 <_svfiprintf_r+0x1c6>
 8007aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aa2:	445a      	add	r2, fp
 8007aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8007aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80a1 	beq.w	8007bf2 <_svfiprintf_r+0x1c6>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aba:	f10a 0a01 	add.w	sl, sl, #1
 8007abe:	9304      	str	r3, [sp, #16]
 8007ac0:	9307      	str	r3, [sp, #28]
 8007ac2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ac6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ac8:	4654      	mov	r4, sl
 8007aca:	2205      	movs	r2, #5
 8007acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad0:	4850      	ldr	r0, [pc, #320]	; (8007c14 <_svfiprintf_r+0x1e8>)
 8007ad2:	f7f8 fbcd 	bl	8000270 <memchr>
 8007ad6:	9a04      	ldr	r2, [sp, #16]
 8007ad8:	b9d8      	cbnz	r0, 8007b12 <_svfiprintf_r+0xe6>
 8007ada:	06d0      	lsls	r0, r2, #27
 8007adc:	bf44      	itt	mi
 8007ade:	2320      	movmi	r3, #32
 8007ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ae4:	0711      	lsls	r1, r2, #28
 8007ae6:	bf44      	itt	mi
 8007ae8:	232b      	movmi	r3, #43	; 0x2b
 8007aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aee:	f89a 3000 	ldrb.w	r3, [sl]
 8007af2:	2b2a      	cmp	r3, #42	; 0x2a
 8007af4:	d015      	beq.n	8007b22 <_svfiprintf_r+0xf6>
 8007af6:	9a07      	ldr	r2, [sp, #28]
 8007af8:	4654      	mov	r4, sl
 8007afa:	2000      	movs	r0, #0
 8007afc:	f04f 0c0a 	mov.w	ip, #10
 8007b00:	4621      	mov	r1, r4
 8007b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b06:	3b30      	subs	r3, #48	; 0x30
 8007b08:	2b09      	cmp	r3, #9
 8007b0a:	d94d      	bls.n	8007ba8 <_svfiprintf_r+0x17c>
 8007b0c:	b1b0      	cbz	r0, 8007b3c <_svfiprintf_r+0x110>
 8007b0e:	9207      	str	r2, [sp, #28]
 8007b10:	e014      	b.n	8007b3c <_svfiprintf_r+0x110>
 8007b12:	eba0 0308 	sub.w	r3, r0, r8
 8007b16:	fa09 f303 	lsl.w	r3, r9, r3
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	9304      	str	r3, [sp, #16]
 8007b1e:	46a2      	mov	sl, r4
 8007b20:	e7d2      	b.n	8007ac8 <_svfiprintf_r+0x9c>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	1d19      	adds	r1, r3, #4
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	9103      	str	r1, [sp, #12]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bfbb      	ittet	lt
 8007b2e:	425b      	neglt	r3, r3
 8007b30:	f042 0202 	orrlt.w	r2, r2, #2
 8007b34:	9307      	strge	r3, [sp, #28]
 8007b36:	9307      	strlt	r3, [sp, #28]
 8007b38:	bfb8      	it	lt
 8007b3a:	9204      	strlt	r2, [sp, #16]
 8007b3c:	7823      	ldrb	r3, [r4, #0]
 8007b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b40:	d10c      	bne.n	8007b5c <_svfiprintf_r+0x130>
 8007b42:	7863      	ldrb	r3, [r4, #1]
 8007b44:	2b2a      	cmp	r3, #42	; 0x2a
 8007b46:	d134      	bne.n	8007bb2 <_svfiprintf_r+0x186>
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	1d1a      	adds	r2, r3, #4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	9203      	str	r2, [sp, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	bfb8      	it	lt
 8007b54:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b58:	3402      	adds	r4, #2
 8007b5a:	9305      	str	r3, [sp, #20]
 8007b5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007c24 <_svfiprintf_r+0x1f8>
 8007b60:	7821      	ldrb	r1, [r4, #0]
 8007b62:	2203      	movs	r2, #3
 8007b64:	4650      	mov	r0, sl
 8007b66:	f7f8 fb83 	bl	8000270 <memchr>
 8007b6a:	b138      	cbz	r0, 8007b7c <_svfiprintf_r+0x150>
 8007b6c:	9b04      	ldr	r3, [sp, #16]
 8007b6e:	eba0 000a 	sub.w	r0, r0, sl
 8007b72:	2240      	movs	r2, #64	; 0x40
 8007b74:	4082      	lsls	r2, r0
 8007b76:	4313      	orrs	r3, r2
 8007b78:	3401      	adds	r4, #1
 8007b7a:	9304      	str	r3, [sp, #16]
 8007b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b80:	4825      	ldr	r0, [pc, #148]	; (8007c18 <_svfiprintf_r+0x1ec>)
 8007b82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b86:	2206      	movs	r2, #6
 8007b88:	f7f8 fb72 	bl	8000270 <memchr>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d038      	beq.n	8007c02 <_svfiprintf_r+0x1d6>
 8007b90:	4b22      	ldr	r3, [pc, #136]	; (8007c1c <_svfiprintf_r+0x1f0>)
 8007b92:	bb1b      	cbnz	r3, 8007bdc <_svfiprintf_r+0x1b0>
 8007b94:	9b03      	ldr	r3, [sp, #12]
 8007b96:	3307      	adds	r3, #7
 8007b98:	f023 0307 	bic.w	r3, r3, #7
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	9303      	str	r3, [sp, #12]
 8007ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba2:	4433      	add	r3, r6
 8007ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba6:	e768      	b.n	8007a7a <_svfiprintf_r+0x4e>
 8007ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bac:	460c      	mov	r4, r1
 8007bae:	2001      	movs	r0, #1
 8007bb0:	e7a6      	b.n	8007b00 <_svfiprintf_r+0xd4>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	3401      	adds	r4, #1
 8007bb6:	9305      	str	r3, [sp, #20]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	f04f 0c0a 	mov.w	ip, #10
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bc4:	3a30      	subs	r2, #48	; 0x30
 8007bc6:	2a09      	cmp	r2, #9
 8007bc8:	d903      	bls.n	8007bd2 <_svfiprintf_r+0x1a6>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0c6      	beq.n	8007b5c <_svfiprintf_r+0x130>
 8007bce:	9105      	str	r1, [sp, #20]
 8007bd0:	e7c4      	b.n	8007b5c <_svfiprintf_r+0x130>
 8007bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e7f0      	b.n	8007bbe <_svfiprintf_r+0x192>
 8007bdc:	ab03      	add	r3, sp, #12
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	462a      	mov	r2, r5
 8007be2:	4b0f      	ldr	r3, [pc, #60]	; (8007c20 <_svfiprintf_r+0x1f4>)
 8007be4:	a904      	add	r1, sp, #16
 8007be6:	4638      	mov	r0, r7
 8007be8:	f3af 8000 	nop.w
 8007bec:	1c42      	adds	r2, r0, #1
 8007bee:	4606      	mov	r6, r0
 8007bf0:	d1d6      	bne.n	8007ba0 <_svfiprintf_r+0x174>
 8007bf2:	89ab      	ldrh	r3, [r5, #12]
 8007bf4:	065b      	lsls	r3, r3, #25
 8007bf6:	f53f af2d 	bmi.w	8007a54 <_svfiprintf_r+0x28>
 8007bfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bfc:	b01d      	add	sp, #116	; 0x74
 8007bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c02:	ab03      	add	r3, sp, #12
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	462a      	mov	r2, r5
 8007c08:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <_svfiprintf_r+0x1f4>)
 8007c0a:	a904      	add	r1, sp, #16
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	f000 f879 	bl	8007d04 <_printf_i>
 8007c12:	e7eb      	b.n	8007bec <_svfiprintf_r+0x1c0>
 8007c14:	08008909 	.word	0x08008909
 8007c18:	08008913 	.word	0x08008913
 8007c1c:	00000000 	.word	0x00000000
 8007c20:	08007979 	.word	0x08007979
 8007c24:	0800890f 	.word	0x0800890f

08007c28 <_printf_common>:
 8007c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	4616      	mov	r6, r2
 8007c2e:	4699      	mov	r9, r3
 8007c30:	688a      	ldr	r2, [r1, #8]
 8007c32:	690b      	ldr	r3, [r1, #16]
 8007c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	bfb8      	it	lt
 8007c3c:	4613      	movlt	r3, r2
 8007c3e:	6033      	str	r3, [r6, #0]
 8007c40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c44:	4607      	mov	r7, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	b10a      	cbz	r2, 8007c4e <_printf_common+0x26>
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	6033      	str	r3, [r6, #0]
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	0699      	lsls	r1, r3, #26
 8007c52:	bf42      	ittt	mi
 8007c54:	6833      	ldrmi	r3, [r6, #0]
 8007c56:	3302      	addmi	r3, #2
 8007c58:	6033      	strmi	r3, [r6, #0]
 8007c5a:	6825      	ldr	r5, [r4, #0]
 8007c5c:	f015 0506 	ands.w	r5, r5, #6
 8007c60:	d106      	bne.n	8007c70 <_printf_common+0x48>
 8007c62:	f104 0a19 	add.w	sl, r4, #25
 8007c66:	68e3      	ldr	r3, [r4, #12]
 8007c68:	6832      	ldr	r2, [r6, #0]
 8007c6a:	1a9b      	subs	r3, r3, r2
 8007c6c:	42ab      	cmp	r3, r5
 8007c6e:	dc26      	bgt.n	8007cbe <_printf_common+0x96>
 8007c70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c74:	1e13      	subs	r3, r2, #0
 8007c76:	6822      	ldr	r2, [r4, #0]
 8007c78:	bf18      	it	ne
 8007c7a:	2301      	movne	r3, #1
 8007c7c:	0692      	lsls	r2, r2, #26
 8007c7e:	d42b      	bmi.n	8007cd8 <_printf_common+0xb0>
 8007c80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c84:	4649      	mov	r1, r9
 8007c86:	4638      	mov	r0, r7
 8007c88:	47c0      	blx	r8
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d01e      	beq.n	8007ccc <_printf_common+0xa4>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	6922      	ldr	r2, [r4, #16]
 8007c92:	f003 0306 	and.w	r3, r3, #6
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	bf02      	ittt	eq
 8007c9a:	68e5      	ldreq	r5, [r4, #12]
 8007c9c:	6833      	ldreq	r3, [r6, #0]
 8007c9e:	1aed      	subeq	r5, r5, r3
 8007ca0:	68a3      	ldr	r3, [r4, #8]
 8007ca2:	bf0c      	ite	eq
 8007ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ca8:	2500      	movne	r5, #0
 8007caa:	4293      	cmp	r3, r2
 8007cac:	bfc4      	itt	gt
 8007cae:	1a9b      	subgt	r3, r3, r2
 8007cb0:	18ed      	addgt	r5, r5, r3
 8007cb2:	2600      	movs	r6, #0
 8007cb4:	341a      	adds	r4, #26
 8007cb6:	42b5      	cmp	r5, r6
 8007cb8:	d11a      	bne.n	8007cf0 <_printf_common+0xc8>
 8007cba:	2000      	movs	r0, #0
 8007cbc:	e008      	b.n	8007cd0 <_printf_common+0xa8>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	4652      	mov	r2, sl
 8007cc2:	4649      	mov	r1, r9
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	47c0      	blx	r8
 8007cc8:	3001      	adds	r0, #1
 8007cca:	d103      	bne.n	8007cd4 <_printf_common+0xac>
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd4:	3501      	adds	r5, #1
 8007cd6:	e7c6      	b.n	8007c66 <_printf_common+0x3e>
 8007cd8:	18e1      	adds	r1, r4, r3
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	2030      	movs	r0, #48	; 0x30
 8007cde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ce2:	4422      	add	r2, r4
 8007ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cec:	3302      	adds	r3, #2
 8007cee:	e7c7      	b.n	8007c80 <_printf_common+0x58>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	4622      	mov	r2, r4
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	47c0      	blx	r8
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	d0e6      	beq.n	8007ccc <_printf_common+0xa4>
 8007cfe:	3601      	adds	r6, #1
 8007d00:	e7d9      	b.n	8007cb6 <_printf_common+0x8e>
	...

08007d04 <_printf_i>:
 8007d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d08:	7e0f      	ldrb	r7, [r1, #24]
 8007d0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d0c:	2f78      	cmp	r7, #120	; 0x78
 8007d0e:	4691      	mov	r9, r2
 8007d10:	4680      	mov	r8, r0
 8007d12:	460c      	mov	r4, r1
 8007d14:	469a      	mov	sl, r3
 8007d16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d1a:	d807      	bhi.n	8007d2c <_printf_i+0x28>
 8007d1c:	2f62      	cmp	r7, #98	; 0x62
 8007d1e:	d80a      	bhi.n	8007d36 <_printf_i+0x32>
 8007d20:	2f00      	cmp	r7, #0
 8007d22:	f000 80d4 	beq.w	8007ece <_printf_i+0x1ca>
 8007d26:	2f58      	cmp	r7, #88	; 0x58
 8007d28:	f000 80c0 	beq.w	8007eac <_printf_i+0x1a8>
 8007d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d34:	e03a      	b.n	8007dac <_printf_i+0xa8>
 8007d36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d3a:	2b15      	cmp	r3, #21
 8007d3c:	d8f6      	bhi.n	8007d2c <_printf_i+0x28>
 8007d3e:	a101      	add	r1, pc, #4	; (adr r1, 8007d44 <_printf_i+0x40>)
 8007d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d44:	08007d9d 	.word	0x08007d9d
 8007d48:	08007db1 	.word	0x08007db1
 8007d4c:	08007d2d 	.word	0x08007d2d
 8007d50:	08007d2d 	.word	0x08007d2d
 8007d54:	08007d2d 	.word	0x08007d2d
 8007d58:	08007d2d 	.word	0x08007d2d
 8007d5c:	08007db1 	.word	0x08007db1
 8007d60:	08007d2d 	.word	0x08007d2d
 8007d64:	08007d2d 	.word	0x08007d2d
 8007d68:	08007d2d 	.word	0x08007d2d
 8007d6c:	08007d2d 	.word	0x08007d2d
 8007d70:	08007eb5 	.word	0x08007eb5
 8007d74:	08007ddd 	.word	0x08007ddd
 8007d78:	08007e6f 	.word	0x08007e6f
 8007d7c:	08007d2d 	.word	0x08007d2d
 8007d80:	08007d2d 	.word	0x08007d2d
 8007d84:	08007ed7 	.word	0x08007ed7
 8007d88:	08007d2d 	.word	0x08007d2d
 8007d8c:	08007ddd 	.word	0x08007ddd
 8007d90:	08007d2d 	.word	0x08007d2d
 8007d94:	08007d2d 	.word	0x08007d2d
 8007d98:	08007e77 	.word	0x08007e77
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	1d1a      	adds	r2, r3, #4
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	602a      	str	r2, [r5, #0]
 8007da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dac:	2301      	movs	r3, #1
 8007dae:	e09f      	b.n	8007ef0 <_printf_i+0x1ec>
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	682b      	ldr	r3, [r5, #0]
 8007db4:	0607      	lsls	r7, r0, #24
 8007db6:	f103 0104 	add.w	r1, r3, #4
 8007dba:	6029      	str	r1, [r5, #0]
 8007dbc:	d501      	bpl.n	8007dc2 <_printf_i+0xbe>
 8007dbe:	681e      	ldr	r6, [r3, #0]
 8007dc0:	e003      	b.n	8007dca <_printf_i+0xc6>
 8007dc2:	0646      	lsls	r6, r0, #25
 8007dc4:	d5fb      	bpl.n	8007dbe <_printf_i+0xba>
 8007dc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007dca:	2e00      	cmp	r6, #0
 8007dcc:	da03      	bge.n	8007dd6 <_printf_i+0xd2>
 8007dce:	232d      	movs	r3, #45	; 0x2d
 8007dd0:	4276      	negs	r6, r6
 8007dd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd6:	485a      	ldr	r0, [pc, #360]	; (8007f40 <_printf_i+0x23c>)
 8007dd8:	230a      	movs	r3, #10
 8007dda:	e012      	b.n	8007e02 <_printf_i+0xfe>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	6820      	ldr	r0, [r4, #0]
 8007de0:	1d19      	adds	r1, r3, #4
 8007de2:	6029      	str	r1, [r5, #0]
 8007de4:	0605      	lsls	r5, r0, #24
 8007de6:	d501      	bpl.n	8007dec <_printf_i+0xe8>
 8007de8:	681e      	ldr	r6, [r3, #0]
 8007dea:	e002      	b.n	8007df2 <_printf_i+0xee>
 8007dec:	0641      	lsls	r1, r0, #25
 8007dee:	d5fb      	bpl.n	8007de8 <_printf_i+0xe4>
 8007df0:	881e      	ldrh	r6, [r3, #0]
 8007df2:	4853      	ldr	r0, [pc, #332]	; (8007f40 <_printf_i+0x23c>)
 8007df4:	2f6f      	cmp	r7, #111	; 0x6f
 8007df6:	bf0c      	ite	eq
 8007df8:	2308      	moveq	r3, #8
 8007dfa:	230a      	movne	r3, #10
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e02:	6865      	ldr	r5, [r4, #4]
 8007e04:	60a5      	str	r5, [r4, #8]
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	bfa2      	ittt	ge
 8007e0a:	6821      	ldrge	r1, [r4, #0]
 8007e0c:	f021 0104 	bicge.w	r1, r1, #4
 8007e10:	6021      	strge	r1, [r4, #0]
 8007e12:	b90e      	cbnz	r6, 8007e18 <_printf_i+0x114>
 8007e14:	2d00      	cmp	r5, #0
 8007e16:	d04b      	beq.n	8007eb0 <_printf_i+0x1ac>
 8007e18:	4615      	mov	r5, r2
 8007e1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e1e:	fb03 6711 	mls	r7, r3, r1, r6
 8007e22:	5dc7      	ldrb	r7, [r0, r7]
 8007e24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e28:	4637      	mov	r7, r6
 8007e2a:	42bb      	cmp	r3, r7
 8007e2c:	460e      	mov	r6, r1
 8007e2e:	d9f4      	bls.n	8007e1a <_printf_i+0x116>
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d10b      	bne.n	8007e4c <_printf_i+0x148>
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	07de      	lsls	r6, r3, #31
 8007e38:	d508      	bpl.n	8007e4c <_printf_i+0x148>
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	6861      	ldr	r1, [r4, #4]
 8007e3e:	4299      	cmp	r1, r3
 8007e40:	bfde      	ittt	le
 8007e42:	2330      	movle	r3, #48	; 0x30
 8007e44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e4c:	1b52      	subs	r2, r2, r5
 8007e4e:	6122      	str	r2, [r4, #16]
 8007e50:	f8cd a000 	str.w	sl, [sp]
 8007e54:	464b      	mov	r3, r9
 8007e56:	aa03      	add	r2, sp, #12
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	f7ff fee4 	bl	8007c28 <_printf_common>
 8007e60:	3001      	adds	r0, #1
 8007e62:	d14a      	bne.n	8007efa <_printf_i+0x1f6>
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	b004      	add	sp, #16
 8007e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	f043 0320 	orr.w	r3, r3, #32
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	4833      	ldr	r0, [pc, #204]	; (8007f44 <_printf_i+0x240>)
 8007e78:	2778      	movs	r7, #120	; 0x78
 8007e7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	6829      	ldr	r1, [r5, #0]
 8007e82:	061f      	lsls	r7, r3, #24
 8007e84:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e88:	d402      	bmi.n	8007e90 <_printf_i+0x18c>
 8007e8a:	065f      	lsls	r7, r3, #25
 8007e8c:	bf48      	it	mi
 8007e8e:	b2b6      	uxthmi	r6, r6
 8007e90:	07df      	lsls	r7, r3, #31
 8007e92:	bf48      	it	mi
 8007e94:	f043 0320 	orrmi.w	r3, r3, #32
 8007e98:	6029      	str	r1, [r5, #0]
 8007e9a:	bf48      	it	mi
 8007e9c:	6023      	strmi	r3, [r4, #0]
 8007e9e:	b91e      	cbnz	r6, 8007ea8 <_printf_i+0x1a4>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	f023 0320 	bic.w	r3, r3, #32
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	2310      	movs	r3, #16
 8007eaa:	e7a7      	b.n	8007dfc <_printf_i+0xf8>
 8007eac:	4824      	ldr	r0, [pc, #144]	; (8007f40 <_printf_i+0x23c>)
 8007eae:	e7e4      	b.n	8007e7a <_printf_i+0x176>
 8007eb0:	4615      	mov	r5, r2
 8007eb2:	e7bd      	b.n	8007e30 <_printf_i+0x12c>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	6826      	ldr	r6, [r4, #0]
 8007eb8:	6961      	ldr	r1, [r4, #20]
 8007eba:	1d18      	adds	r0, r3, #4
 8007ebc:	6028      	str	r0, [r5, #0]
 8007ebe:	0635      	lsls	r5, r6, #24
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	d501      	bpl.n	8007ec8 <_printf_i+0x1c4>
 8007ec4:	6019      	str	r1, [r3, #0]
 8007ec6:	e002      	b.n	8007ece <_printf_i+0x1ca>
 8007ec8:	0670      	lsls	r0, r6, #25
 8007eca:	d5fb      	bpl.n	8007ec4 <_printf_i+0x1c0>
 8007ecc:	8019      	strh	r1, [r3, #0]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	6123      	str	r3, [r4, #16]
 8007ed2:	4615      	mov	r5, r2
 8007ed4:	e7bc      	b.n	8007e50 <_printf_i+0x14c>
 8007ed6:	682b      	ldr	r3, [r5, #0]
 8007ed8:	1d1a      	adds	r2, r3, #4
 8007eda:	602a      	str	r2, [r5, #0]
 8007edc:	681d      	ldr	r5, [r3, #0]
 8007ede:	6862      	ldr	r2, [r4, #4]
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	f7f8 f9c4 	bl	8000270 <memchr>
 8007ee8:	b108      	cbz	r0, 8007eee <_printf_i+0x1ea>
 8007eea:	1b40      	subs	r0, r0, r5
 8007eec:	6060      	str	r0, [r4, #4]
 8007eee:	6863      	ldr	r3, [r4, #4]
 8007ef0:	6123      	str	r3, [r4, #16]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef8:	e7aa      	b.n	8007e50 <_printf_i+0x14c>
 8007efa:	6923      	ldr	r3, [r4, #16]
 8007efc:	462a      	mov	r2, r5
 8007efe:	4649      	mov	r1, r9
 8007f00:	4640      	mov	r0, r8
 8007f02:	47d0      	blx	sl
 8007f04:	3001      	adds	r0, #1
 8007f06:	d0ad      	beq.n	8007e64 <_printf_i+0x160>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	079b      	lsls	r3, r3, #30
 8007f0c:	d413      	bmi.n	8007f36 <_printf_i+0x232>
 8007f0e:	68e0      	ldr	r0, [r4, #12]
 8007f10:	9b03      	ldr	r3, [sp, #12]
 8007f12:	4298      	cmp	r0, r3
 8007f14:	bfb8      	it	lt
 8007f16:	4618      	movlt	r0, r3
 8007f18:	e7a6      	b.n	8007e68 <_printf_i+0x164>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4649      	mov	r1, r9
 8007f20:	4640      	mov	r0, r8
 8007f22:	47d0      	blx	sl
 8007f24:	3001      	adds	r0, #1
 8007f26:	d09d      	beq.n	8007e64 <_printf_i+0x160>
 8007f28:	3501      	adds	r5, #1
 8007f2a:	68e3      	ldr	r3, [r4, #12]
 8007f2c:	9903      	ldr	r1, [sp, #12]
 8007f2e:	1a5b      	subs	r3, r3, r1
 8007f30:	42ab      	cmp	r3, r5
 8007f32:	dcf2      	bgt.n	8007f1a <_printf_i+0x216>
 8007f34:	e7eb      	b.n	8007f0e <_printf_i+0x20a>
 8007f36:	2500      	movs	r5, #0
 8007f38:	f104 0619 	add.w	r6, r4, #25
 8007f3c:	e7f5      	b.n	8007f2a <_printf_i+0x226>
 8007f3e:	bf00      	nop
 8007f40:	0800891a 	.word	0x0800891a
 8007f44:	0800892b 	.word	0x0800892b

08007f48 <__sflush_r>:
 8007f48:	898a      	ldrh	r2, [r1, #12]
 8007f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4e:	4605      	mov	r5, r0
 8007f50:	0710      	lsls	r0, r2, #28
 8007f52:	460c      	mov	r4, r1
 8007f54:	d458      	bmi.n	8008008 <__sflush_r+0xc0>
 8007f56:	684b      	ldr	r3, [r1, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	dc05      	bgt.n	8007f68 <__sflush_r+0x20>
 8007f5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	dc02      	bgt.n	8007f68 <__sflush_r+0x20>
 8007f62:	2000      	movs	r0, #0
 8007f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f6a:	2e00      	cmp	r6, #0
 8007f6c:	d0f9      	beq.n	8007f62 <__sflush_r+0x1a>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f74:	682f      	ldr	r7, [r5, #0]
 8007f76:	6a21      	ldr	r1, [r4, #32]
 8007f78:	602b      	str	r3, [r5, #0]
 8007f7a:	d032      	beq.n	8007fe2 <__sflush_r+0x9a>
 8007f7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	075a      	lsls	r2, r3, #29
 8007f82:	d505      	bpl.n	8007f90 <__sflush_r+0x48>
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	1ac0      	subs	r0, r0, r3
 8007f88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f8a:	b10b      	cbz	r3, 8007f90 <__sflush_r+0x48>
 8007f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f8e:	1ac0      	subs	r0, r0, r3
 8007f90:	2300      	movs	r3, #0
 8007f92:	4602      	mov	r2, r0
 8007f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f96:	6a21      	ldr	r1, [r4, #32]
 8007f98:	4628      	mov	r0, r5
 8007f9a:	47b0      	blx	r6
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	d106      	bne.n	8007fb0 <__sflush_r+0x68>
 8007fa2:	6829      	ldr	r1, [r5, #0]
 8007fa4:	291d      	cmp	r1, #29
 8007fa6:	d82b      	bhi.n	8008000 <__sflush_r+0xb8>
 8007fa8:	4a29      	ldr	r2, [pc, #164]	; (8008050 <__sflush_r+0x108>)
 8007faa:	410a      	asrs	r2, r1
 8007fac:	07d6      	lsls	r6, r2, #31
 8007fae:	d427      	bmi.n	8008000 <__sflush_r+0xb8>
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	6062      	str	r2, [r4, #4]
 8007fb4:	04d9      	lsls	r1, r3, #19
 8007fb6:	6922      	ldr	r2, [r4, #16]
 8007fb8:	6022      	str	r2, [r4, #0]
 8007fba:	d504      	bpl.n	8007fc6 <__sflush_r+0x7e>
 8007fbc:	1c42      	adds	r2, r0, #1
 8007fbe:	d101      	bne.n	8007fc4 <__sflush_r+0x7c>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b903      	cbnz	r3, 8007fc6 <__sflush_r+0x7e>
 8007fc4:	6560      	str	r0, [r4, #84]	; 0x54
 8007fc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fc8:	602f      	str	r7, [r5, #0]
 8007fca:	2900      	cmp	r1, #0
 8007fcc:	d0c9      	beq.n	8007f62 <__sflush_r+0x1a>
 8007fce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	d002      	beq.n	8007fdc <__sflush_r+0x94>
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f7ff fbce 	bl	8007778 <_free_r>
 8007fdc:	2000      	movs	r0, #0
 8007fde:	6360      	str	r0, [r4, #52]	; 0x34
 8007fe0:	e7c0      	b.n	8007f64 <__sflush_r+0x1c>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b0      	blx	r6
 8007fe8:	1c41      	adds	r1, r0, #1
 8007fea:	d1c8      	bne.n	8007f7e <__sflush_r+0x36>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0c5      	beq.n	8007f7e <__sflush_r+0x36>
 8007ff2:	2b1d      	cmp	r3, #29
 8007ff4:	d001      	beq.n	8007ffa <__sflush_r+0xb2>
 8007ff6:	2b16      	cmp	r3, #22
 8007ff8:	d101      	bne.n	8007ffe <__sflush_r+0xb6>
 8007ffa:	602f      	str	r7, [r5, #0]
 8007ffc:	e7b1      	b.n	8007f62 <__sflush_r+0x1a>
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008004:	81a3      	strh	r3, [r4, #12]
 8008006:	e7ad      	b.n	8007f64 <__sflush_r+0x1c>
 8008008:	690f      	ldr	r7, [r1, #16]
 800800a:	2f00      	cmp	r7, #0
 800800c:	d0a9      	beq.n	8007f62 <__sflush_r+0x1a>
 800800e:	0793      	lsls	r3, r2, #30
 8008010:	680e      	ldr	r6, [r1, #0]
 8008012:	bf08      	it	eq
 8008014:	694b      	ldreq	r3, [r1, #20]
 8008016:	600f      	str	r7, [r1, #0]
 8008018:	bf18      	it	ne
 800801a:	2300      	movne	r3, #0
 800801c:	eba6 0807 	sub.w	r8, r6, r7
 8008020:	608b      	str	r3, [r1, #8]
 8008022:	f1b8 0f00 	cmp.w	r8, #0
 8008026:	dd9c      	ble.n	8007f62 <__sflush_r+0x1a>
 8008028:	6a21      	ldr	r1, [r4, #32]
 800802a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800802c:	4643      	mov	r3, r8
 800802e:	463a      	mov	r2, r7
 8008030:	4628      	mov	r0, r5
 8008032:	47b0      	blx	r6
 8008034:	2800      	cmp	r0, #0
 8008036:	dc06      	bgt.n	8008046 <__sflush_r+0xfe>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	f04f 30ff 	mov.w	r0, #4294967295
 8008044:	e78e      	b.n	8007f64 <__sflush_r+0x1c>
 8008046:	4407      	add	r7, r0
 8008048:	eba8 0800 	sub.w	r8, r8, r0
 800804c:	e7e9      	b.n	8008022 <__sflush_r+0xda>
 800804e:	bf00      	nop
 8008050:	dfbffffe 	.word	0xdfbffffe

08008054 <_fflush_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	690b      	ldr	r3, [r1, #16]
 8008058:	4605      	mov	r5, r0
 800805a:	460c      	mov	r4, r1
 800805c:	b913      	cbnz	r3, 8008064 <_fflush_r+0x10>
 800805e:	2500      	movs	r5, #0
 8008060:	4628      	mov	r0, r5
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	b118      	cbz	r0, 800806e <_fflush_r+0x1a>
 8008066:	6a03      	ldr	r3, [r0, #32]
 8008068:	b90b      	cbnz	r3, 800806e <_fflush_r+0x1a>
 800806a:	f7ff fa45 	bl	80074f8 <__sinit>
 800806e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0f3      	beq.n	800805e <_fflush_r+0xa>
 8008076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008078:	07d0      	lsls	r0, r2, #31
 800807a:	d404      	bmi.n	8008086 <_fflush_r+0x32>
 800807c:	0599      	lsls	r1, r3, #22
 800807e:	d402      	bmi.n	8008086 <_fflush_r+0x32>
 8008080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008082:	f7ff fb4a 	bl	800771a <__retarget_lock_acquire_recursive>
 8008086:	4628      	mov	r0, r5
 8008088:	4621      	mov	r1, r4
 800808a:	f7ff ff5d 	bl	8007f48 <__sflush_r>
 800808e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008090:	07da      	lsls	r2, r3, #31
 8008092:	4605      	mov	r5, r0
 8008094:	d4e4      	bmi.n	8008060 <_fflush_r+0xc>
 8008096:	89a3      	ldrh	r3, [r4, #12]
 8008098:	059b      	lsls	r3, r3, #22
 800809a:	d4e1      	bmi.n	8008060 <_fflush_r+0xc>
 800809c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800809e:	f7ff fb3d 	bl	800771c <__retarget_lock_release_recursive>
 80080a2:	e7dd      	b.n	8008060 <_fflush_r+0xc>

080080a4 <fiprintf>:
 80080a4:	b40e      	push	{r1, r2, r3}
 80080a6:	b503      	push	{r0, r1, lr}
 80080a8:	4601      	mov	r1, r0
 80080aa:	ab03      	add	r3, sp, #12
 80080ac:	4805      	ldr	r0, [pc, #20]	; (80080c4 <fiprintf+0x20>)
 80080ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b2:	6800      	ldr	r0, [r0, #0]
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	f000 f891 	bl	80081dc <_vfiprintf_r>
 80080ba:	b002      	add	sp, #8
 80080bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80080c0:	b003      	add	sp, #12
 80080c2:	4770      	bx	lr
 80080c4:	2000006c 	.word	0x2000006c

080080c8 <memmove>:
 80080c8:	4288      	cmp	r0, r1
 80080ca:	b510      	push	{r4, lr}
 80080cc:	eb01 0402 	add.w	r4, r1, r2
 80080d0:	d902      	bls.n	80080d8 <memmove+0x10>
 80080d2:	4284      	cmp	r4, r0
 80080d4:	4623      	mov	r3, r4
 80080d6:	d807      	bhi.n	80080e8 <memmove+0x20>
 80080d8:	1e43      	subs	r3, r0, #1
 80080da:	42a1      	cmp	r1, r4
 80080dc:	d008      	beq.n	80080f0 <memmove+0x28>
 80080de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080e6:	e7f8      	b.n	80080da <memmove+0x12>
 80080e8:	4402      	add	r2, r0
 80080ea:	4601      	mov	r1, r0
 80080ec:	428a      	cmp	r2, r1
 80080ee:	d100      	bne.n	80080f2 <memmove+0x2a>
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080fa:	e7f7      	b.n	80080ec <memmove+0x24>

080080fc <_sbrk_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	4d06      	ldr	r5, [pc, #24]	; (8008118 <_sbrk_r+0x1c>)
 8008100:	2300      	movs	r3, #0
 8008102:	4604      	mov	r4, r0
 8008104:	4608      	mov	r0, r1
 8008106:	602b      	str	r3, [r5, #0]
 8008108:	f000 fae8 	bl	80086dc <_sbrk>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_sbrk_r+0x1a>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_sbrk_r+0x1a>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	20019b88 	.word	0x20019b88

0800811c <abort>:
 800811c:	b508      	push	{r3, lr}
 800811e:	2006      	movs	r0, #6
 8008120:	f000 fa34 	bl	800858c <raise>
 8008124:	2001      	movs	r0, #1
 8008126:	f7f8 feb7 	bl	8000e98 <_exit>

0800812a <_realloc_r>:
 800812a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812e:	4680      	mov	r8, r0
 8008130:	4614      	mov	r4, r2
 8008132:	460e      	mov	r6, r1
 8008134:	b921      	cbnz	r1, 8008140 <_realloc_r+0x16>
 8008136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800813a:	4611      	mov	r1, r2
 800813c:	f7ff bb90 	b.w	8007860 <_malloc_r>
 8008140:	b92a      	cbnz	r2, 800814e <_realloc_r+0x24>
 8008142:	f7ff fb19 	bl	8007778 <_free_r>
 8008146:	4625      	mov	r5, r4
 8008148:	4628      	mov	r0, r5
 800814a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814e:	f000 fa39 	bl	80085c4 <_malloc_usable_size_r>
 8008152:	4284      	cmp	r4, r0
 8008154:	4607      	mov	r7, r0
 8008156:	d802      	bhi.n	800815e <_realloc_r+0x34>
 8008158:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800815c:	d812      	bhi.n	8008184 <_realloc_r+0x5a>
 800815e:	4621      	mov	r1, r4
 8008160:	4640      	mov	r0, r8
 8008162:	f7ff fb7d 	bl	8007860 <_malloc_r>
 8008166:	4605      	mov	r5, r0
 8008168:	2800      	cmp	r0, #0
 800816a:	d0ed      	beq.n	8008148 <_realloc_r+0x1e>
 800816c:	42bc      	cmp	r4, r7
 800816e:	4622      	mov	r2, r4
 8008170:	4631      	mov	r1, r6
 8008172:	bf28      	it	cs
 8008174:	463a      	movcs	r2, r7
 8008176:	f7ff fad2 	bl	800771e <memcpy>
 800817a:	4631      	mov	r1, r6
 800817c:	4640      	mov	r0, r8
 800817e:	f7ff fafb 	bl	8007778 <_free_r>
 8008182:	e7e1      	b.n	8008148 <_realloc_r+0x1e>
 8008184:	4635      	mov	r5, r6
 8008186:	e7df      	b.n	8008148 <_realloc_r+0x1e>

08008188 <__sfputc_r>:
 8008188:	6893      	ldr	r3, [r2, #8]
 800818a:	3b01      	subs	r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	b410      	push	{r4}
 8008190:	6093      	str	r3, [r2, #8]
 8008192:	da08      	bge.n	80081a6 <__sfputc_r+0x1e>
 8008194:	6994      	ldr	r4, [r2, #24]
 8008196:	42a3      	cmp	r3, r4
 8008198:	db01      	blt.n	800819e <__sfputc_r+0x16>
 800819a:	290a      	cmp	r1, #10
 800819c:	d103      	bne.n	80081a6 <__sfputc_r+0x1e>
 800819e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081a2:	f000 b935 	b.w	8008410 <__swbuf_r>
 80081a6:	6813      	ldr	r3, [r2, #0]
 80081a8:	1c58      	adds	r0, r3, #1
 80081aa:	6010      	str	r0, [r2, #0]
 80081ac:	7019      	strb	r1, [r3, #0]
 80081ae:	4608      	mov	r0, r1
 80081b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <__sfputs_r>:
 80081b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b8:	4606      	mov	r6, r0
 80081ba:	460f      	mov	r7, r1
 80081bc:	4614      	mov	r4, r2
 80081be:	18d5      	adds	r5, r2, r3
 80081c0:	42ac      	cmp	r4, r5
 80081c2:	d101      	bne.n	80081c8 <__sfputs_r+0x12>
 80081c4:	2000      	movs	r0, #0
 80081c6:	e007      	b.n	80081d8 <__sfputs_r+0x22>
 80081c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081cc:	463a      	mov	r2, r7
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7ff ffda 	bl	8008188 <__sfputc_r>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d1f3      	bne.n	80081c0 <__sfputs_r+0xa>
 80081d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081dc <_vfiprintf_r>:
 80081dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e0:	460d      	mov	r5, r1
 80081e2:	b09d      	sub	sp, #116	; 0x74
 80081e4:	4614      	mov	r4, r2
 80081e6:	4698      	mov	r8, r3
 80081e8:	4606      	mov	r6, r0
 80081ea:	b118      	cbz	r0, 80081f4 <_vfiprintf_r+0x18>
 80081ec:	6a03      	ldr	r3, [r0, #32]
 80081ee:	b90b      	cbnz	r3, 80081f4 <_vfiprintf_r+0x18>
 80081f0:	f7ff f982 	bl	80074f8 <__sinit>
 80081f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081f6:	07d9      	lsls	r1, r3, #31
 80081f8:	d405      	bmi.n	8008206 <_vfiprintf_r+0x2a>
 80081fa:	89ab      	ldrh	r3, [r5, #12]
 80081fc:	059a      	lsls	r2, r3, #22
 80081fe:	d402      	bmi.n	8008206 <_vfiprintf_r+0x2a>
 8008200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008202:	f7ff fa8a 	bl	800771a <__retarget_lock_acquire_recursive>
 8008206:	89ab      	ldrh	r3, [r5, #12]
 8008208:	071b      	lsls	r3, r3, #28
 800820a:	d501      	bpl.n	8008210 <_vfiprintf_r+0x34>
 800820c:	692b      	ldr	r3, [r5, #16]
 800820e:	b99b      	cbnz	r3, 8008238 <_vfiprintf_r+0x5c>
 8008210:	4629      	mov	r1, r5
 8008212:	4630      	mov	r0, r6
 8008214:	f000 f93a 	bl	800848c <__swsetup_r>
 8008218:	b170      	cbz	r0, 8008238 <_vfiprintf_r+0x5c>
 800821a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800821c:	07dc      	lsls	r4, r3, #31
 800821e:	d504      	bpl.n	800822a <_vfiprintf_r+0x4e>
 8008220:	f04f 30ff 	mov.w	r0, #4294967295
 8008224:	b01d      	add	sp, #116	; 0x74
 8008226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822a:	89ab      	ldrh	r3, [r5, #12]
 800822c:	0598      	lsls	r0, r3, #22
 800822e:	d4f7      	bmi.n	8008220 <_vfiprintf_r+0x44>
 8008230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008232:	f7ff fa73 	bl	800771c <__retarget_lock_release_recursive>
 8008236:	e7f3      	b.n	8008220 <_vfiprintf_r+0x44>
 8008238:	2300      	movs	r3, #0
 800823a:	9309      	str	r3, [sp, #36]	; 0x24
 800823c:	2320      	movs	r3, #32
 800823e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008242:	f8cd 800c 	str.w	r8, [sp, #12]
 8008246:	2330      	movs	r3, #48	; 0x30
 8008248:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80083fc <_vfiprintf_r+0x220>
 800824c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008250:	f04f 0901 	mov.w	r9, #1
 8008254:	4623      	mov	r3, r4
 8008256:	469a      	mov	sl, r3
 8008258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800825c:	b10a      	cbz	r2, 8008262 <_vfiprintf_r+0x86>
 800825e:	2a25      	cmp	r2, #37	; 0x25
 8008260:	d1f9      	bne.n	8008256 <_vfiprintf_r+0x7a>
 8008262:	ebba 0b04 	subs.w	fp, sl, r4
 8008266:	d00b      	beq.n	8008280 <_vfiprintf_r+0xa4>
 8008268:	465b      	mov	r3, fp
 800826a:	4622      	mov	r2, r4
 800826c:	4629      	mov	r1, r5
 800826e:	4630      	mov	r0, r6
 8008270:	f7ff ffa1 	bl	80081b6 <__sfputs_r>
 8008274:	3001      	adds	r0, #1
 8008276:	f000 80a9 	beq.w	80083cc <_vfiprintf_r+0x1f0>
 800827a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800827c:	445a      	add	r2, fp
 800827e:	9209      	str	r2, [sp, #36]	; 0x24
 8008280:	f89a 3000 	ldrb.w	r3, [sl]
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 80a1 	beq.w	80083cc <_vfiprintf_r+0x1f0>
 800828a:	2300      	movs	r3, #0
 800828c:	f04f 32ff 	mov.w	r2, #4294967295
 8008290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008294:	f10a 0a01 	add.w	sl, sl, #1
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	9307      	str	r3, [sp, #28]
 800829c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082a0:	931a      	str	r3, [sp, #104]	; 0x68
 80082a2:	4654      	mov	r4, sl
 80082a4:	2205      	movs	r2, #5
 80082a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082aa:	4854      	ldr	r0, [pc, #336]	; (80083fc <_vfiprintf_r+0x220>)
 80082ac:	f7f7 ffe0 	bl	8000270 <memchr>
 80082b0:	9a04      	ldr	r2, [sp, #16]
 80082b2:	b9d8      	cbnz	r0, 80082ec <_vfiprintf_r+0x110>
 80082b4:	06d1      	lsls	r1, r2, #27
 80082b6:	bf44      	itt	mi
 80082b8:	2320      	movmi	r3, #32
 80082ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082be:	0713      	lsls	r3, r2, #28
 80082c0:	bf44      	itt	mi
 80082c2:	232b      	movmi	r3, #43	; 0x2b
 80082c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082c8:	f89a 3000 	ldrb.w	r3, [sl]
 80082cc:	2b2a      	cmp	r3, #42	; 0x2a
 80082ce:	d015      	beq.n	80082fc <_vfiprintf_r+0x120>
 80082d0:	9a07      	ldr	r2, [sp, #28]
 80082d2:	4654      	mov	r4, sl
 80082d4:	2000      	movs	r0, #0
 80082d6:	f04f 0c0a 	mov.w	ip, #10
 80082da:	4621      	mov	r1, r4
 80082dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082e0:	3b30      	subs	r3, #48	; 0x30
 80082e2:	2b09      	cmp	r3, #9
 80082e4:	d94d      	bls.n	8008382 <_vfiprintf_r+0x1a6>
 80082e6:	b1b0      	cbz	r0, 8008316 <_vfiprintf_r+0x13a>
 80082e8:	9207      	str	r2, [sp, #28]
 80082ea:	e014      	b.n	8008316 <_vfiprintf_r+0x13a>
 80082ec:	eba0 0308 	sub.w	r3, r0, r8
 80082f0:	fa09 f303 	lsl.w	r3, r9, r3
 80082f4:	4313      	orrs	r3, r2
 80082f6:	9304      	str	r3, [sp, #16]
 80082f8:	46a2      	mov	sl, r4
 80082fa:	e7d2      	b.n	80082a2 <_vfiprintf_r+0xc6>
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	1d19      	adds	r1, r3, #4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	9103      	str	r1, [sp, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	bfbb      	ittet	lt
 8008308:	425b      	neglt	r3, r3
 800830a:	f042 0202 	orrlt.w	r2, r2, #2
 800830e:	9307      	strge	r3, [sp, #28]
 8008310:	9307      	strlt	r3, [sp, #28]
 8008312:	bfb8      	it	lt
 8008314:	9204      	strlt	r2, [sp, #16]
 8008316:	7823      	ldrb	r3, [r4, #0]
 8008318:	2b2e      	cmp	r3, #46	; 0x2e
 800831a:	d10c      	bne.n	8008336 <_vfiprintf_r+0x15a>
 800831c:	7863      	ldrb	r3, [r4, #1]
 800831e:	2b2a      	cmp	r3, #42	; 0x2a
 8008320:	d134      	bne.n	800838c <_vfiprintf_r+0x1b0>
 8008322:	9b03      	ldr	r3, [sp, #12]
 8008324:	1d1a      	adds	r2, r3, #4
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	9203      	str	r2, [sp, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	bfb8      	it	lt
 800832e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008332:	3402      	adds	r4, #2
 8008334:	9305      	str	r3, [sp, #20]
 8008336:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800840c <_vfiprintf_r+0x230>
 800833a:	7821      	ldrb	r1, [r4, #0]
 800833c:	2203      	movs	r2, #3
 800833e:	4650      	mov	r0, sl
 8008340:	f7f7 ff96 	bl	8000270 <memchr>
 8008344:	b138      	cbz	r0, 8008356 <_vfiprintf_r+0x17a>
 8008346:	9b04      	ldr	r3, [sp, #16]
 8008348:	eba0 000a 	sub.w	r0, r0, sl
 800834c:	2240      	movs	r2, #64	; 0x40
 800834e:	4082      	lsls	r2, r0
 8008350:	4313      	orrs	r3, r2
 8008352:	3401      	adds	r4, #1
 8008354:	9304      	str	r3, [sp, #16]
 8008356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835a:	4829      	ldr	r0, [pc, #164]	; (8008400 <_vfiprintf_r+0x224>)
 800835c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008360:	2206      	movs	r2, #6
 8008362:	f7f7 ff85 	bl	8000270 <memchr>
 8008366:	2800      	cmp	r0, #0
 8008368:	d03f      	beq.n	80083ea <_vfiprintf_r+0x20e>
 800836a:	4b26      	ldr	r3, [pc, #152]	; (8008404 <_vfiprintf_r+0x228>)
 800836c:	bb1b      	cbnz	r3, 80083b6 <_vfiprintf_r+0x1da>
 800836e:	9b03      	ldr	r3, [sp, #12]
 8008370:	3307      	adds	r3, #7
 8008372:	f023 0307 	bic.w	r3, r3, #7
 8008376:	3308      	adds	r3, #8
 8008378:	9303      	str	r3, [sp, #12]
 800837a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800837c:	443b      	add	r3, r7
 800837e:	9309      	str	r3, [sp, #36]	; 0x24
 8008380:	e768      	b.n	8008254 <_vfiprintf_r+0x78>
 8008382:	fb0c 3202 	mla	r2, ip, r2, r3
 8008386:	460c      	mov	r4, r1
 8008388:	2001      	movs	r0, #1
 800838a:	e7a6      	b.n	80082da <_vfiprintf_r+0xfe>
 800838c:	2300      	movs	r3, #0
 800838e:	3401      	adds	r4, #1
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	4619      	mov	r1, r3
 8008394:	f04f 0c0a 	mov.w	ip, #10
 8008398:	4620      	mov	r0, r4
 800839a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800839e:	3a30      	subs	r2, #48	; 0x30
 80083a0:	2a09      	cmp	r2, #9
 80083a2:	d903      	bls.n	80083ac <_vfiprintf_r+0x1d0>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d0c6      	beq.n	8008336 <_vfiprintf_r+0x15a>
 80083a8:	9105      	str	r1, [sp, #20]
 80083aa:	e7c4      	b.n	8008336 <_vfiprintf_r+0x15a>
 80083ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80083b0:	4604      	mov	r4, r0
 80083b2:	2301      	movs	r3, #1
 80083b4:	e7f0      	b.n	8008398 <_vfiprintf_r+0x1bc>
 80083b6:	ab03      	add	r3, sp, #12
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	462a      	mov	r2, r5
 80083bc:	4b12      	ldr	r3, [pc, #72]	; (8008408 <_vfiprintf_r+0x22c>)
 80083be:	a904      	add	r1, sp, #16
 80083c0:	4630      	mov	r0, r6
 80083c2:	f3af 8000 	nop.w
 80083c6:	4607      	mov	r7, r0
 80083c8:	1c78      	adds	r0, r7, #1
 80083ca:	d1d6      	bne.n	800837a <_vfiprintf_r+0x19e>
 80083cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ce:	07d9      	lsls	r1, r3, #31
 80083d0:	d405      	bmi.n	80083de <_vfiprintf_r+0x202>
 80083d2:	89ab      	ldrh	r3, [r5, #12]
 80083d4:	059a      	lsls	r2, r3, #22
 80083d6:	d402      	bmi.n	80083de <_vfiprintf_r+0x202>
 80083d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083da:	f7ff f99f 	bl	800771c <__retarget_lock_release_recursive>
 80083de:	89ab      	ldrh	r3, [r5, #12]
 80083e0:	065b      	lsls	r3, r3, #25
 80083e2:	f53f af1d 	bmi.w	8008220 <_vfiprintf_r+0x44>
 80083e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083e8:	e71c      	b.n	8008224 <_vfiprintf_r+0x48>
 80083ea:	ab03      	add	r3, sp, #12
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	462a      	mov	r2, r5
 80083f0:	4b05      	ldr	r3, [pc, #20]	; (8008408 <_vfiprintf_r+0x22c>)
 80083f2:	a904      	add	r1, sp, #16
 80083f4:	4630      	mov	r0, r6
 80083f6:	f7ff fc85 	bl	8007d04 <_printf_i>
 80083fa:	e7e4      	b.n	80083c6 <_vfiprintf_r+0x1ea>
 80083fc:	08008909 	.word	0x08008909
 8008400:	08008913 	.word	0x08008913
 8008404:	00000000 	.word	0x00000000
 8008408:	080081b7 	.word	0x080081b7
 800840c:	0800890f 	.word	0x0800890f

08008410 <__swbuf_r>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	460e      	mov	r6, r1
 8008414:	4614      	mov	r4, r2
 8008416:	4605      	mov	r5, r0
 8008418:	b118      	cbz	r0, 8008422 <__swbuf_r+0x12>
 800841a:	6a03      	ldr	r3, [r0, #32]
 800841c:	b90b      	cbnz	r3, 8008422 <__swbuf_r+0x12>
 800841e:	f7ff f86b 	bl	80074f8 <__sinit>
 8008422:	69a3      	ldr	r3, [r4, #24]
 8008424:	60a3      	str	r3, [r4, #8]
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	071a      	lsls	r2, r3, #28
 800842a:	d525      	bpl.n	8008478 <__swbuf_r+0x68>
 800842c:	6923      	ldr	r3, [r4, #16]
 800842e:	b31b      	cbz	r3, 8008478 <__swbuf_r+0x68>
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	6922      	ldr	r2, [r4, #16]
 8008434:	1a98      	subs	r0, r3, r2
 8008436:	6963      	ldr	r3, [r4, #20]
 8008438:	b2f6      	uxtb	r6, r6
 800843a:	4283      	cmp	r3, r0
 800843c:	4637      	mov	r7, r6
 800843e:	dc04      	bgt.n	800844a <__swbuf_r+0x3a>
 8008440:	4621      	mov	r1, r4
 8008442:	4628      	mov	r0, r5
 8008444:	f7ff fe06 	bl	8008054 <_fflush_r>
 8008448:	b9e0      	cbnz	r0, 8008484 <__swbuf_r+0x74>
 800844a:	68a3      	ldr	r3, [r4, #8]
 800844c:	3b01      	subs	r3, #1
 800844e:	60a3      	str	r3, [r4, #8]
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	6022      	str	r2, [r4, #0]
 8008456:	701e      	strb	r6, [r3, #0]
 8008458:	6962      	ldr	r2, [r4, #20]
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	429a      	cmp	r2, r3
 800845e:	d004      	beq.n	800846a <__swbuf_r+0x5a>
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	07db      	lsls	r3, r3, #31
 8008464:	d506      	bpl.n	8008474 <__swbuf_r+0x64>
 8008466:	2e0a      	cmp	r6, #10
 8008468:	d104      	bne.n	8008474 <__swbuf_r+0x64>
 800846a:	4621      	mov	r1, r4
 800846c:	4628      	mov	r0, r5
 800846e:	f7ff fdf1 	bl	8008054 <_fflush_r>
 8008472:	b938      	cbnz	r0, 8008484 <__swbuf_r+0x74>
 8008474:	4638      	mov	r0, r7
 8008476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008478:	4621      	mov	r1, r4
 800847a:	4628      	mov	r0, r5
 800847c:	f000 f806 	bl	800848c <__swsetup_r>
 8008480:	2800      	cmp	r0, #0
 8008482:	d0d5      	beq.n	8008430 <__swbuf_r+0x20>
 8008484:	f04f 37ff 	mov.w	r7, #4294967295
 8008488:	e7f4      	b.n	8008474 <__swbuf_r+0x64>
	...

0800848c <__swsetup_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4b2a      	ldr	r3, [pc, #168]	; (8008538 <__swsetup_r+0xac>)
 8008490:	4605      	mov	r5, r0
 8008492:	6818      	ldr	r0, [r3, #0]
 8008494:	460c      	mov	r4, r1
 8008496:	b118      	cbz	r0, 80084a0 <__swsetup_r+0x14>
 8008498:	6a03      	ldr	r3, [r0, #32]
 800849a:	b90b      	cbnz	r3, 80084a0 <__swsetup_r+0x14>
 800849c:	f7ff f82c 	bl	80074f8 <__sinit>
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084a6:	0718      	lsls	r0, r3, #28
 80084a8:	d422      	bmi.n	80084f0 <__swsetup_r+0x64>
 80084aa:	06d9      	lsls	r1, r3, #27
 80084ac:	d407      	bmi.n	80084be <__swsetup_r+0x32>
 80084ae:	2309      	movs	r3, #9
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084b6:	81a3      	strh	r3, [r4, #12]
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295
 80084bc:	e034      	b.n	8008528 <__swsetup_r+0x9c>
 80084be:	0758      	lsls	r0, r3, #29
 80084c0:	d512      	bpl.n	80084e8 <__swsetup_r+0x5c>
 80084c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084c4:	b141      	cbz	r1, 80084d8 <__swsetup_r+0x4c>
 80084c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084ca:	4299      	cmp	r1, r3
 80084cc:	d002      	beq.n	80084d4 <__swsetup_r+0x48>
 80084ce:	4628      	mov	r0, r5
 80084d0:	f7ff f952 	bl	8007778 <_free_r>
 80084d4:	2300      	movs	r3, #0
 80084d6:	6363      	str	r3, [r4, #52]	; 0x34
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084de:	81a3      	strh	r3, [r4, #12]
 80084e0:	2300      	movs	r3, #0
 80084e2:	6063      	str	r3, [r4, #4]
 80084e4:	6923      	ldr	r3, [r4, #16]
 80084e6:	6023      	str	r3, [r4, #0]
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	f043 0308 	orr.w	r3, r3, #8
 80084ee:	81a3      	strh	r3, [r4, #12]
 80084f0:	6923      	ldr	r3, [r4, #16]
 80084f2:	b94b      	cbnz	r3, 8008508 <__swsetup_r+0x7c>
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084fe:	d003      	beq.n	8008508 <__swsetup_r+0x7c>
 8008500:	4621      	mov	r1, r4
 8008502:	4628      	mov	r0, r5
 8008504:	f000 f88c 	bl	8008620 <__smakebuf_r>
 8008508:	89a0      	ldrh	r0, [r4, #12]
 800850a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800850e:	f010 0301 	ands.w	r3, r0, #1
 8008512:	d00a      	beq.n	800852a <__swsetup_r+0x9e>
 8008514:	2300      	movs	r3, #0
 8008516:	60a3      	str	r3, [r4, #8]
 8008518:	6963      	ldr	r3, [r4, #20]
 800851a:	425b      	negs	r3, r3
 800851c:	61a3      	str	r3, [r4, #24]
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	b943      	cbnz	r3, 8008534 <__swsetup_r+0xa8>
 8008522:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008526:	d1c4      	bne.n	80084b2 <__swsetup_r+0x26>
 8008528:	bd38      	pop	{r3, r4, r5, pc}
 800852a:	0781      	lsls	r1, r0, #30
 800852c:	bf58      	it	pl
 800852e:	6963      	ldrpl	r3, [r4, #20]
 8008530:	60a3      	str	r3, [r4, #8]
 8008532:	e7f4      	b.n	800851e <__swsetup_r+0x92>
 8008534:	2000      	movs	r0, #0
 8008536:	e7f7      	b.n	8008528 <__swsetup_r+0x9c>
 8008538:	2000006c 	.word	0x2000006c

0800853c <_raise_r>:
 800853c:	291f      	cmp	r1, #31
 800853e:	b538      	push	{r3, r4, r5, lr}
 8008540:	4604      	mov	r4, r0
 8008542:	460d      	mov	r5, r1
 8008544:	d904      	bls.n	8008550 <_raise_r+0x14>
 8008546:	2316      	movs	r3, #22
 8008548:	6003      	str	r3, [r0, #0]
 800854a:	f04f 30ff 	mov.w	r0, #4294967295
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008552:	b112      	cbz	r2, 800855a <_raise_r+0x1e>
 8008554:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008558:	b94b      	cbnz	r3, 800856e <_raise_r+0x32>
 800855a:	4620      	mov	r0, r4
 800855c:	f000 f830 	bl	80085c0 <_getpid_r>
 8008560:	462a      	mov	r2, r5
 8008562:	4601      	mov	r1, r0
 8008564:	4620      	mov	r0, r4
 8008566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800856a:	f000 b817 	b.w	800859c <_kill_r>
 800856e:	2b01      	cmp	r3, #1
 8008570:	d00a      	beq.n	8008588 <_raise_r+0x4c>
 8008572:	1c59      	adds	r1, r3, #1
 8008574:	d103      	bne.n	800857e <_raise_r+0x42>
 8008576:	2316      	movs	r3, #22
 8008578:	6003      	str	r3, [r0, #0]
 800857a:	2001      	movs	r0, #1
 800857c:	e7e7      	b.n	800854e <_raise_r+0x12>
 800857e:	2400      	movs	r4, #0
 8008580:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008584:	4628      	mov	r0, r5
 8008586:	4798      	blx	r3
 8008588:	2000      	movs	r0, #0
 800858a:	e7e0      	b.n	800854e <_raise_r+0x12>

0800858c <raise>:
 800858c:	4b02      	ldr	r3, [pc, #8]	; (8008598 <raise+0xc>)
 800858e:	4601      	mov	r1, r0
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	f7ff bfd3 	b.w	800853c <_raise_r>
 8008596:	bf00      	nop
 8008598:	2000006c 	.word	0x2000006c

0800859c <_kill_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4d07      	ldr	r5, [pc, #28]	; (80085bc <_kill_r+0x20>)
 80085a0:	2300      	movs	r3, #0
 80085a2:	4604      	mov	r4, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	4611      	mov	r1, r2
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	f7f8 fc65 	bl	8000e78 <_kill>
 80085ae:	1c43      	adds	r3, r0, #1
 80085b0:	d102      	bne.n	80085b8 <_kill_r+0x1c>
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	b103      	cbz	r3, 80085b8 <_kill_r+0x1c>
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	bd38      	pop	{r3, r4, r5, pc}
 80085ba:	bf00      	nop
 80085bc:	20019b88 	.word	0x20019b88

080085c0 <_getpid_r>:
 80085c0:	f7f8 bc52 	b.w	8000e68 <_getpid>

080085c4 <_malloc_usable_size_r>:
 80085c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085c8:	1f18      	subs	r0, r3, #4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bfbc      	itt	lt
 80085ce:	580b      	ldrlt	r3, [r1, r0]
 80085d0:	18c0      	addlt	r0, r0, r3
 80085d2:	4770      	bx	lr

080085d4 <__swhatbuf_r>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	460c      	mov	r4, r1
 80085d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085dc:	2900      	cmp	r1, #0
 80085de:	b096      	sub	sp, #88	; 0x58
 80085e0:	4615      	mov	r5, r2
 80085e2:	461e      	mov	r6, r3
 80085e4:	da0d      	bge.n	8008602 <__swhatbuf_r+0x2e>
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80085ec:	f04f 0100 	mov.w	r1, #0
 80085f0:	bf0c      	ite	eq
 80085f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80085f6:	2340      	movne	r3, #64	; 0x40
 80085f8:	2000      	movs	r0, #0
 80085fa:	6031      	str	r1, [r6, #0]
 80085fc:	602b      	str	r3, [r5, #0]
 80085fe:	b016      	add	sp, #88	; 0x58
 8008600:	bd70      	pop	{r4, r5, r6, pc}
 8008602:	466a      	mov	r2, sp
 8008604:	f000 f848 	bl	8008698 <_fstat_r>
 8008608:	2800      	cmp	r0, #0
 800860a:	dbec      	blt.n	80085e6 <__swhatbuf_r+0x12>
 800860c:	9901      	ldr	r1, [sp, #4]
 800860e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008612:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008616:	4259      	negs	r1, r3
 8008618:	4159      	adcs	r1, r3
 800861a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800861e:	e7eb      	b.n	80085f8 <__swhatbuf_r+0x24>

08008620 <__smakebuf_r>:
 8008620:	898b      	ldrh	r3, [r1, #12]
 8008622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008624:	079d      	lsls	r5, r3, #30
 8008626:	4606      	mov	r6, r0
 8008628:	460c      	mov	r4, r1
 800862a:	d507      	bpl.n	800863c <__smakebuf_r+0x1c>
 800862c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	6123      	str	r3, [r4, #16]
 8008634:	2301      	movs	r3, #1
 8008636:	6163      	str	r3, [r4, #20]
 8008638:	b002      	add	sp, #8
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	ab01      	add	r3, sp, #4
 800863e:	466a      	mov	r2, sp
 8008640:	f7ff ffc8 	bl	80085d4 <__swhatbuf_r>
 8008644:	9900      	ldr	r1, [sp, #0]
 8008646:	4605      	mov	r5, r0
 8008648:	4630      	mov	r0, r6
 800864a:	f7ff f909 	bl	8007860 <_malloc_r>
 800864e:	b948      	cbnz	r0, 8008664 <__smakebuf_r+0x44>
 8008650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008654:	059a      	lsls	r2, r3, #22
 8008656:	d4ef      	bmi.n	8008638 <__smakebuf_r+0x18>
 8008658:	f023 0303 	bic.w	r3, r3, #3
 800865c:	f043 0302 	orr.w	r3, r3, #2
 8008660:	81a3      	strh	r3, [r4, #12]
 8008662:	e7e3      	b.n	800862c <__smakebuf_r+0xc>
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	6020      	str	r0, [r4, #0]
 8008668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800866c:	81a3      	strh	r3, [r4, #12]
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	6163      	str	r3, [r4, #20]
 8008672:	9b01      	ldr	r3, [sp, #4]
 8008674:	6120      	str	r0, [r4, #16]
 8008676:	b15b      	cbz	r3, 8008690 <__smakebuf_r+0x70>
 8008678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800867c:	4630      	mov	r0, r6
 800867e:	f000 f81d 	bl	80086bc <_isatty_r>
 8008682:	b128      	cbz	r0, 8008690 <__smakebuf_r+0x70>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f023 0303 	bic.w	r3, r3, #3
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	431d      	orrs	r5, r3
 8008694:	81a5      	strh	r5, [r4, #12]
 8008696:	e7cf      	b.n	8008638 <__smakebuf_r+0x18>

08008698 <_fstat_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d07      	ldr	r5, [pc, #28]	; (80086b8 <_fstat_r+0x20>)
 800869c:	2300      	movs	r3, #0
 800869e:	4604      	mov	r4, r0
 80086a0:	4608      	mov	r0, r1
 80086a2:	4611      	mov	r1, r2
 80086a4:	602b      	str	r3, [r5, #0]
 80086a6:	f7f8 fc2a 	bl	8000efe <_fstat>
 80086aa:	1c43      	adds	r3, r0, #1
 80086ac:	d102      	bne.n	80086b4 <_fstat_r+0x1c>
 80086ae:	682b      	ldr	r3, [r5, #0]
 80086b0:	b103      	cbz	r3, 80086b4 <_fstat_r+0x1c>
 80086b2:	6023      	str	r3, [r4, #0]
 80086b4:	bd38      	pop	{r3, r4, r5, pc}
 80086b6:	bf00      	nop
 80086b8:	20019b88 	.word	0x20019b88

080086bc <_isatty_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4d06      	ldr	r5, [pc, #24]	; (80086d8 <_isatty_r+0x1c>)
 80086c0:	2300      	movs	r3, #0
 80086c2:	4604      	mov	r4, r0
 80086c4:	4608      	mov	r0, r1
 80086c6:	602b      	str	r3, [r5, #0]
 80086c8:	f7f8 fc29 	bl	8000f1e <_isatty>
 80086cc:	1c43      	adds	r3, r0, #1
 80086ce:	d102      	bne.n	80086d6 <_isatty_r+0x1a>
 80086d0:	682b      	ldr	r3, [r5, #0]
 80086d2:	b103      	cbz	r3, 80086d6 <_isatty_r+0x1a>
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	20019b88 	.word	0x20019b88

080086dc <_sbrk>:
 80086dc:	4a04      	ldr	r2, [pc, #16]	; (80086f0 <_sbrk+0x14>)
 80086de:	6811      	ldr	r1, [r2, #0]
 80086e0:	4603      	mov	r3, r0
 80086e2:	b909      	cbnz	r1, 80086e8 <_sbrk+0xc>
 80086e4:	4903      	ldr	r1, [pc, #12]	; (80086f4 <_sbrk+0x18>)
 80086e6:	6011      	str	r1, [r2, #0]
 80086e8:	6810      	ldr	r0, [r2, #0]
 80086ea:	4403      	add	r3, r0
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	4770      	bx	lr
 80086f0:	20019b98 	.word	0x20019b98
 80086f4:	20019ba0 	.word	0x20019ba0

080086f8 <_init>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr

08008704 <_fini>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr
