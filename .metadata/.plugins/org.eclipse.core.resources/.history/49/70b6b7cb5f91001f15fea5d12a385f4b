/*
 * task_handler.c
 *
 *  Created on: Sep 29, 2024
 *      Author: ImadF
 */

#include "main.h"
#include <string.h>

extern TaskHandle_t handle_menu_task;
extern TaskHandle_t handle_RTC_task;
extern TaskHandle_t handle_LED_task;
extern TaskHandle_t handle_cmd_handling_task;
extern TaskHandle_t handle_cmd_handling_task;
extern TaskHandle_t handle_print_task;

extern QueueHandle_t q_data;
extern QueueHandle_t q_print;

extern UART_HandleTypeDef huart2;

state_t curr_state = sMainMenu;
rtc_state curr_rtc_state = sHH_CONFIG;

extern void led_effect_stop();
extern void led_effect(int effect);

const char* inv_msg = "Invalid option\n";

void process_command(command_t* p_cmd);
int extract_command(command_t* p_cmd);

uint8_t getnumber(uint8_t* p , uint8_t len)
{
	int value;
	if(len>1)
	{
		value = ((p[0]-48)*10) + (p[1]-48);
	}
	else
	{
		value = p[0]-48;
	}
	return value;
}

void menu_task(void *param)
{
	uint32_t command_addr;
	command_t* cmd;
	uint8_t option;
	const char* menu_msg = "===========================\n"
						   "|			MENU		  |\n"
						   "===========================\n"
							  "LED Effect	 ----> 0\n"
			                  "Date & Time   ----> 1\n"
							  "Exit		     ----> 2\n"
							  "Enter your choice here:\n";


	while (1)
	{
		xQueueSend(q_print, &menu_msg, portMAX_DELAY);

		//wait for menu commands
		xTaskNotifyWait(0,0,&command_addr,portMAX_DELAY);
		cmd = (command_t*) command_addr;
		if(cmd->len ==1)
		{
			option = cmd->payload[0] - 48;
			switch(option)
			{
			case 0:
				curr_state = sLEDeffect;
				xTaskNotify(handle_LED_task,0,eNoAction);
				break;

			case 1:
				curr_state = sRTCmenu;
				xTaskNotify(handle_RTC_task,0, eNoAction);
				break;
			case 2 :
				//exit
				break;
			default:
				xQueueSend(q_print, &inv_msg, portMAX_DELAY);
				continue;
			}
		}
		else
		{
			xQueueSend(q_print, &inv_msg, portMAX_DELAY);

		}

		//BLOCKED and waiting for notification from command handling task
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);

	}
}
void RTC_task(void *param)
{
	const char* msg_rtc1 = "========================\n"
								"|         RTC          |\n"
								"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
							"Configure Date            ----> 1\n"
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";

	//configure time msgs
	const char *msg_rtc_hh = "Enter hour(1-12):";
	const char *msg_rtc_mm = "Enter minutes(0-59):";
	const char *msg_rtc_ss = "Enter seconds(0-59):";

	//comfigure date msgs
	const char *msg_rtc_dd  = "Enter date(1-31):";
	const char *msg_rtc_mo  ="Enter month(1-12):";
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
	const char *msg_rtc_yr  = "Enter year(0-99):";

	const char *msg_conf = "Configuration successful\n";
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";


	uint32_t cmd_addr;
	command_t *cmd;
	uint8_t menu_code;

	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;


	while(1){
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);

		/*TODO : Print the menu and show current date and time information */
		xQueueSend(q_print, &msg_rtc1, portMAX_DELAY);
		show_time_date();
		xQueueSend(q_print, &msg_rtc2, portMAX_DELAY);


		while(curr_state != sMainMenu){

			/*TODO: Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
			cmd = (command_t*) cmd_addr;

			switch(curr_state)
			{
				case sRTCmenu:{


					/* process RTC menu commands */
					if(cmd->len ==1)
					{
						menu_code = cmd->payload[0] -48;

						switch(menu_code)
						{
						case 0:
						{
							curr_state = sRTCTimeConfig;
							xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
							break;
						}

						case 1:
						{
							curr_state = sRTCDateConfig;
							xQueueSend(q_print,&msg_rtc_dd, portMAX_DELAY);
							break;
						}

						case 2:
						{
							curr_state = sRTCReport;
							xQueueSend(q_print, &msg_rtc_report, portMAX_DELAY);
							break;
						}

						case 3:
							curr_state = sMainMenu;


						default:
							curr_state = sMainMenu;
							xQueueSend(q_print, &inv_msg, portMAX_DELAY);

						}
					}
					else{
						xQueueSend(q_print, &inv_msg, portMAX_DELAY);
					}

					break;}

				case sRTCTimeConfig:{

					/*TODO : get hh, mm, ss infor and configure RTC */
					switch(curr_rtc_state)
					{
					case sHH_CONFIG:
					{
						uint8_t hour = getnumber(cmd->payload, cmd->len);
						time.Hours = hour;
						curr_rtc_state = sMM_CONFIG;
						xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
						break;
					}

					case sMM_CONFIG:
					{
						uint8_t minute = getnumber(cmd->payload,cmd->len);
						time.Minutes = minute;
						curr_rtc_state = sSS_CONFIG;
						xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
						break;
					}

					case sSS_CONFIG:
					{
						uint8_t seconds = getnumber(cmd->payload,cmd->len);
						time.Seconds = seconds;
						if(!rtc_validate_info(&time, NULL))
						{
							rtc_configure_time(&time);
							xQueueSend(q_print, &msg_conf, portMAX_DELAY);
							show_time_date();
						}
						else
						{
							xQueueSend(q_print, &inv_msg, portMAX_DELAY);

						}

						curr_state = sMainMenu;
						curr_rtc_state = 0;
						break;
					//rtc_state = sSS_CONFIG;
					}

					/* take care of invalid entries */
					default:
					{
						xQueueSend(q_print, &inv_msg, portMAX_DELAY);
					}
					}

					break;}

				case sRTCDateConfig:{

					/*TODO : get date, month, day , year info and configure RTC */
					switch(curr_rtc_state)
					{
					case sDD_CONFIG:
					{
						uint8_t d = getnumber(cmd->payload, cmd->len);
						date.Date = d;
						curr_rtc_state = sMO_CONFIG;
						xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
						break;
					}
					case sMO_CONFIG:
					{
						uint8_t month = getnumber(cmd->payload, cmd->len);
						date.Month = month;
						curr_rtc_state = sDOW_CONFIG;
						xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
						break;
					}
					case sDOW_CONFIG:
					{
						uint8_t dow = getnumber(cmd->payload, cmd->len);
						date.WeekDay = dow;
						curr_rtc_state = sYY_CONFIG;
						xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
						break;
					}
					case sYY_CONFIG:
						uint8_t yr = getnumber(cmd->payload, cmd->len);
						date.Year = yr;
						if(!rtc_validate_info(NULL, &date))
						{
							rtc_configure_date(&date);
							xQueueSend(q_print, &msg_conf, portMAX_DELAY);
							show_time_date();
						}
						else
						{
							xQueueSend(q_print, &inv_msg, portMAX_DELAY);

						}

						curr_state = sMainMenu;
						curr_rtc_state = 0;
					/*TODO: take care of invalid entries */
					default:
					{
						xQueueSend(q_print, &inv_msg, portMAX_DELAY);
					}
					}

					break;}

				case sRTCReport:{
					/* enable or disable RTC current time reporting over ITM printf */

					break;}

			}// switch end

		} //while end

		   /* : Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);


		}//while super loop end

}

void LED_task(void *param)
{
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
						  "|      LED Effect     |\n"
						  "========================\n"
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);

		xQueueSend(q_print, &msg_led, portMAX_DELAY);
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
		cmd = (command_t*) cmd_addr;

		if(cmd->len <= 4)
		{
			if(! strcmp((char*)cmd->payload,"none"))
				led_effect_stop();
			else if (! strcmp((char*)cmd->payload,"e1"))
				led_effect(1);
			else if (! strcmp((char*)cmd->payload,"e2"))
				led_effect(2);
			else if (! strcmp((char*)cmd->payload,"e3"))
				led_effect(3);
			else if (! strcmp((char*)cmd->payload,"e4"))
				led_effect(4);
			else
				xQueueSend(q_print, &inv_msg, portMAX_DELAY);
		}else
		{
			xQueueSend(q_print, &inv_msg, portMAX_DELAY);
		}


		/*update state variable */
		curr_state = sMainMenu;

		/* Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);

	}
}
void cmd_handling_task(void *param)
{
		BaseType_t ret;
		command_t cmd;
	while (1)
	{
		// wait for portMAX_DELAY (basically indefinitely) ticks until notified otherwise break
		ret = xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
		if(ret == pdTRUE)
		{
			process_command(&cmd);
		}

	}
}


void print_task(void *param)
{
	uint32_t* msg;

	while (1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);

	}
}

void process_command(command_t* p_cmd)
{
	if(extract_command(p_cmd))
	{
		while(1);
	}


	switch(curr_state)
	{

	case sMainMenu:
		xTaskNotify(handle_menu_task, (uint32_t)p_cmd, eSetValueWithOverwrite);
		break;

	case sLEDeffect:
		xTaskNotify(handle_LED_task, (uint32_t)p_cmd, eSetValueWithOverwrite);
		break;

	case sRTCmenu:
	case sRTCTimeConfig:
	case sRTCDateConfig:
	case sRTCReport:
		xTaskNotify(handle_RTC_task, (uint32_t)p_cmd, eSetValueWithOverwrite);
		break;

	}

}

int extract_command(command_t* p_cmd)
{
	BaseType_t status2;
	uint8_t item;

	status2 = uxQueueMessagesWaiting(q_data);
	if(!status2)
	{
		return 1;
	}

	uint8_t i = 0;
	do
	{
		status2 = xQueueReceive(q_data, &item, 0);
		if(status2 == pdTRUE)
		{
			p_cmd->payload[i++] = item;
		}
	}
	while(item!='\n');

	p_cmd->payload[i-1] = '\0';
	p_cmd->len = i-1;

	return 0;
}
