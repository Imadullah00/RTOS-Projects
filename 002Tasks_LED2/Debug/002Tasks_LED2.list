
002Tasks_LED2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007284  08007284  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800728c  0800728c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800728c  0800728c  0001728c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007290  08007290  00017290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          000194c4  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20019528  20019528  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014b07  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000319d  00000000  00000000  00034bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001300  00000000  00000000  00037d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ec8  00000000  00000000  00039080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023a96  00000000  00000000  00039f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016be3  00000000  00000000  0005d9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dad94  00000000  00000000  000745c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005480  00000000  00000000  0014f358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001547d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007140 	.word	0x08007140

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007140 	.word	0x08007140

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	db0b      	blt.n	80005a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f003 021f 	and.w	r2, r3, #31
 8000594:	4907      	ldr	r1, [pc, #28]	; (80005b4 <__NVIC_EnableIRQ+0x38>)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	095b      	lsrs	r3, r3, #5
 800059c:	2001      	movs	r0, #1
 800059e:	fa00 f202 	lsl.w	r2, r0, r2
 80005a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	e000e100 	.word	0xe000e100

080005b8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db0c      	blt.n	80005e4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 021f 	and.w	r2, r3, #31
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <__NVIC_SetPendingIRQ+0x38>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	095b      	lsrs	r3, r3, #5
 80005d8:	2001      	movs	r0, #1
 80005da:	fa00 f202 	lsl.w	r2, r0, r2
 80005de:	3340      	adds	r3, #64	; 0x40
 80005e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	2b00      	cmp	r3, #0
 8000604:	db0c      	blt.n	8000620 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 021f 	and.w	r2, r3, #31
 800060c:	4907      	ldr	r1, [pc, #28]	; (800062c <__NVIC_ClearPendingIRQ+0x38>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	095b      	lsrs	r3, r3, #5
 8000614:	2001      	movs	r0, #1
 8000616:	fa00 f202 	lsl.w	r2, r0, r2
 800061a:	3360      	adds	r3, #96	; 0x60
 800061c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000e100 	.word	0xe000e100

08000630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	db0a      	blt.n	800065a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	490c      	ldr	r1, [pc, #48]	; (800067c <__NVIC_SetPriority+0x4c>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	440b      	add	r3, r1
 8000654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000658:	e00a      	b.n	8000670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4908      	ldr	r1, [pc, #32]	; (8000680 <__NVIC_SetPriority+0x50>)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	3b04      	subs	r3, #4
 8000668:	0112      	lsls	r2, r2, #4
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	440b      	add	r3, r1
 800066e:	761a      	strb	r2, [r3, #24]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fcf1 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f859 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f913 	bl	80008bc <MX_GPIO_Init>
  MX_RTC_Init();
 8000696:	f000 f8c1 	bl	800081c <MX_RTC_Init>
  MX_USART2_UART_Init();
 800069a:	f000 f8e5 	bl	8000868 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

   // SEGGER_UART_init(500000);

	DWT_CTRL |= (1 << 0);
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <main+0x9c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <main+0x9c>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6013      	str	r3, [r2, #0]

	//SEGGER_SYSVIEW_Conf();

	sprintf(usr_msg, "Demo of usage of counting semaphore\r\n");
 80006aa:	491e      	ldr	r1, [pc, #120]	; (8000724 <main+0xa0>)
 80006ac:	481e      	ldr	r0, [pc, #120]	; (8000728 <main+0xa4>)
 80006ae:	f006 f8a3 	bl	80067f8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 80006b2:	481d      	ldr	r0, [pc, #116]	; (8000728 <main+0xa4>)
 80006b4:	f7ff fd8c 	bl	80001d0 <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295
 80006c0:	4919      	ldr	r1, [pc, #100]	; (8000728 <main+0xa4>)
 80006c2:	481a      	ldr	r0, [pc, #104]	; (800072c <main+0xa8>)
 80006c4:	f002 f9e4 	bl	8002a90 <HAL_UART_Transmit>

	xCountingSemaphore = xSemaphoreCreateCounting(10,0);
 80006c8:	2100      	movs	r1, #0
 80006ca:	200a      	movs	r0, #10
 80006cc:	f003 fb30 	bl	8003d30 <xQueueCreateCountingSemaphore>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a17      	ldr	r2, [pc, #92]	; (8000730 <main+0xac>)
 80006d4:	6013      	str	r3, [r2, #0]

	if(xCountingSemaphore != NULL)
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <main+0xac>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d01e      	beq.n	800071c <main+0x98>
	{
		NVIC_SetPriority( EXTI15_10_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
 80006de:	2105      	movs	r1, #5
 80006e0:	2028      	movs	r0, #40	; 0x28
 80006e2:	f7ff ffa5 	bl	8000630 <__NVIC_SetPriority>

		/* Enable the interrupt. */
		NVIC_EnableIRQ( EXTI15_10_IRQn );
 80006e6:	2028      	movs	r0, #40	; 0x28
 80006e8:	f7ff ff48 	bl	800057c <__NVIC_EnableIRQ>

		xTaskCreate(vPeriodicTask, "Periodic Task", 500, NULL, 3, NULL);
 80006ec:	2300      	movs	r3, #0
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	2303      	movs	r3, #3
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2300      	movs	r3, #0
 80006f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006fa:	490e      	ldr	r1, [pc, #56]	; (8000734 <main+0xb0>)
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <main+0xb4>)
 80006fe:	f004 f901 	bl	8004904 <xTaskCreate>

		xTaskCreate(vHandlerTask, "Handler Task", 500, NULL, 1, NULL);
 8000702:	2300      	movs	r3, #0
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	2301      	movs	r3, #1
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2300      	movs	r3, #0
 800070c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000710:	490a      	ldr	r1, [pc, #40]	; (800073c <main+0xb8>)
 8000712:	480b      	ldr	r0, [pc, #44]	; (8000740 <main+0xbc>)
 8000714:	f004 f8f6 	bl	8004904 <xTaskCreate>

		//start the scheduler
		vTaskStartScheduler();
 8000718:	f004 fa6e 	bl	8004bf8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800071c:	e7fe      	b.n	800071c <main+0x98>
 800071e:	bf00      	nop
 8000720:	e0001000 	.word	0xe0001000
 8000724:	08007158 	.word	0x08007158
 8000728:	200000e8 	.word	0x200000e8
 800072c:	20000080 	.word	0x20000080
 8000730:	200001e4 	.word	0x200001e4
 8000734:	08007180 	.word	0x08007180
 8000738:	08000b79 	.word	0x08000b79
 800073c:	08007190 	.word	0x08007190
 8000740:	08000bdd 	.word	0x08000bdd

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f006 f870 	bl	8006838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b29      	ldr	r3, [pc, #164]	; (8000814 <SystemClock_Config+0xd0>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a28      	ldr	r2, [pc, #160]	; (8000814 <SystemClock_Config+0xd0>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <SystemClock_Config+0xd0>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <SystemClock_Config+0xd4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a22      	ldr	r2, [pc, #136]	; (8000818 <SystemClock_Config+0xd4>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <SystemClock_Config+0xd4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007a0:	230a      	movs	r3, #10
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007bc:	2332      	movs	r3, #50	; 0x32
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c4:	2307      	movs	r3, #7
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 ffbb 	bl	8001748 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d8:	f000 fa8a 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fa1c 	bl	8001c38 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000806:	f000 fa73 	bl	8000cf0 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	; 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_RTC_Init+0x44>)
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <MX_RTC_Init+0x48>)
 8000824:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_RTC_Init+0x44>)
 8000828:	2240      	movs	r2, #64	; 0x40
 800082a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_RTC_Init+0x44>)
 800082e:	227f      	movs	r2, #127	; 0x7f
 8000830:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_RTC_Init+0x44>)
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_RTC_Init+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_RTC_Init+0x44>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_RTC_Init+0x44>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_RTC_Init+0x44>)
 800084c:	f001 fd28 	bl	80022a0 <HAL_RTC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000856:	f000 fa4b 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000c8 	.word	0x200000c8
 8000864:	40002800 	.word	0x40002800

08000868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_USART2_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f002 f8a6 	bl	80029f0 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 fa21 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000080 	.word	0x20000080
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4ba2      	ldr	r3, [pc, #648]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4aa1      	ldr	r2, [pc, #644]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b9f      	ldr	r3, [pc, #636]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0310 	and.w	r3, r3, #16
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b9b      	ldr	r3, [pc, #620]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a9a      	ldr	r2, [pc, #616]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b98      	ldr	r3, [pc, #608]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b94      	ldr	r3, [pc, #592]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a93      	ldr	r2, [pc, #588]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b91      	ldr	r3, [pc, #580]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b8d      	ldr	r3, [pc, #564]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a8c      	ldr	r2, [pc, #560]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b8a      	ldr	r3, [pc, #552]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b86      	ldr	r3, [pc, #536]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a85      	ldr	r2, [pc, #532]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b83      	ldr	r3, [pc, #524]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b7f      	ldr	r3, [pc, #508]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a7e      	ldr	r2, [pc, #504]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b7c      	ldr	r3, [pc, #496]	; (8000b60 <MX_GPIO_Init+0x2a4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2108      	movs	r1, #8
 800097e:	4879      	ldr	r0, [pc, #484]	; (8000b64 <MX_GPIO_Init+0x2a8>)
 8000980:	f000 fec8 	bl	8001714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2101      	movs	r1, #1
 8000988:	4877      	ldr	r0, [pc, #476]	; (8000b68 <MX_GPIO_Init+0x2ac>)
 800098a:	f000 fec3 	bl	8001714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098e:	2200      	movs	r2, #0
 8000990:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000994:	4875      	ldr	r0, [pc, #468]	; (8000b6c <MX_GPIO_Init+0x2b0>)
 8000996:	f000 febd 	bl	8001714 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800099a:	2308      	movs	r3, #8
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	486c      	ldr	r0, [pc, #432]	; (8000b64 <MX_GPIO_Init+0x2a8>)
 80009b2:	f000 fd13 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4866      	ldr	r0, [pc, #408]	; (8000b68 <MX_GPIO_Init+0x2ac>)
 80009ce:	f000 fd05 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009d2:	2308      	movs	r3, #8
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e2:	2305      	movs	r3, #5
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	485e      	ldr	r0, [pc, #376]	; (8000b68 <MX_GPIO_Init+0x2ac>)
 80009ee:	f000 fcf5 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	485a      	ldr	r0, [pc, #360]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000a08:	f000 fce8 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4852      	ldr	r0, [pc, #328]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000a28:	f000 fcd8 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a2c:	23e0      	movs	r3, #224	; 0xe0
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	484a      	ldr	r0, [pc, #296]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000a48:	f000 fcc8 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4845      	ldr	r0, [pc, #276]	; (8000b74 <MX_GPIO_Init+0x2b8>)
 8000a60:	f000 fcbc 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a76:	2305      	movs	r3, #5
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	483c      	ldr	r0, [pc, #240]	; (8000b74 <MX_GPIO_Init+0x2b8>)
 8000a82:	f000 fcab 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a86:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a8a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4833      	ldr	r0, [pc, #204]	; (8000b6c <MX_GPIO_Init+0x2b0>)
 8000aa0:	f000 fc9c 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aa4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4829      	ldr	r0, [pc, #164]	; (8000b68 <MX_GPIO_Init+0x2ac>)
 8000ac2:	f000 fc8b 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4825      	ldr	r0, [pc, #148]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000adc:	f000 fc7e 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ae0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af2:	230a      	movs	r3, #10
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	481c      	ldr	r0, [pc, #112]	; (8000b70 <MX_GPIO_Init+0x2b4>)
 8000afe:	f000 fc6d 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b02:	2320      	movs	r3, #32
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4815      	ldr	r0, [pc, #84]	; (8000b6c <MX_GPIO_Init+0x2b0>)
 8000b16:	f000 fc61 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	480f      	ldr	r0, [pc, #60]	; (8000b74 <MX_GPIO_Init+0x2b8>)
 8000b38:	f000 fc50 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b40:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_GPIO_Init+0x2a8>)
 8000b52:	f000 fc43 	bl	80013dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b56:	bf00      	nop
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020400 	.word	0x40020400

08000b78 <vPeriodicTask>:

/* USER CODE BEGIN 4 */
void vPeriodicTask(void* param)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(pdMS_TO_TICKS(500));
 8000b80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b84:	f004 f804 	bl	8004b90 <vTaskDelay>

		sprintf(usr_msg, "Periodic task - Pending the interrupt.\r\n" );
 8000b88:	4910      	ldr	r1, [pc, #64]	; (8000bcc <vPeriodicTask+0x54>)
 8000b8a:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <vPeriodicTask+0x58>)
 8000b8c:	f005 fe34 	bl	80067f8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 8000b90:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <vPeriodicTask+0x58>)
 8000b92:	f7ff fb1d 	bl	80001d0 <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <vPeriodicTask+0x58>)
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <vPeriodicTask+0x5c>)
 8000ba2:	f001 ff75 	bl	8002a90 <HAL_UART_Transmit>

		//pend the interrupt
		NVIC_SetPendingIRQ(EXTI15_10_IRQn);
 8000ba6:	2028      	movs	r0, #40	; 0x28
 8000ba8:	f7ff fd06 	bl	80005b8 <__NVIC_SetPendingIRQ>

		//does the interrupt trigger immediately or does the task follow through
		//to completion?

		sprintf(usr_msg, "Periodic task - Resuming.\r\n" );
 8000bac:	490a      	ldr	r1, [pc, #40]	; (8000bd8 <vPeriodicTask+0x60>)
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <vPeriodicTask+0x58>)
 8000bb0:	f005 fe22 	bl	80067f8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <vPeriodicTask+0x58>)
 8000bb6:	f7ff fb0b 	bl	80001d0 <strlen>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	4903      	ldr	r1, [pc, #12]	; (8000bd0 <vPeriodicTask+0x58>)
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <vPeriodicTask+0x5c>)
 8000bc6:	f001 ff63 	bl	8002a90 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000bca:	e7d9      	b.n	8000b80 <vPeriodicTask+0x8>
 8000bcc:	080071a0 	.word	0x080071a0
 8000bd0:	200000e8 	.word	0x200000e8
 8000bd4:	20000080 	.word	0x20000080
 8000bd8:	080071cc 	.word	0x080071cc

08000bdc <vHandlerTask>:
	}

}

void vHandlerTask(void* param)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xCountingSemaphore, portMAX_DELAY);
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <vHandlerTask+0x38>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 fbf7 	bl	80043e0 <xQueueSemaphoreTake>

		sprintf(usr_msg, "Handler task - Processing event.\r\n");
 8000bf2:	4909      	ldr	r1, [pc, #36]	; (8000c18 <vHandlerTask+0x3c>)
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <vHandlerTask+0x40>)
 8000bf6:	f005 fdff 	bl	80067f8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 8000bfa:	4808      	ldr	r0, [pc, #32]	; (8000c1c <vHandlerTask+0x40>)
 8000bfc:	f7ff fae8 	bl	80001d0 <strlen>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
 8000c08:	4904      	ldr	r1, [pc, #16]	; (8000c1c <vHandlerTask+0x40>)
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <vHandlerTask+0x44>)
 8000c0c:	f001 ff40 	bl	8002a90 <HAL_UART_Transmit>
		xSemaphoreTake(xCountingSemaphore, portMAX_DELAY);
 8000c10:	e7e8      	b.n	8000be4 <vHandlerTask+0x8>
 8000c12:	bf00      	nop
 8000c14:	200001e4 	.word	0x200001e4
 8000c18:	080071e8 	.word	0x080071e8
 8000c1c:	200000e8 	.word	0x200000e8
 8000c20:	20000080 	.word	0x20000080

08000c24 <EXTI15_10_IRQHandler>:
	}

}

void EXTI15_10_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
	BaseType_t  xHigherPriorityTaskWoken = pdFALSE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]

	sprintf(usr_msg,"==>Button_Handler\r\n");
 8000c2e:	4922      	ldr	r1, [pc, #136]	; (8000cb8 <EXTI15_10_IRQHandler+0x94>)
 8000c30:	4822      	ldr	r0, [pc, #136]	; (8000cbc <EXTI15_10_IRQHandler+0x98>)
 8000c32:	f005 fde1 	bl	80067f8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 8000c36:	4821      	ldr	r0, [pc, #132]	; (8000cbc <EXTI15_10_IRQHandler+0x98>)
 8000c38:	f7ff faca 	bl	80001d0 <strlen>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	491d      	ldr	r1, [pc, #116]	; (8000cbc <EXTI15_10_IRQHandler+0x98>)
 8000c46:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <EXTI15_10_IRQHandler+0x9c>)
 8000c48:	f001 ff22 	bl	8002a90 <HAL_UART_Transmit>

	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <EXTI15_10_IRQHandler+0xa0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1d3a      	adds	r2, r7, #4
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 fa47 	bl	80040e8 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <EXTI15_10_IRQHandler+0xa0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1d3a      	adds	r2, r7, #4
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 fa40 	bl	80040e8 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <EXTI15_10_IRQHandler+0xa0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	1d3a      	adds	r2, r7, #4
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f003 fa39 	bl	80040e8 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <EXTI15_10_IRQHandler+0xa0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	1d3a      	adds	r2, r7, #4
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 fa32 	bl	80040e8 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <EXTI15_10_IRQHandler+0xa0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1d3a      	adds	r2, r7, #4
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 fa2b 	bl	80040e8 <xQueueGiveFromISR>

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d007      	beq.n	8000ca8 <EXTI15_10_IRQHandler+0x84>
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <EXTI15_10_IRQHandler+0xa4>)
 8000c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	f3bf 8f4f 	dsb	sy
 8000ca4:	f3bf 8f6f 	isb	sy

	__NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000ca8:	2028      	movs	r0, #40	; 0x28
 8000caa:	f7ff fca3 	bl	80005f4 <__NVIC_ClearPendingIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	0800720c 	.word	0x0800720c
 8000cbc:	200000e8 	.word	0x200000e8
 8000cc0:	20000080 	.word	0x20000080
 8000cc4:	200001e4 	.word	0x200001e4
 8000cc8:	e000ed04 	.word	0xe000ed04

08000ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cde:	f000 f9e9 	bl	80010b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40001000 	.word	0x40001000

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000d3a:	f005 f9bd 	bl	80060b8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <HAL_RTC_MspInit+0x4c>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d111      	bne.n	8000d90 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d74:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 f9ae 	bl	80020dc <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000d86:	f7ff ffb3 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <HAL_RTC_MspInit+0x50>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40002800 	.word	0x40002800
 8000d9c:	42470e3c 	.word	0x42470e3c

08000da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <HAL_UART_MspInit+0x94>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d133      	bne.n	8000e2a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <HAL_UART_MspInit+0x9c>)
 8000e16:	f000 fae1 	bl	80013dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2106      	movs	r1, #6
 8000e1e:	2026      	movs	r0, #38	; 0x26
 8000e20:	f000 fa20 	bl	8001264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e24:	2026      	movs	r0, #38	; 0x26
 8000e26:	f000 fa39 	bl	800129c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <HAL_InitTick+0xe4>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	4a32      	ldr	r2, [pc, #200]	; (8000f24 <HAL_InitTick+0xe4>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e60:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_InitTick+0xe4>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e6c:	f107 0210 	add.w	r2, r7, #16
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 f8fe 	bl	8002078 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e7c:	6a3b      	ldr	r3, [r7, #32]
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d103      	bne.n	8000e8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e86:	f001 f8cf 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 8000e8a:	6378      	str	r0, [r7, #52]	; 0x34
 8000e8c:	e004      	b.n	8000e98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e8e:	f001 f8cb 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 8000e92:	4603      	mov	r3, r0
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9a:	4a23      	ldr	r2, [pc, #140]	; (8000f28 <HAL_InitTick+0xe8>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	0c9b      	lsrs	r3, r3, #18
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <HAL_InitTick+0xec>)
 8000ea8:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <HAL_InitTick+0xf0>)
 8000eaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <HAL_InitTick+0xec>)
 8000eae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <HAL_InitTick+0xec>)
 8000eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <HAL_InitTick+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_InitTick+0xec>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_InitTick+0xec>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ecc:	4817      	ldr	r0, [pc, #92]	; (8000f2c <HAL_InitTick+0xec>)
 8000ece:	f001 faed 	bl	80024ac <HAL_TIM_Base_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ed8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d11b      	bne.n	8000f18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ee0:	4812      	ldr	r0, [pc, #72]	; (8000f2c <HAL_InitTick+0xec>)
 8000ee2:	f001 fb3d 	bl	8002560 <HAL_TIM_Base_Start_IT>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000eec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d111      	bne.n	8000f18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ef4:	2036      	movs	r0, #54	; 0x36
 8000ef6:	f000 f9d1 	bl	800129c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d808      	bhi.n	8000f12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	2036      	movs	r0, #54	; 0x36
 8000f06:	f000 f9ad 	bl	8001264 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_InitTick+0xf4>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	e002      	b.n	8000f18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3738      	adds	r7, #56	; 0x38
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800
 8000f28:	431bde83 	.word	0x431bde83
 8000f2c:	200001e8 	.word	0x200001e8
 8000f30:	40001000 	.word	0x40001000
 8000f34:	20000004 	.word	0x20000004

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <USART2_IRQHandler+0x10>)
 8000f6a:	f001 fe1d 	bl	8002ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000080 	.word	0x20000080

08000f78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM6_DAC_IRQHandler+0x10>)
 8000f7e:	f001 fb5f 	bl	8002640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001e8 	.word	0x200001e8

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f005 fc44 	bl	8006848 <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20020000 	.word	0x20020000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	20000230 	.word	0x20000230
 8000ff4:	20019528 	.word	0x20019528

08000ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001020:	f7ff ffea 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001026:	490d      	ldr	r1, [pc, #52]	; (800105c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800103c:	4c0a      	ldr	r4, [pc, #40]	; (8001068 <LoopFillZerobss+0x22>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104a:	f005 fc03 	bl	8006854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fb19 	bl	8000684 <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001060:	08007294 	.word	0x08007294
  ldr r2, =_sbss
 8001064:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001068:	20019528 	.word	0x20019528

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f8d8 	bl	800124e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fece 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fe2a 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000234 	.word	0x20000234

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000234 	.word	0x20000234

080010f4 <__NVIC_SetPriorityGrouping>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <__NVIC_EnableIRQ+0x38>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff4c 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001276:	f7ff ff61 	bl	800113c <__NVIC_GetPriorityGrouping>
 800127a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	6978      	ldr	r0, [r7, #20]
 8001282:	f7ff ffb1 	bl	80011e8 <NVIC_EncodePriority>
 8001286:	4602      	mov	r2, r0
 8001288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff80 	bl	8001194 <__NVIC_SetPriority>
}
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff54 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012c6:	f7ff ff09 	bl	80010dc <HAL_GetTick>
 80012ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d008      	beq.n	80012ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e052      	b.n	8001390 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0216 	bic.w	r2, r2, #22
 80012f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	695a      	ldr	r2, [r3, #20]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001308:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <HAL_DMA_Abort+0x62>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0208 	bic.w	r2, r2, #8
 8001328:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0201 	bic.w	r2, r2, #1
 8001338:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133a:	e013      	b.n	8001364 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800133c:	f7ff fece 	bl	80010dc <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b05      	cmp	r3, #5
 8001348:	d90c      	bls.n	8001364 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2220      	movs	r2, #32
 800134e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e015      	b.n	8001390 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1e4      	bne.n	800133c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001376:	223f      	movs	r2, #63	; 0x3f
 8001378:	409a      	lsls	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d004      	beq.n	80013b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00c      	b.n	80013d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2205      	movs	r2, #5
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	e16b      	b.n	80016d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	f040 815a 	bne.w	80016ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d005      	beq.n	800142e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142a:	2b02      	cmp	r3, #2
 800142c:	d130      	bne.n	8001490 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	091b      	lsrs	r3, r3, #4
 800147a:	f003 0201 	and.w	r2, r3, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b03      	cmp	r3, #3
 800149a:	d017      	beq.n	80014cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d123      	bne.n	8001520 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	69b9      	ldr	r1, [r7, #24]
 800151c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0203 	and.w	r2, r3, #3
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80b4 	beq.w	80016ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <HAL_GPIO_Init+0x30c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a5f      	ldr	r2, [pc, #380]	; (80016e8 <HAL_GPIO_Init+0x30c>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <HAL_GPIO_Init+0x30c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157e:	4a5b      	ldr	r2, [pc, #364]	; (80016ec <HAL_GPIO_Init+0x310>)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	220f      	movs	r2, #15
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_GPIO_Init+0x314>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d02b      	beq.n	8001602 <HAL_GPIO_Init+0x226>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a51      	ldr	r2, [pc, #324]	; (80016f4 <HAL_GPIO_Init+0x318>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d025      	beq.n	80015fe <HAL_GPIO_Init+0x222>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a50      	ldr	r2, [pc, #320]	; (80016f8 <HAL_GPIO_Init+0x31c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01f      	beq.n	80015fa <HAL_GPIO_Init+0x21e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4f      	ldr	r2, [pc, #316]	; (80016fc <HAL_GPIO_Init+0x320>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d019      	beq.n	80015f6 <HAL_GPIO_Init+0x21a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4e      	ldr	r2, [pc, #312]	; (8001700 <HAL_GPIO_Init+0x324>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x216>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4d      	ldr	r2, [pc, #308]	; (8001704 <HAL_GPIO_Init+0x328>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x212>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_GPIO_Init+0x32c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x20e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4b      	ldr	r2, [pc, #300]	; (800170c <HAL_GPIO_Init+0x330>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x20a>
 80015e2:	2307      	movs	r3, #7
 80015e4:	e00e      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015e6:	2308      	movs	r3, #8
 80015e8:	e00c      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015ea:	2306      	movs	r3, #6
 80015ec:	e00a      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e008      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e004      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_Init+0x228>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x228>
 8001602:	2300      	movs	r3, #0
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	f002 0203 	and.w	r2, r2, #3
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4093      	lsls	r3, r2
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001614:	4935      	ldr	r1, [pc, #212]	; (80016ec <HAL_GPIO_Init+0x310>)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <HAL_GPIO_Init+0x334>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001646:	4a32      	ldr	r2, [pc, #200]	; (8001710 <HAL_GPIO_Init+0x334>)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800164c:	4b30      	ldr	r3, [pc, #192]	; (8001710 <HAL_GPIO_Init+0x334>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001670:	4a27      	ldr	r2, [pc, #156]	; (8001710 <HAL_GPIO_Init+0x334>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_GPIO_Init+0x334>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800169a:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <HAL_GPIO_Init+0x334>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_GPIO_Init+0x334>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <HAL_GPIO_Init+0x334>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3301      	adds	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b0f      	cmp	r3, #15
 80016d4:	f67f ae90 	bls.w	80013f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40013800 	.word	0x40013800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020400 	.word	0x40020400
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020c00 	.word	0x40020c00
 8001700:	40021000 	.word	0x40021000
 8001704:	40021400 	.word	0x40021400
 8001708:	40021800 	.word	0x40021800
 800170c:	40021c00 	.word	0x40021c00
 8001710:	40013c00 	.word	0x40013c00

08001714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
 8001720:	4613      	mov	r3, r2
 8001722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001724:	787b      	ldrb	r3, [r7, #1]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001730:	e003      	b.n	800173a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	041a      	lsls	r2, r3, #16
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	619a      	str	r2, [r3, #24]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e267      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d075      	beq.n	8001852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001766:	4b88      	ldr	r3, [pc, #544]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b04      	cmp	r3, #4
 8001770:	d00c      	beq.n	800178c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001772:	4b85      	ldr	r3, [pc, #532]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800177a:	2b08      	cmp	r3, #8
 800177c:	d112      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177e:	4b82      	ldr	r3, [pc, #520]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800178a:	d10b      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	4b7e      	ldr	r3, [pc, #504]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d05b      	beq.n	8001850 <HAL_RCC_OscConfig+0x108>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d157      	bne.n	8001850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e242      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d106      	bne.n	80017bc <HAL_RCC_OscConfig+0x74>
 80017ae:	4b76      	ldr	r3, [pc, #472]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a75      	ldr	r2, [pc, #468]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e01d      	b.n	80017f8 <HAL_RCC_OscConfig+0xb0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x98>
 80017c6:	4b70      	ldr	r3, [pc, #448]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a6f      	ldr	r2, [pc, #444]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b6d      	ldr	r3, [pc, #436]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6c      	ldr	r2, [pc, #432]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80017d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0xb0>
 80017e0:	4b69      	ldr	r3, [pc, #420]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a68      	ldr	r2, [pc, #416]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b66      	ldr	r3, [pc, #408]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a65      	ldr	r2, [pc, #404]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fc6c 	bl	80010dc <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fc68 	bl	80010dc <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e207      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b5b      	ldr	r3, [pc, #364]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0xc0>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fc58 	bl	80010dc <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fc54 	bl	80010dc <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1f3      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	4b51      	ldr	r3, [pc, #324]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0xe8>
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d063      	beq.n	8001926 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800185e:	4b4a      	ldr	r3, [pc, #296]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001872:	2b08      	cmp	r3, #8
 8001874:	d11c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001876:	4b44      	ldr	r3, [pc, #272]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d116      	bne.n	80018b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	4b41      	ldr	r3, [pc, #260]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x152>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e1c7      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4937      	ldr	r1, [pc, #220]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	e03a      	b.n	8001926 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b8:	4b34      	ldr	r3, [pc, #208]	; (800198c <HAL_RCC_OscConfig+0x244>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff fc0d 	bl	80010dc <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c6:	f7ff fc09 	bl	80010dc <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1a8      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4925      	ldr	r1, [pc, #148]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
 80018f8:	e015      	b.n	8001926 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_RCC_OscConfig+0x244>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fbec 	bl	80010dc <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff fbe8 	bl	80010dc <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e187      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d036      	beq.n	80019a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d016      	beq.n	8001968 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_RCC_OscConfig+0x248>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff fbcc 	bl	80010dc <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001948:	f7ff fbc8 	bl	80010dc <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e167      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_RCC_OscConfig+0x240>)
 800195c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x200>
 8001966:	e01b      	b.n	80019a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_OscConfig+0x248>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7ff fbb5 	bl	80010dc <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	e00e      	b.n	8001994 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001976:	f7ff fbb1 	bl	80010dc <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d907      	bls.n	8001994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e150      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
 8001988:	40023800 	.word	0x40023800
 800198c:	42470000 	.word	0x42470000
 8001990:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	4b88      	ldr	r3, [pc, #544]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1ea      	bne.n	8001976 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8097 	beq.w	8001adc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10f      	bne.n	80019de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b7d      	ldr	r3, [pc, #500]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a7c      	ldr	r2, [pc, #496]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b7a      	ldr	r3, [pc, #488]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019da:	2301      	movs	r3, #1
 80019dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019de:	4b77      	ldr	r3, [pc, #476]	; (8001bbc <HAL_RCC_OscConfig+0x474>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ea:	4b74      	ldr	r3, [pc, #464]	; (8001bbc <HAL_RCC_OscConfig+0x474>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a73      	ldr	r2, [pc, #460]	; (8001bbc <HAL_RCC_OscConfig+0x474>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f6:	f7ff fb71 	bl	80010dc <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fe:	f7ff fb6d 	bl	80010dc <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e10c      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	4b6a      	ldr	r3, [pc, #424]	; (8001bbc <HAL_RCC_OscConfig+0x474>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x2ea>
 8001a24:	4b64      	ldr	r3, [pc, #400]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	4a63      	ldr	r2, [pc, #396]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a30:	e01c      	b.n	8001a6c <HAL_RCC_OscConfig+0x324>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x30c>
 8001a3a:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a5e      	ldr	r2, [pc, #376]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
 8001a46:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	4a5b      	ldr	r2, [pc, #364]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6713      	str	r3, [r2, #112]	; 0x70
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0x324>
 8001a54:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a58:	4a57      	ldr	r2, [pc, #348]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a60:	4b55      	ldr	r3, [pc, #340]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a64:	4a54      	ldr	r2, [pc, #336]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a66:	f023 0304 	bic.w	r3, r3, #4
 8001a6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d015      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff fb32 	bl	80010dc <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fb2e 	bl	80010dc <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e0cb      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a92:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0ee      	beq.n	8001a7c <HAL_RCC_OscConfig+0x334>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fb1c 	bl	80010dc <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fb18 	bl	80010dc <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e0b5      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abe:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1ee      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad0:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	4a38      	ldr	r2, [pc, #224]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ada:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80a1 	beq.w	8001c28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ae6:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d05c      	beq.n	8001bac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d141      	bne.n	8001b7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_RCC_OscConfig+0x478>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff faec 	bl	80010dc <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff fae8 	bl	80010dc <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e087      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	041b      	lsls	r3, r3, #16
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	061b      	lsls	r3, r3, #24
 8001b4a:	491b      	ldr	r1, [pc, #108]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x478>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7ff fac1 	bl	80010dc <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7ff fabd 	bl	80010dc <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e05c      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x416>
 8001b7c:	e054      	b.n	8001c28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_RCC_OscConfig+0x478>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff faaa 	bl	80010dc <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff faa6 	bl	80010dc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e045      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x444>
 8001baa:	e03d      	b.n	8001c28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e038      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_RCC_OscConfig+0x4ec>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d028      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d121      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d11a      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d111      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	085b      	lsrs	r3, r3, #1
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0cc      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d90c      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b65      	ldr	r3, [pc, #404]	; (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b63      	ldr	r3, [pc, #396]	; (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0b8      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c8c:	4b59      	ldr	r3, [pc, #356]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a58      	ldr	r2, [pc, #352]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca4:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb0:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	494d      	ldr	r1, [pc, #308]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d044      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d119      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e07f      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d003      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e06f      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d06:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e067      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f023 0203 	bic.w	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4934      	ldr	r1, [pc, #208]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d28:	f7ff f9d8 	bl	80010dc <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d30:	f7ff f9d4 	bl	80010dc <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e04f      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 020c 	and.w	r2, r3, #12
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1eb      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d58:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d20c      	bcs.n	8001d80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e032      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4916      	ldr	r1, [pc, #88]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	490e      	ldr	r1, [pc, #56]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dbe:	f000 f821 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	490a      	ldr	r1, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	5ccb      	ldrb	r3, [r1, r3]
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f82e 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023c00 	.word	0x40023c00
 8001df4:	40023800 	.word	0x40023800
 8001df8:	08007238 	.word	0x08007238
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000004 	.word	0x20000004

08001e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e08:	b094      	sub	sp, #80	; 0x50
 8001e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e1c:	4b79      	ldr	r3, [pc, #484]	; (8002004 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d00d      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x40>
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	f200 80e1 	bhi.w	8001ff0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x34>
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d003      	beq.n	8001e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e36:	e0db      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b73      	ldr	r3, [pc, #460]	; (8002008 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e3c:	e0db      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e3e:	4b73      	ldr	r3, [pc, #460]	; (800200c <HAL_RCC_GetSysClockFreq+0x208>)
 8001e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e42:	e0d8      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e44:	4b6f      	ldr	r3, [pc, #444]	; (8002004 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e4c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e4e:	4b6d      	ldr	r3, [pc, #436]	; (8002004 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d063      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5a:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	099b      	lsrs	r3, r3, #6
 8001e60:	2200      	movs	r2, #0
 8001e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e6e:	2300      	movs	r3, #0
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
 8001e72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e76:	4622      	mov	r2, r4
 8001e78:	462b      	mov	r3, r5
 8001e7a:	f04f 0000 	mov.w	r0, #0
 8001e7e:	f04f 0100 	mov.w	r1, #0
 8001e82:	0159      	lsls	r1, r3, #5
 8001e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e88:	0150      	lsls	r0, r2, #5
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4621      	mov	r1, r4
 8001e90:	1a51      	subs	r1, r2, r1
 8001e92:	6139      	str	r1, [r7, #16]
 8001e94:	4629      	mov	r1, r5
 8001e96:	eb63 0301 	sbc.w	r3, r3, r1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ea8:	4659      	mov	r1, fp
 8001eaa:	018b      	lsls	r3, r1, #6
 8001eac:	4651      	mov	r1, sl
 8001eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eb2:	4651      	mov	r1, sl
 8001eb4:	018a      	lsls	r2, r1, #6
 8001eb6:	4651      	mov	r1, sl
 8001eb8:	ebb2 0801 	subs.w	r8, r2, r1
 8001ebc:	4659      	mov	r1, fp
 8001ebe:	eb63 0901 	sbc.w	r9, r3, r1
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ed6:	4690      	mov	r8, r2
 8001ed8:	4699      	mov	r9, r3
 8001eda:	4623      	mov	r3, r4
 8001edc:	eb18 0303 	adds.w	r3, r8, r3
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	462b      	mov	r3, r5
 8001ee4:	eb49 0303 	adc.w	r3, r9, r3
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	024b      	lsls	r3, r1, #9
 8001efa:	4621      	mov	r1, r4
 8001efc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f00:	4621      	mov	r1, r4
 8001f02:	024a      	lsls	r2, r1, #9
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f14:	f7fe f9b4 	bl	8000280 <__aeabi_uldivmod>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f20:	e058      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f22:	4b38      	ldr	r3, [pc, #224]	; (8002004 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	099b      	lsrs	r3, r3, #6
 8001f28:	2200      	movs	r2, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f32:	623b      	str	r3, [r7, #32]
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
 8001f38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f3c:	4642      	mov	r2, r8
 8001f3e:	464b      	mov	r3, r9
 8001f40:	f04f 0000 	mov.w	r0, #0
 8001f44:	f04f 0100 	mov.w	r1, #0
 8001f48:	0159      	lsls	r1, r3, #5
 8001f4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f4e:	0150      	lsls	r0, r2, #5
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4641      	mov	r1, r8
 8001f56:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f5a:	4649      	mov	r1, r9
 8001f5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f74:	ebb2 040a 	subs.w	r4, r2, sl
 8001f78:	eb63 050b 	sbc.w	r5, r3, fp
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	00eb      	lsls	r3, r5, #3
 8001f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f8a:	00e2      	lsls	r2, r4, #3
 8001f8c:	4614      	mov	r4, r2
 8001f8e:	461d      	mov	r5, r3
 8001f90:	4643      	mov	r3, r8
 8001f92:	18e3      	adds	r3, r4, r3
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	464b      	mov	r3, r9
 8001f98:	eb45 0303 	adc.w	r3, r5, r3
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001faa:	4629      	mov	r1, r5
 8001fac:	028b      	lsls	r3, r1, #10
 8001fae:	4621      	mov	r1, r4
 8001fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	028a      	lsls	r2, r1, #10
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	61fa      	str	r2, [r7, #28]
 8001fc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fc8:	f7fe f95a 	bl	8000280 <__aeabi_uldivmod>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fee:	e002      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ff2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3750      	adds	r7, #80	; 0x50
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	00f42400 	.word	0x00f42400
 800200c:	007a1200 	.word	0x007a1200

08002010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_RCC_GetHCLKFreq+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000000 	.word	0x20000000

08002028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800202c:	f7ff fff0 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	0a9b      	lsrs	r3, r3, #10
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	4903      	ldr	r1, [pc, #12]	; (800204c <HAL_RCC_GetPCLK1Freq+0x24>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	08007248 	.word	0x08007248

08002050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002054:	f7ff ffdc 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0b5b      	lsrs	r3, r3, #13
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4903      	ldr	r1, [pc, #12]	; (8002074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	08007248 	.word	0x08007248

08002078 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	220f      	movs	r2, #15
 8002086:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_RCC_GetClockConfig+0x5c>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0203 	and.w	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_RCC_GetClockConfig+0x5c>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <HAL_RCC_GetClockConfig+0x5c>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_GetClockConfig+0x5c>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	08db      	lsrs	r3, r3, #3
 80020b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <HAL_RCC_GetClockConfig+0x60>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0207 	and.w	r2, r3, #7
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	601a      	str	r2, [r3, #0]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40023c00 	.word	0x40023c00

080020dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002100:	2b00      	cmp	r3, #0
 8002102:	d035      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002104:	4b62      	ldr	r3, [pc, #392]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800210a:	f7fe ffe7 	bl	80010dc <HAL_GetTick>
 800210e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002112:	f7fe ffe3 	bl	80010dc <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0b0      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002124:	4b5b      	ldr	r3, [pc, #364]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f0      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	019a      	lsls	r2, r3, #6
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	071b      	lsls	r3, r3, #28
 800213c:	4955      	ldr	r1, [pc, #340]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002144:	4b52      	ldr	r3, [pc, #328]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800214a:	f7fe ffc7 	bl	80010dc <HAL_GetTick>
 800214e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002152:	f7fe ffc3 	bl	80010dc <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e090      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002164:	4b4b      	ldr	r3, [pc, #300]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8083 	beq.w	8002284 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b44      	ldr	r3, [pc, #272]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a43      	ldr	r2, [pc, #268]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800219a:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a3e      	ldr	r2, [pc, #248]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021a6:	f7fe ff99 	bl	80010dc <HAL_GetTick>
 80021aa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ae:	f7fe ff95 	bl	80010dc <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e062      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021cc:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d02f      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d028      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021ea:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002200:	4a24      	ldr	r2, [pc, #144]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002206:	4b23      	ldr	r3, [pc, #140]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d114      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe ff63 	bl	80010dc <HAL_GetTick>
 8002216:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7fe ff5f 	bl	80010dc <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e02a      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ee      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002248:	d10d      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800225a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800225e:	490d      	ldr	r1, [pc, #52]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
 8002264:	e005      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800226c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002270:	6093      	str	r3, [r2, #8]
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002274:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227e:	4905      	ldr	r1, [pc, #20]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002280:	4313      	orrs	r3, r2
 8002282:	670b      	str	r3, [r1, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	42470068 	.word	0x42470068
 8002294:	40023800 	.word	0x40023800
 8002298:	40007000 	.word	0x40007000
 800229c:	42470e40 	.word	0x42470e40

080022a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e073      	b.n	800239e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7f5b      	ldrb	r3, [r3, #29]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fd40 	bl	8000d4c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d055      	beq.n	800238c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	22ca      	movs	r2, #202	; 0xca
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2253      	movs	r2, #83	; 0x53
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f87f 	bl	80023f4 <RTC_EnterInitMode>
 80022f6:	4603      	mov	r3, r0
 80022f8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d12c      	bne.n	800235a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800230e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002312:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68d2      	ldr	r2, [r2, #12]
 800233a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6919      	ldr	r1, [r3, #16]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	041a      	lsls	r2, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f886 	bl	8002462 <RTC_ExitInitMode>
 8002356:	4603      	mov	r3, r0
 8002358:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d110      	bne.n	8002382 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	22ff      	movs	r2, #255	; 0xff
 8002388:	625a      	str	r2, [r3, #36]	; 0x24
 800238a:	e001      	b.n	8002390 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <HAL_RTC_WaitForSynchro+0x48>)
 80023ba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023bc:	f7fe fe8e 	bl	80010dc <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023c2:	e009      	b.n	80023d8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023c4:	f7fe fe8a 	bl	80010dc <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d2:	d901      	bls.n	80023d8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e007      	b.n	80023e8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0ee      	beq.n	80023c4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	00017f5f 	.word	0x00017f5f

080023f4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d122      	bne.n	8002458 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002420:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002422:	f7fe fe5b 	bl	80010dc <HAL_GetTick>
 8002426:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002428:	e00c      	b.n	8002444 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800242a:	f7fe fe57 	bl	80010dc <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002438:	d904      	bls.n	8002444 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2204      	movs	r2, #4
 800243e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d102      	bne.n	8002458 <RTC_EnterInitMode+0x64>
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d1e8      	bne.n	800242a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff8b 	bl	80023a8 <HAL_RTC_WaitForSynchro>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2204      	movs	r2, #4
 800249c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e041      	b.n	8002542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f839 	bl	800254a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f000 f9c0 	bl	8002870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d001      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e04e      	b.n	8002616 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a23      	ldr	r2, [pc, #140]	; (8002624 <HAL_TIM_Base_Start_IT+0xc4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d022      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a2:	d01d      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <HAL_TIM_Base_Start_IT+0xc8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d018      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1e      	ldr	r2, [pc, #120]	; (800262c <HAL_TIM_Base_Start_IT+0xcc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_TIM_Base_Start_IT+0xd0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00e      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_TIM_Base_Start_IT+0xd4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d009      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_TIM_Base_Start_IT+0xd8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x80>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a18      	ldr	r2, [pc, #96]	; (800263c <HAL_TIM_Base_Start_IT+0xdc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d111      	bne.n	8002604 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d010      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002602:	e007      	b.n	8002614 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40010000 	.word	0x40010000
 8002628:	40000400 	.word	0x40000400
 800262c:	40000800 	.word	0x40000800
 8002630:	40000c00 	.word	0x40000c00
 8002634:	40010400 	.word	0x40010400
 8002638:	40014000 	.word	0x40014000
 800263c:	40001800 	.word	0x40001800

08002640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d020      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01b      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0202 	mvn.w	r2, #2
 8002674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8d2 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8c4 	bl	8002820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f8d5 	bl	8002848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d020      	beq.n	80026f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01b      	beq.n	80026f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0204 	mvn.w	r2, #4
 80026c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f8ac 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 80026dc:	e005      	b.n	80026ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f89e 	bl	8002820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f8af 	bl	8002848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d020      	beq.n	800273c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01b      	beq.n	800273c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0208 	mvn.w	r2, #8
 800270c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2204      	movs	r2, #4
 8002712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f886 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 8002728:	e005      	b.n	8002736 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f878 	bl	8002820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f889 	bl	8002848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d020      	beq.n	8002788 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01b      	beq.n	8002788 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0210 	mvn.w	r2, #16
 8002758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2208      	movs	r2, #8
 800275e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f860 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f852 	bl	8002820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f863 	bl	8002848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0201 	mvn.w	r2, #1
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fa90 	bl	8000ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00c      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f906 	bl	80029dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f834 	bl	800285c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00c      	beq.n	8002818 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0220 	mvn.w	r2, #32
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f8d8 	bl	80029c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a46      	ldr	r2, [pc, #280]	; (800299c <TIM_Base_SetConfig+0x12c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d013      	beq.n	80028b0 <TIM_Base_SetConfig+0x40>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d00f      	beq.n	80028b0 <TIM_Base_SetConfig+0x40>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a43      	ldr	r2, [pc, #268]	; (80029a0 <TIM_Base_SetConfig+0x130>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00b      	beq.n	80028b0 <TIM_Base_SetConfig+0x40>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a42      	ldr	r2, [pc, #264]	; (80029a4 <TIM_Base_SetConfig+0x134>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d007      	beq.n	80028b0 <TIM_Base_SetConfig+0x40>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a41      	ldr	r2, [pc, #260]	; (80029a8 <TIM_Base_SetConfig+0x138>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d003      	beq.n	80028b0 <TIM_Base_SetConfig+0x40>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a40      	ldr	r2, [pc, #256]	; (80029ac <TIM_Base_SetConfig+0x13c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d108      	bne.n	80028c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a35      	ldr	r2, [pc, #212]	; (800299c <TIM_Base_SetConfig+0x12c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d02b      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d0:	d027      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a32      	ldr	r2, [pc, #200]	; (80029a0 <TIM_Base_SetConfig+0x130>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d023      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a31      	ldr	r2, [pc, #196]	; (80029a4 <TIM_Base_SetConfig+0x134>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01f      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a30      	ldr	r2, [pc, #192]	; (80029a8 <TIM_Base_SetConfig+0x138>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01b      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a2f      	ldr	r2, [pc, #188]	; (80029ac <TIM_Base_SetConfig+0x13c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d017      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a2e      	ldr	r2, [pc, #184]	; (80029b0 <TIM_Base_SetConfig+0x140>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <TIM_Base_SetConfig+0x144>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00f      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a2c      	ldr	r2, [pc, #176]	; (80029b8 <TIM_Base_SetConfig+0x148>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00b      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a2b      	ldr	r2, [pc, #172]	; (80029bc <TIM_Base_SetConfig+0x14c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d007      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a2a      	ldr	r2, [pc, #168]	; (80029c0 <TIM_Base_SetConfig+0x150>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d003      	beq.n	8002922 <TIM_Base_SetConfig+0xb2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a29      	ldr	r2, [pc, #164]	; (80029c4 <TIM_Base_SetConfig+0x154>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d108      	bne.n	8002934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a10      	ldr	r2, [pc, #64]	; (800299c <TIM_Base_SetConfig+0x12c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d003      	beq.n	8002968 <TIM_Base_SetConfig+0xf8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a12      	ldr	r2, [pc, #72]	; (80029ac <TIM_Base_SetConfig+0x13c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d103      	bne.n	8002970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b01      	cmp	r3, #1
 8002980:	d105      	bne.n	800298e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f023 0201 	bic.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	611a      	str	r2, [r3, #16]
  }
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40010000 	.word	0x40010000
 80029a0:	40000400 	.word	0x40000400
 80029a4:	40000800 	.word	0x40000800
 80029a8:	40000c00 	.word	0x40000c00
 80029ac:	40010400 	.word	0x40010400
 80029b0:	40014000 	.word	0x40014000
 80029b4:	40014400 	.word	0x40014400
 80029b8:	40014800 	.word	0x40014800
 80029bc:	40001800 	.word	0x40001800
 80029c0:	40001c00 	.word	0x40001c00
 80029c4:	40002000 	.word	0x40002000

080029c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e042      	b.n	8002a88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe f9c2 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2224      	movs	r2, #36	; 0x24
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fd69 	bl	800350c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d175      	bne.n	8002b9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_UART_Transmit+0x2c>
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e06e      	b.n	8002b9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2221      	movs	r2, #33	; 0x21
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ace:	f7fe fb05 	bl	80010dc <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae8:	d108      	bne.n	8002afc <HAL_UART_Transmit+0x6c>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d104      	bne.n	8002afc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	e003      	b.n	8002b04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b04:	e02e      	b.n	8002b64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2180      	movs	r1, #128	; 0x80
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fb05 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e03a      	b.n	8002b9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	3302      	adds	r3, #2
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e007      	b.n	8002b56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	3301      	adds	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1cb      	bne.n	8002b06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2200      	movs	r2, #0
 8002b76:	2140      	movs	r1, #64	; 0x40
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fad1 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e006      	b.n	8002b9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e000      	b.n	8002b9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
  }
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b0ba      	sub	sp, #232	; 0xe8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HAL_UART_IRQHandler+0x66>
 8002bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fbc2 	bl	8003390 <UART_Receive_IT>
      return;
 8002c0c:	e25b      	b.n	80030c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80de 	beq.w	8002dd4 <HAL_UART_IRQHandler+0x22c>
 8002c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d106      	bne.n	8002c32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80d1 	beq.w	8002dd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_UART_IRQHandler+0xae>
 8002c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_UART_IRQHandler+0xd2>
 8002c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f043 0202 	orr.w	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_UART_IRQHandler+0xf6>
 8002c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f043 0204 	orr.w	r2, r3, #4
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d011      	beq.n	8002cce <HAL_UART_IRQHandler+0x126>
 8002caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f043 0208 	orr.w	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 81f2 	beq.w	80030bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x14e>
 8002ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fb4d 	bl	8003390 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b40      	cmp	r3, #64	; 0x40
 8002d02:	bf0c      	ite	eq
 8002d04:	2301      	moveq	r3, #1
 8002d06:	2300      	movne	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <HAL_UART_IRQHandler+0x17a>
 8002d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d04f      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa55 	bl	80031d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	d141      	bne.n	8002dba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3314      	adds	r3, #20
 8002d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3314      	adds	r3, #20
 8002d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1d9      	bne.n	8002d36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d013      	beq.n	8002db2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	4a7e      	ldr	r2, [pc, #504]	; (8002f88 <HAL_UART_IRQHandler+0x3e0>)
 8002d90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fafe 	bl	8001398 <HAL_DMA_Abort_IT>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dac:	4610      	mov	r0, r2
 8002dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	e00e      	b.n	8002dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f99e 	bl	80030f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db8:	e00a      	b.n	8002dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f99a 	bl	80030f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	e006      	b.n	8002dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f996 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002dce:	e175      	b.n	80030bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd0:	bf00      	nop
    return;
 8002dd2:	e173      	b.n	80030bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	f040 814f 	bne.w	800307c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8148 	beq.w	800307c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8141 	beq.w	800307c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	f040 80b6 	bne.w	8002f8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8145 	beq.w	80030c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	f080 813e 	bcs.w	80030c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e56:	f000 8088 	beq.w	8002f6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	330c      	adds	r3, #12
 8002e82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1d9      	bne.n	8002e5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3314      	adds	r3, #20
 8002eac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb0:	e853 3f00 	ldrex	r3, [r3]
 8002eb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ece:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e1      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3314      	adds	r3, #20
 8002ee8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3314      	adds	r3, #20
 8002f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f0e:	e841 2300 	strex	r3, r2, [r1]
 8002f12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e3      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f3a:	f023 0310 	bic.w	r3, r3, #16
 8002f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	330c      	adds	r3, #12
 8002f48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e3      	bne.n	8002f28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe f9a7 	bl	80012b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f8c1 	bl	8003108 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f86:	e09b      	b.n	80030c0 <HAL_UART_IRQHandler+0x518>
 8002f88:	08003299 	.word	0x08003299
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 808e 	beq.w	80030c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8089 	beq.w	80030c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	330c      	adds	r3, #12
 8002fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	e853 3f00 	ldrex	r3, [r3]
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002fd6:	647a      	str	r2, [r7, #68]	; 0x44
 8002fd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fde:	e841 2300 	strex	r3, r2, [r1]
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1e3      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3314      	adds	r3, #20
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	e853 3f00 	ldrex	r3, [r3]
 8002ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3314      	adds	r3, #20
 800300a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800300e:	633a      	str	r2, [r7, #48]	; 0x30
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003016:	e841 2300 	strex	r3, r2, [r1]
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e3      	bne.n	8002fea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	330c      	adds	r3, #12
 8003036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	e853 3f00 	ldrex	r3, [r3]
 800303e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0310 	bic.w	r3, r3, #16
 8003046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003054:	61fa      	str	r2, [r7, #28]
 8003056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	69b9      	ldr	r1, [r7, #24]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	e841 2300 	strex	r3, r2, [r1]
 8003060:	617b      	str	r3, [r7, #20]
   return(result);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e3      	bne.n	8003030 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800306e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f847 	bl	8003108 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800307a:	e023      	b.n	80030c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	d009      	beq.n	800309c <HAL_UART_IRQHandler+0x4f4>
 8003088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f913 	bl	80032c0 <UART_Transmit_IT>
    return;
 800309a:	e014      	b.n	80030c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800309c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00e      	beq.n	80030c6 <HAL_UART_IRQHandler+0x51e>
 80030a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f953 	bl	8003360 <UART_EndTransmit_IT>
    return;
 80030ba:	e004      	b.n	80030c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80030bc:	bf00      	nop
 80030be:	e002      	b.n	80030c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80030c0:	bf00      	nop
 80030c2:	e000      	b.n	80030c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80030c4:	bf00      	nop
  }
}
 80030c6:	37e8      	adds	r7, #232	; 0xe8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003130:	e03b      	b.n	80031aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d037      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7fd ffcf 	bl	80010dc <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	6a3a      	ldr	r2, [r7, #32]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <UART_WaitOnFlagUntilTimeout+0x30>
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e03a      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d023      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b80      	cmp	r3, #128	; 0x80
 8003166:	d020      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b40      	cmp	r3, #64	; 0x40
 800316c:	d01d      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b08      	cmp	r3, #8
 800317a:	d116      	bne.n	80031aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f81d 	bl	80031d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2208      	movs	r2, #8
 800319c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00f      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4013      	ands	r3, r2
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	bf0c      	ite	eq
 80031ba:	2301      	moveq	r3, #1
 80031bc:	2300      	movne	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d0b4      	beq.n	8003132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b095      	sub	sp, #84	; 0x54
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	330c      	adds	r3, #12
 80031e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031fa:	643a      	str	r2, [r7, #64]	; 0x40
 80031fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003200:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1e5      	bne.n	80031da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3314      	adds	r3, #20
 8003214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	61fb      	str	r3, [r7, #28]
   return(result);
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	64bb      	str	r3, [r7, #72]	; 0x48
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3314      	adds	r3, #20
 800322c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800322e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e5      	bne.n	800320e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	2b01      	cmp	r3, #1
 8003248:	d119      	bne.n	800327e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	60bb      	str	r3, [r7, #8]
   return(result);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f023 0310 	bic.w	r3, r3, #16
 8003260:	647b      	str	r3, [r7, #68]	; 0x44
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800326a:	61ba      	str	r2, [r7, #24]
 800326c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	6979      	ldr	r1, [r7, #20]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	613b      	str	r3, [r7, #16]
   return(result);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e5      	bne.n	800324a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800328c:	bf00      	nop
 800328e:	3754      	adds	r7, #84	; 0x54
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff ff1e 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b21      	cmp	r3, #33	; 0x21
 80032d2:	d13e      	bne.n	8003352 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	d114      	bne.n	8003308 <UART_Transmit_IT+0x48>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d110      	bne.n	8003308 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	1c9a      	adds	r2, r3, #2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	621a      	str	r2, [r3, #32]
 8003306:	e008      	b.n	800331a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	1c59      	adds	r1, r3, #1
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6211      	str	r1, [r2, #32]
 8003312:	781a      	ldrb	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29b      	uxth	r3, r3
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4619      	mov	r1, r3
 8003328:	84d1      	strh	r1, [r2, #38]	; 0x26
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10f      	bne.n	800334e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800333c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800334c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	e000      	b.n	8003354 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
  }
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003376:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fea3 	bl	80030cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	; 0x30
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b22      	cmp	r3, #34	; 0x22
 80033a2:	f040 80ae 	bne.w	8003502 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ae:	d117      	bne.n	80033e0 <UART_Receive_IT+0x50>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d113      	bne.n	80033e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	1c9a      	adds	r2, r3, #2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	629a      	str	r2, [r3, #40]	; 0x28
 80033de:	e026      	b.n	800342e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f2:	d007      	beq.n	8003404 <UART_Receive_IT+0x74>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <UART_Receive_IT+0x82>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	701a      	strb	r2, [r3, #0]
 8003410:	e008      	b.n	8003424 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800341e:	b2da      	uxtb	r2, r3
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29b      	uxth	r3, r3
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	4619      	mov	r1, r3
 800343c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800343e:	2b00      	cmp	r3, #0
 8003440:	d15d      	bne.n	80034fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0220 	bic.w	r2, r2, #32
 8003450:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003460:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	2b01      	cmp	r3, #1
 8003486:	d135      	bne.n	80034f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	613b      	str	r3, [r7, #16]
   return(result);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f023 0310 	bic.w	r3, r3, #16
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	330c      	adds	r3, #12
 80034ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ae:	623a      	str	r2, [r7, #32]
 80034b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	69f9      	ldr	r1, [r7, #28]
 80034b4:	6a3a      	ldr	r2, [r7, #32]
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e5      	bne.n	800348e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d10a      	bne.n	80034e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fe0b 	bl	8003108 <HAL_UARTEx_RxEventCallback>
 80034f2:	e002      	b.n	80034fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff fdf3 	bl	80030e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e002      	b.n	8003504 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	3730      	adds	r7, #48	; 0x30
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800350c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003510:	b0c0      	sub	sp, #256	; 0x100
 8003512:	af00      	add	r7, sp, #0
 8003514:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003528:	68d9      	ldr	r1, [r3, #12]
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	ea40 0301 	orr.w	r3, r0, r1
 8003534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	431a      	orrs	r2, r3
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	431a      	orrs	r2, r3
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003564:	f021 010c 	bic.w	r1, r1, #12
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003572:	430b      	orrs	r3, r1
 8003574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	6999      	ldr	r1, [r3, #24]
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	ea40 0301 	orr.w	r3, r0, r1
 8003592:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4b8f      	ldr	r3, [pc, #572]	; (80037d8 <UART_SetConfig+0x2cc>)
 800359c:	429a      	cmp	r2, r3
 800359e:	d005      	beq.n	80035ac <UART_SetConfig+0xa0>
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b8d      	ldr	r3, [pc, #564]	; (80037dc <UART_SetConfig+0x2d0>)
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d104      	bne.n	80035b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035ac:	f7fe fd50 	bl	8002050 <HAL_RCC_GetPCLK2Freq>
 80035b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035b4:	e003      	b.n	80035be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035b6:	f7fe fd37 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 80035ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c8:	f040 810c 	bne.w	80037e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d0:	2200      	movs	r2, #0
 80035d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035de:	4622      	mov	r2, r4
 80035e0:	462b      	mov	r3, r5
 80035e2:	1891      	adds	r1, r2, r2
 80035e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80035e6:	415b      	adcs	r3, r3
 80035e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035ee:	4621      	mov	r1, r4
 80035f0:	eb12 0801 	adds.w	r8, r2, r1
 80035f4:	4629      	mov	r1, r5
 80035f6:	eb43 0901 	adc.w	r9, r3, r1
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800360a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360e:	4690      	mov	r8, r2
 8003610:	4699      	mov	r9, r3
 8003612:	4623      	mov	r3, r4
 8003614:	eb18 0303 	adds.w	r3, r8, r3
 8003618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800361c:	462b      	mov	r3, r5
 800361e:	eb49 0303 	adc.w	r3, r9, r3
 8003622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003632:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800363a:	460b      	mov	r3, r1
 800363c:	18db      	adds	r3, r3, r3
 800363e:	653b      	str	r3, [r7, #80]	; 0x50
 8003640:	4613      	mov	r3, r2
 8003642:	eb42 0303 	adc.w	r3, r2, r3
 8003646:	657b      	str	r3, [r7, #84]	; 0x54
 8003648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800364c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003650:	f7fc fe16 	bl	8000280 <__aeabi_uldivmod>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4b61      	ldr	r3, [pc, #388]	; (80037e0 <UART_SetConfig+0x2d4>)
 800365a:	fba3 2302 	umull	r2, r3, r3, r2
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	011c      	lsls	r4, r3, #4
 8003662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003666:	2200      	movs	r2, #0
 8003668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800366c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003670:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003674:	4642      	mov	r2, r8
 8003676:	464b      	mov	r3, r9
 8003678:	1891      	adds	r1, r2, r2
 800367a:	64b9      	str	r1, [r7, #72]	; 0x48
 800367c:	415b      	adcs	r3, r3
 800367e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003680:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003684:	4641      	mov	r1, r8
 8003686:	eb12 0a01 	adds.w	sl, r2, r1
 800368a:	4649      	mov	r1, r9
 800368c:	eb43 0b01 	adc.w	fp, r3, r1
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800369c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036a4:	4692      	mov	sl, r2
 80036a6:	469b      	mov	fp, r3
 80036a8:	4643      	mov	r3, r8
 80036aa:	eb1a 0303 	adds.w	r3, sl, r3
 80036ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036b2:	464b      	mov	r3, r9
 80036b4:	eb4b 0303 	adc.w	r3, fp, r3
 80036b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036d0:	460b      	mov	r3, r1
 80036d2:	18db      	adds	r3, r3, r3
 80036d4:	643b      	str	r3, [r7, #64]	; 0x40
 80036d6:	4613      	mov	r3, r2
 80036d8:	eb42 0303 	adc.w	r3, r2, r3
 80036dc:	647b      	str	r3, [r7, #68]	; 0x44
 80036de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036e6:	f7fc fdcb 	bl	8000280 <__aeabi_uldivmod>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <UART_SetConfig+0x2d4>)
 80036f2:	fba3 2301 	umull	r2, r3, r3, r1
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2264      	movs	r2, #100	; 0x64
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	1acb      	subs	r3, r1, r3
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003706:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <UART_SetConfig+0x2d4>)
 8003708:	fba3 2302 	umull	r2, r3, r3, r2
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003714:	441c      	add	r4, r3
 8003716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800371a:	2200      	movs	r2, #0
 800371c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003720:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003724:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003728:	4642      	mov	r2, r8
 800372a:	464b      	mov	r3, r9
 800372c:	1891      	adds	r1, r2, r2
 800372e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003730:	415b      	adcs	r3, r3
 8003732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003738:	4641      	mov	r1, r8
 800373a:	1851      	adds	r1, r2, r1
 800373c:	6339      	str	r1, [r7, #48]	; 0x30
 800373e:	4649      	mov	r1, r9
 8003740:	414b      	adcs	r3, r1
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003750:	4659      	mov	r1, fp
 8003752:	00cb      	lsls	r3, r1, #3
 8003754:	4651      	mov	r1, sl
 8003756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800375a:	4651      	mov	r1, sl
 800375c:	00ca      	lsls	r2, r1, #3
 800375e:	4610      	mov	r0, r2
 8003760:	4619      	mov	r1, r3
 8003762:	4603      	mov	r3, r0
 8003764:	4642      	mov	r2, r8
 8003766:	189b      	adds	r3, r3, r2
 8003768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800376c:	464b      	mov	r3, r9
 800376e:	460a      	mov	r2, r1
 8003770:	eb42 0303 	adc.w	r3, r2, r3
 8003774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003784:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800378c:	460b      	mov	r3, r1
 800378e:	18db      	adds	r3, r3, r3
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
 8003792:	4613      	mov	r3, r2
 8003794:	eb42 0303 	adc.w	r3, r2, r3
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800379e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037a2:	f7fc fd6d 	bl	8000280 <__aeabi_uldivmod>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <UART_SetConfig+0x2d4>)
 80037ac:	fba3 1302 	umull	r1, r3, r3, r2
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	2164      	movs	r1, #100	; 0x64
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	3332      	adds	r3, #50	; 0x32
 80037be:	4a08      	ldr	r2, [pc, #32]	; (80037e0 <UART_SetConfig+0x2d4>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	f003 0207 	and.w	r2, r3, #7
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4422      	add	r2, r4
 80037d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037d4:	e106      	b.n	80039e4 <UART_SetConfig+0x4d8>
 80037d6:	bf00      	nop
 80037d8:	40011000 	.word	0x40011000
 80037dc:	40011400 	.word	0x40011400
 80037e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037e8:	2200      	movs	r2, #0
 80037ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037f6:	4642      	mov	r2, r8
 80037f8:	464b      	mov	r3, r9
 80037fa:	1891      	adds	r1, r2, r2
 80037fc:	6239      	str	r1, [r7, #32]
 80037fe:	415b      	adcs	r3, r3
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
 8003802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003806:	4641      	mov	r1, r8
 8003808:	1854      	adds	r4, r2, r1
 800380a:	4649      	mov	r1, r9
 800380c:	eb43 0501 	adc.w	r5, r3, r1
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	00eb      	lsls	r3, r5, #3
 800381a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800381e:	00e2      	lsls	r2, r4, #3
 8003820:	4614      	mov	r4, r2
 8003822:	461d      	mov	r5, r3
 8003824:	4643      	mov	r3, r8
 8003826:	18e3      	adds	r3, r4, r3
 8003828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800382c:	464b      	mov	r3, r9
 800382e:	eb45 0303 	adc.w	r3, r5, r3
 8003832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003842:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003852:	4629      	mov	r1, r5
 8003854:	008b      	lsls	r3, r1, #2
 8003856:	4621      	mov	r1, r4
 8003858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800385c:	4621      	mov	r1, r4
 800385e:	008a      	lsls	r2, r1, #2
 8003860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003864:	f7fc fd0c 	bl	8000280 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4b60      	ldr	r3, [pc, #384]	; (80039f0 <UART_SetConfig+0x4e4>)
 800386e:	fba3 2302 	umull	r2, r3, r3, r2
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	011c      	lsls	r4, r3, #4
 8003876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800387a:	2200      	movs	r2, #0
 800387c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003880:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003888:	4642      	mov	r2, r8
 800388a:	464b      	mov	r3, r9
 800388c:	1891      	adds	r1, r2, r2
 800388e:	61b9      	str	r1, [r7, #24]
 8003890:	415b      	adcs	r3, r3
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003898:	4641      	mov	r1, r8
 800389a:	1851      	adds	r1, r2, r1
 800389c:	6139      	str	r1, [r7, #16]
 800389e:	4649      	mov	r1, r9
 80038a0:	414b      	adcs	r3, r1
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038b0:	4659      	mov	r1, fp
 80038b2:	00cb      	lsls	r3, r1, #3
 80038b4:	4651      	mov	r1, sl
 80038b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ba:	4651      	mov	r1, sl
 80038bc:	00ca      	lsls	r2, r1, #3
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	4603      	mov	r3, r0
 80038c4:	4642      	mov	r2, r8
 80038c6:	189b      	adds	r3, r3, r2
 80038c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038cc:	464b      	mov	r3, r9
 80038ce:	460a      	mov	r2, r1
 80038d0:	eb42 0303 	adc.w	r3, r2, r3
 80038d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80038e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038f0:	4649      	mov	r1, r9
 80038f2:	008b      	lsls	r3, r1, #2
 80038f4:	4641      	mov	r1, r8
 80038f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038fa:	4641      	mov	r1, r8
 80038fc:	008a      	lsls	r2, r1, #2
 80038fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003902:	f7fc fcbd 	bl	8000280 <__aeabi_uldivmod>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4611      	mov	r1, r2
 800390c:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <UART_SetConfig+0x4e4>)
 800390e:	fba3 2301 	umull	r2, r3, r3, r1
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2264      	movs	r2, #100	; 0x64
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	1acb      	subs	r3, r1, r3
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	3332      	adds	r3, #50	; 0x32
 8003920:	4a33      	ldr	r2, [pc, #204]	; (80039f0 <UART_SetConfig+0x4e4>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800392c:	441c      	add	r4, r3
 800392e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003932:	2200      	movs	r2, #0
 8003934:	673b      	str	r3, [r7, #112]	; 0x70
 8003936:	677a      	str	r2, [r7, #116]	; 0x74
 8003938:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	415b      	adcs	r3, r3
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800394c:	4641      	mov	r1, r8
 800394e:	1851      	adds	r1, r2, r1
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	4649      	mov	r1, r9
 8003954:	414b      	adcs	r3, r1
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003964:	4659      	mov	r1, fp
 8003966:	00cb      	lsls	r3, r1, #3
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396e:	4651      	mov	r1, sl
 8003970:	00ca      	lsls	r2, r1, #3
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	4603      	mov	r3, r0
 8003978:	4642      	mov	r2, r8
 800397a:	189b      	adds	r3, r3, r2
 800397c:	66bb      	str	r3, [r7, #104]	; 0x68
 800397e:	464b      	mov	r3, r9
 8003980:	460a      	mov	r2, r1
 8003982:	eb42 0303 	adc.w	r3, r2, r3
 8003986:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	663b      	str	r3, [r7, #96]	; 0x60
 8003992:	667a      	str	r2, [r7, #100]	; 0x64
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039a0:	4649      	mov	r1, r9
 80039a2:	008b      	lsls	r3, r1, #2
 80039a4:	4641      	mov	r1, r8
 80039a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039aa:	4641      	mov	r1, r8
 80039ac:	008a      	lsls	r2, r1, #2
 80039ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039b2:	f7fc fc65 	bl	8000280 <__aeabi_uldivmod>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <UART_SetConfig+0x4e4>)
 80039bc:	fba3 1302 	umull	r1, r3, r3, r2
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	2164      	movs	r1, #100	; 0x64
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	3332      	adds	r3, #50	; 0x32
 80039ce:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <UART_SetConfig+0x4e4>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	f003 020f 	and.w	r2, r3, #15
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4422      	add	r2, r4
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039ea:	46bd      	mov	sp, r7
 80039ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f0:	51eb851f 	.word	0x51eb851f

080039f4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f103 0208 	add.w	r2, r3, #8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f103 0208 	add.w	r2, r3, #8
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f103 0208 	add.w	r2, r3, #8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	601a      	str	r2, [r3, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aac:	d103      	bne.n	8003ab6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e00c      	b.n	8003ad0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3308      	adds	r3, #8
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e002      	b.n	8003ac4 <vListInsert+0x2e>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d2f6      	bcs.n	8003abe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	601a      	str	r2, [r3, #0]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6892      	ldr	r2, [r2, #8]
 8003b1e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6852      	ldr	r2, [r2, #4]
 8003b28:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d103      	bne.n	8003b3c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	1e5a      	subs	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003b86:	f002 fb15 	bl	80061b4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	441a      	add	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	68f9      	ldr	r1, [r7, #12]
 8003bba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bbc:	fb01 f303 	mul.w	r3, r1, r3
 8003bc0:	441a      	add	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	22ff      	movs	r2, #255	; 0xff
 8003bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	22ff      	movs	r2, #255	; 0xff
 8003bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d114      	bne.n	8003c06 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01a      	beq.n	8003c1a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3310      	adds	r3, #16
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 fa75 	bl	80050d8 <xTaskRemoveFromEventList>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d012      	beq.n	8003c1a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <xQueueGenericReset+0xcc>)
 8003bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	e009      	b.n	8003c1a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3310      	adds	r3, #16
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fef2 	bl	80039f4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3324      	adds	r3, #36	; 0x24
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff feed 	bl	80039f4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003c1a:	f002 fafb 	bl	8006214 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003c1e:	2301      	movs	r3, #1
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	e000ed04 	.word	0xe000ed04

08003c2c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08c      	sub	sp, #48	; 0x30
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <xQueueGenericCreate+0x2a>
        __asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	61bb      	str	r3, [r7, #24]
    }
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <xQueueGenericCreate+0x48>
 8003c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d101      	bne.n	8003c78 <xQueueGenericCreate+0x4c>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <xQueueGenericCreate+0x4e>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <xQueueGenericCreate+0x68>
        __asm volatile
 8003c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	617b      	str	r3, [r7, #20]
    }
 8003c90:	bf00      	nop
 8003c92:	e7fe      	b.n	8003c92 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003c9a:	d90a      	bls.n	8003cb2 <xQueueGenericCreate+0x86>
        __asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	613b      	str	r3, [r7, #16]
    }
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	3350      	adds	r3, #80	; 0x50
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f002 fba0 	bl	80063fc <pvPortMalloc>
 8003cbc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	3350      	adds	r3, #80	; 0x50
 8003ccc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003cce:	79fa      	ldrb	r2, [r7, #7]
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f805 	bl	8003cea <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
    }
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3728      	adds	r7, #40	; 0x28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e002      	b.n	8003d0c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d18:	2101      	movs	r1, #1
 8003d1a:	69b8      	ldr	r0, [r7, #24]
 8003d1c:	f7ff ff1e 	bl	8003b5c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	613b      	str	r3, [r7, #16]
    }
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d90a      	bls.n	8003d74 <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	60fb      	str	r3, [r7, #12]
    }
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <xQueueCreateCountingSemaphore+0x42>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003d74:	2202      	movs	r2, #2
 8003d76:	2100      	movs	r1, #0
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff57 	bl	8003c2c <xQueueGenericCreate>
 8003d7e:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <xQueueCreateCountingSemaphore+0x5c>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8003d8c:	697b      	ldr	r3, [r7, #20]
    }
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08e      	sub	sp, #56	; 0x38
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003da6:	2300      	movs	r3, #0
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <xQueueGenericSend+0x32>
        __asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <xQueueGenericSend+0x40>
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <xQueueGenericSend+0x44>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <xQueueGenericSend+0x46>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <xQueueGenericSend+0x60>
        __asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d103      	bne.n	8003e06 <xQueueGenericSend+0x6e>
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <xQueueGenericSend+0x72>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <xQueueGenericSend+0x74>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <xQueueGenericSend+0x8e>
        __asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	623b      	str	r3, [r7, #32]
    }
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e26:	f001 faf3 	bl	8005410 <xTaskGetSchedulerState>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <xQueueGenericSend+0x9e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <xQueueGenericSend+0xa2>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <xQueueGenericSend+0xa4>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <xQueueGenericSend+0xbe>
        __asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	61fb      	str	r3, [r7, #28]
    }
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003e56:	f002 f9ad 	bl	80061b4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <xQueueGenericSend+0xd4>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d129      	bne.n	8003ec0 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e72:	f000 fbd9 	bl	8004628 <prvCopyDataToQueue>
 8003e76:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d010      	beq.n	8003ea2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	3324      	adds	r3, #36	; 0x24
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 f927 	bl	80050d8 <xTaskRemoveFromEventList>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d013      	beq.n	8003eb8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003e90:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <xQueueGenericSend+0x1f8>)
 8003e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	e00a      	b.n	8003eb8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003ea8:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <xQueueGenericSend+0x1f8>)
 8003eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003eb8:	f002 f9ac 	bl	8006214 <vPortExitCritical>
                return pdPASS;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e063      	b.n	8003f88 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d103      	bne.n	8003ece <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003ec6:	f002 f9a5 	bl	8006214 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e05c      	b.n	8003f88 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d106      	bne.n	8003ee2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003ed4:	f107 0314 	add.w	r3, r7, #20
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f001 f95f 	bl	800519c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003ee2:	f002 f997 	bl	8006214 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003ee6:	f000 fed9 	bl	8004c9c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003eea:	f002 f963 	bl	80061b4 <vPortEnterCritical>
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ef4:	b25b      	sxtb	r3, r3
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efa:	d103      	bne.n	8003f04 <xQueueGenericSend+0x16c>
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f0a:	b25b      	sxtb	r3, r3
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f10:	d103      	bne.n	8003f1a <xQueueGenericSend+0x182>
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f1a:	f002 f97b 	bl	8006214 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f1e:	1d3a      	adds	r2, r7, #4
 8003f20:	f107 0314 	add.w	r3, r7, #20
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 f94e 	bl	80051c8 <xTaskCheckForTimeOut>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d124      	bne.n	8003f7c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f34:	f000 fc70 	bl	8004818 <prvIsQueueFull>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d018      	beq.n	8003f70 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	3310      	adds	r3, #16
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 f876 	bl	8005038 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f4e:	f000 fbfb 	bl	8004748 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003f52:	f000 feb1 	bl	8004cb8 <xTaskResumeAll>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f47f af7c 	bne.w	8003e56 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <xQueueGenericSend+0x1f8>)
 8003f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	e772      	b.n	8003e56 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f72:	f000 fbe9 	bl	8004748 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003f76:	f000 fe9f 	bl	8004cb8 <xTaskResumeAll>
 8003f7a:	e76c      	b.n	8003e56 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f7e:	f000 fbe3 	bl	8004748 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003f82:	f000 fe99 	bl	8004cb8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003f86:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3738      	adds	r7, #56	; 0x38
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	e000ed04 	.word	0xe000ed04

08003f94 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b090      	sub	sp, #64	; 0x40
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d103      	bne.n	8003fd0 <xQueueGenericSendFromISR+0x3c>
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <xQueueGenericSendFromISR+0x40>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <xQueueGenericSendFromISR+0x42>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d103      	bne.n	8003ffe <xQueueGenericSendFromISR+0x6a>
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <xQueueGenericSendFromISR+0x6e>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <xQueueGenericSendFromISR+0x70>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	623b      	str	r3, [r7, #32]
    }
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800401e:	f002 f9ad 	bl	800637c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004022:	f3ef 8211 	mrs	r2, BASEPRI
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	61fa      	str	r2, [r7, #28]
 8004038:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800403a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800403c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <xQueueGenericSendFromISR+0xbc>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d13e      	bne.n	80040ce <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004066:	f000 fadf 	bl	8004628 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800406a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d112      	bne.n	800409a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	2b00      	cmp	r3, #0
 800407a:	d025      	beq.n	80040c8 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	3324      	adds	r3, #36	; 0x24
 8004080:	4618      	mov	r0, r3
 8004082:	f001 f829 	bl	80050d8 <xTaskRemoveFromEventList>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01d      	beq.n	80040c8 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01a      	beq.n	80040c8 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e016      	b.n	80040c8 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800409a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800409e:	2b7f      	cmp	r3, #127	; 0x7f
 80040a0:	d10a      	bne.n	80040b8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	617b      	str	r3, [r7, #20]
    }
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040bc:	3301      	adds	r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	b25a      	sxtb	r2, r3
 80040c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80040c8:	2301      	movs	r3, #1
 80040ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80040cc:	e001      	b.n	80040d2 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80040dc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80040de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3740      	adds	r7, #64	; 0x40
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08e      	sub	sp, #56	; 0x38
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <xQueueGiveFromISR+0x2a>
        __asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	623b      	str	r3, [r7, #32]
    }
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <xQueueGiveFromISR+0x48>
        __asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	61fb      	str	r3, [r7, #28]
    }
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d103      	bne.n	8004140 <xQueueGiveFromISR+0x58>
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <xQueueGiveFromISR+0x5c>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <xQueueGiveFromISR+0x5e>
 8004144:	2300      	movs	r3, #0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <xQueueGiveFromISR+0x78>
        __asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	61bb      	str	r3, [r7, #24]
    }
 800415c:	bf00      	nop
 800415e:	e7fe      	b.n	800415e <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004160:	f002 f90c 	bl	800637c <vPortValidateInterruptPriority>
        __asm volatile
 8004164:	f3ef 8211 	mrs	r2, BASEPRI
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	617a      	str	r2, [r7, #20]
 800417a:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 800417c:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800418c:	429a      	cmp	r2, r3
 800418e:	d23a      	bcs.n	8004206 <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80041a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d112      	bne.n	80041d2 <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d025      	beq.n	8004200 <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	3324      	adds	r3, #36	; 0x24
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 ff8d 	bl	80050d8 <xTaskRemoveFromEventList>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01d      	beq.n	8004200 <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01a      	beq.n	8004200 <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2201      	movs	r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e016      	b.n	8004200 <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80041d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041d6:	2b7f      	cmp	r3, #127	; 0x7f
 80041d8:	d10a      	bne.n	80041f0 <xQueueGiveFromISR+0x108>
        __asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	60fb      	str	r3, [r7, #12]
    }
 80041ec:	bf00      	nop
 80041ee:	e7fe      	b.n	80041ee <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041f4:	3301      	adds	r3, #1
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	b25a      	sxtb	r2, r3
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004200:	2301      	movs	r3, #1
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
 8004204:	e001      	b.n	800420a <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004206:	2300      	movs	r3, #0
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	60bb      	str	r3, [r7, #8]
        __asm volatile
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f383 8811 	msr	BASEPRI, r3
    }
 8004214:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004218:	4618      	mov	r0, r3
 800421a:	3738      	adds	r7, #56	; 0x38
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08c      	sub	sp, #48	; 0x30
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800422c:	2300      	movs	r3, #0
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <xQueueReceive+0x30>
        __asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	623b      	str	r3, [r7, #32]
    }
 800424c:	bf00      	nop
 800424e:	e7fe      	b.n	800424e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <xQueueReceive+0x3e>
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <xQueueReceive+0x42>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xQueueReceive+0x44>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xQueueReceive+0x5e>
        __asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	61fb      	str	r3, [r7, #28]
    }
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800427e:	f001 f8c7 	bl	8005410 <xTaskGetSchedulerState>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <xQueueReceive+0x6e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <xQueueReceive+0x72>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <xQueueReceive+0x74>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <xQueueReceive+0x8e>
        __asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	61bb      	str	r3, [r7, #24]
    }
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80042ae:	f001 ff81 	bl	80061b4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01f      	beq.n	80042fe <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042c2:	f000 fa1b 	bl	80046fc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	1e5a      	subs	r2, r3, #1
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00f      	beq.n	80042f6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	3310      	adds	r3, #16
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fefc 	bl	80050d8 <xTaskRemoveFromEventList>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80042e6:	4b3d      	ldr	r3, [pc, #244]	; (80043dc <xQueueReceive+0x1bc>)
 80042e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80042f6:	f001 ff8d 	bl	8006214 <vPortExitCritical>
                return pdPASS;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e069      	b.n	80043d2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d103      	bne.n	800430c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004304:	f001 ff86 	bl	8006214 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004308:	2300      	movs	r3, #0
 800430a:	e062      	b.n	80043d2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004312:	f107 0310 	add.w	r3, r7, #16
 8004316:	4618      	mov	r0, r3
 8004318:	f000 ff40 	bl	800519c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004320:	f001 ff78 	bl	8006214 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004324:	f000 fcba 	bl	8004c9c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004328:	f001 ff44 	bl	80061b4 <vPortEnterCritical>
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004332:	b25b      	sxtb	r3, r3
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d103      	bne.n	8004342 <xQueueReceive+0x122>
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004348:	b25b      	sxtb	r3, r3
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	d103      	bne.n	8004358 <xQueueReceive+0x138>
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004358:	f001 ff5c 	bl	8006214 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800435c:	1d3a      	adds	r2, r7, #4
 800435e:	f107 0310 	add.w	r3, r7, #16
 8004362:	4611      	mov	r1, r2
 8004364:	4618      	mov	r0, r3
 8004366:	f000 ff2f 	bl	80051c8 <xTaskCheckForTimeOut>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d123      	bne.n	80043b8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004372:	f000 fa3b 	bl	80047ec <prvIsQueueEmpty>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d017      	beq.n	80043ac <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	3324      	adds	r3, #36	; 0x24
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fe57 	bl	8005038 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800438a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800438c:	f000 f9dc 	bl	8004748 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004390:	f000 fc92 	bl	8004cb8 <xTaskResumeAll>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d189      	bne.n	80042ae <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <xQueueReceive+0x1bc>)
 800439c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	e780      	b.n	80042ae <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80043ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ae:	f000 f9cb 	bl	8004748 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80043b2:	f000 fc81 	bl	8004cb8 <xTaskResumeAll>
 80043b6:	e77a      	b.n	80042ae <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80043b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ba:	f000 f9c5 	bl	8004748 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80043be:	f000 fc7b 	bl	8004cb8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043c4:	f000 fa12 	bl	80047ec <prvIsQueueEmpty>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f43f af6f 	beq.w	80042ae <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80043d0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3730      	adds	r7, #48	; 0x30
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08e      	sub	sp, #56	; 0x38
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <xQueueSemaphoreTake+0x32>
        __asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	623b      	str	r3, [r7, #32]
    }
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	61fb      	str	r3, [r7, #28]
    }
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004430:	f000 ffee 	bl	8005410 <xTaskGetSchedulerState>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <xQueueSemaphoreTake+0x60>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <xQueueSemaphoreTake+0x64>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <xQueueSemaphoreTake+0x66>
 8004444:	2300      	movs	r3, #0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	61bb      	str	r3, [r7, #24]
    }
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004460:	f001 fea8 	bl	80061b4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	d024      	beq.n	80044ba <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	1e5a      	subs	r2, r3, #1
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004480:	f001 f962 	bl	8005748 <pvTaskIncrementMutexHeldCount>
 8004484:	4602      	mov	r2, r0
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00f      	beq.n	80044b2 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	3310      	adds	r3, #16
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fe1e 	bl	80050d8 <xTaskRemoveFromEventList>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80044a2:	4b54      	ldr	r3, [pc, #336]	; (80045f4 <xQueueSemaphoreTake+0x214>)
 80044a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80044b2:	f001 feaf 	bl	8006214 <vPortExitCritical>
                return pdPASS;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e097      	b.n	80045ea <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d111      	bne.n	80044e4 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <xQueueSemaphoreTake+0xfc>
        __asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	617b      	str	r3, [r7, #20]
    }
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80044dc:	f001 fe9a 	bl	8006214 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e082      	b.n	80045ea <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80044e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fe54 	bl	800519c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80044f8:	f001 fe8c 	bl	8006214 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80044fc:	f000 fbce 	bl	8004c9c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004500:	f001 fe58 	bl	80061b4 <vPortEnterCritical>
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800450a:	b25b      	sxtb	r3, r3
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d103      	bne.n	800451a <xQueueSemaphoreTake+0x13a>
 8004512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004520:	b25b      	sxtb	r3, r3
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d103      	bne.n	8004530 <xQueueSemaphoreTake+0x150>
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004530:	f001 fe70 	bl	8006214 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004534:	463a      	mov	r2, r7
 8004536:	f107 030c 	add.w	r3, r7, #12
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fe43 	bl	80051c8 <xTaskCheckForTimeOut>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d132      	bne.n	80045ae <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800454a:	f000 f94f 	bl	80047ec <prvIsQueueEmpty>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d026      	beq.n	80045a2 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 800455c:	f001 fe2a 	bl	80061b4 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 ff71 	bl	800544c <xTaskPriorityInherit>
 800456a:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 800456c:	f001 fe52 	bl	8006214 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004572:	3324      	adds	r3, #36	; 0x24
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fd5d 	bl	8005038 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800457e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004580:	f000 f8e2 	bl	8004748 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004584:	f000 fb98 	bl	8004cb8 <xTaskResumeAll>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	f47f af68 	bne.w	8004460 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8004590:	4b18      	ldr	r3, [pc, #96]	; (80045f4 <xQueueSemaphoreTake+0x214>)
 8004592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	e75e      	b.n	8004460 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80045a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045a4:	f000 f8d0 	bl	8004748 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80045a8:	f000 fb86 	bl	8004cb8 <xTaskResumeAll>
 80045ac:	e758      	b.n	8004460 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80045ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045b0:	f000 f8ca 	bl	8004748 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80045b4:	f000 fb80 	bl	8004cb8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045ba:	f000 f917 	bl	80047ec <prvIsQueueEmpty>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f43f af4d 	beq.w	8004460 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00d      	beq.n	80045e8 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 80045cc:	f001 fdf2 	bl	80061b4 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80045d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045d2:	f000 f811 	bl	80045f8 <prvGetDisinheritPriorityAfterTimeout>
 80045d6:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80045d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 f824 	bl	800562c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80045e4:	f001 fe16 	bl	8006214 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80045e8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3738      	adds	r7, #56	; 0x38
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	2b00      	cmp	r3, #0
 8004606:	d006      	beq.n	8004616 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1c3 0305 	rsb	r3, r3, #5
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	e001      	b.n	800461a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800461a:	68fb      	ldr	r3, [r7, #12]
    }
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10d      	bne.n	8004662 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d14d      	bne.n	80046ea <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 ff70 	bl	8005538 <xTaskPriorityDisinherit>
 8004658:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	e043      	b.n	80046ea <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d119      	bne.n	800469c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6858      	ldr	r0, [r3, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	461a      	mov	r2, r3
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	f002 f914 	bl	80068a0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	441a      	add	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	d32b      	bcc.n	80046ea <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	e026      	b.n	80046ea <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68d8      	ldr	r0, [r3, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	461a      	mov	r2, r3
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	f002 f8fa 	bl	80068a0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	425b      	negs	r3, r3
 80046b6:	441a      	add	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d207      	bcs.n	80046d8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	425b      	negs	r3, r3
 80046d2:	441a      	add	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d105      	bne.n	80046ea <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80046f2:	697b      	ldr	r3, [r7, #20]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d018      	beq.n	8004740 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	441a      	add	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	d303      	bcc.n	8004730 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68d9      	ldr	r1, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	461a      	mov	r2, r3
 800473a:	6838      	ldr	r0, [r7, #0]
 800473c:	f002 f8b0 	bl	80068a0 <memcpy>
    }
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004750:	f001 fd30 	bl	80061b4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800475a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800475c:	e011      	b.n	8004782 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	2b00      	cmp	r3, #0
 8004764:	d012      	beq.n	800478c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3324      	adds	r3, #36	; 0x24
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fcb4 	bl	80050d8 <xTaskRemoveFromEventList>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004776:	f000 fd8d 	bl	8005294 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	3b01      	subs	r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	dce9      	bgt.n	800475e <prvUnlockQueue+0x16>
 800478a:	e000      	b.n	800478e <prvUnlockQueue+0x46>
                        break;
 800478c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	22ff      	movs	r2, #255	; 0xff
 8004792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004796:	f001 fd3d 	bl	8006214 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800479a:	f001 fd0b 	bl	80061b4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80047a6:	e011      	b.n	80047cc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d012      	beq.n	80047d6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3310      	adds	r3, #16
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fc8f 	bl	80050d8 <xTaskRemoveFromEventList>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80047c0:	f000 fd68 	bl	8005294 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80047c4:	7bbb      	ldrb	r3, [r7, #14]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80047cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	dce9      	bgt.n	80047a8 <prvUnlockQueue+0x60>
 80047d4:	e000      	b.n	80047d8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80047d6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	22ff      	movs	r2, #255	; 0xff
 80047dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80047e0:	f001 fd18 	bl	8006214 <vPortExitCritical>
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80047f4:	f001 fcde 	bl	80061b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d102      	bne.n	8004806 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004800:	2301      	movs	r3, #1
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e001      	b.n	800480a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800480a:	f001 fd03 	bl	8006214 <vPortExitCritical>

    return xReturn;
 800480e:	68fb      	ldr	r3, [r7, #12]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004820:	f001 fcc8 	bl	80061b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	429a      	cmp	r2, r3
 800482e:	d102      	bne.n	8004836 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e001      	b.n	800483a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800483a:	f001 fceb 	bl	8006214 <vPortExitCritical>

    return xReturn;
 800483e:	68fb      	ldr	r3, [r7, #12]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e014      	b.n	8004882 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004858:	4a0f      	ldr	r2, [pc, #60]	; (8004898 <vQueueAddToRegistry+0x50>)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004864:	490c      	ldr	r1, [pc, #48]	; (8004898 <vQueueAddToRegistry+0x50>)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800486e:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <vQueueAddToRegistry+0x50>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4413      	add	r3, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800487a:	e006      	b.n	800488a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b07      	cmp	r3, #7
 8004886:	d9e7      	bls.n	8004858 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000238 	.word	0x20000238

0800489c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80048ac:	f001 fc82 	bl	80061b4 <vPortEnterCritical>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048b6:	b25b      	sxtb	r3, r3
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d103      	bne.n	80048c6 <vQueueWaitForMessageRestricted+0x2a>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048cc:	b25b      	sxtb	r3, r3
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d2:	d103      	bne.n	80048dc <vQueueWaitForMessageRestricted+0x40>
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048dc:	f001 fc9a 	bl	8006214 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	3324      	adds	r3, #36	; 0x24
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fbc5 	bl	8005080 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80048f6:	6978      	ldr	r0, [r7, #20]
 80048f8:	f7ff ff26 	bl	8004748 <prvUnlockQueue>
    }
 80048fc:	bf00      	nop
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004904:	b580      	push	{r7, lr}
 8004906:	b08c      	sub	sp, #48	; 0x30
 8004908:	af04      	add	r7, sp, #16
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4618      	mov	r0, r3
 800491a:	f001 fd6f 	bl	80063fc <pvPortMalloc>
 800491e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00e      	beq.n	8004944 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004926:	2058      	movs	r0, #88	; 0x58
 8004928:	f001 fd68 	bl	80063fc <pvPortMalloc>
 800492c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
 800493a:	e005      	b.n	8004948 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800493c:	6978      	ldr	r0, [r7, #20]
 800493e:	f001 fe3d 	bl	80065bc <vPortFree>
 8004942:	e001      	b.n	8004948 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d013      	beq.n	8004976 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800494e:	88fa      	ldrh	r2, [r7, #6]
 8004950:	2300      	movs	r3, #0
 8004952:	9303      	str	r3, [sp, #12]
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	9302      	str	r3, [sp, #8]
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f80e 	bl	8004986 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800496a:	69f8      	ldr	r0, [r7, #28]
 800496c:	f000 f8a2 	bl	8004ab4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004970:	2301      	movs	r3, #1
 8004972:	61bb      	str	r3, [r7, #24]
 8004974:	e002      	b.n	800497c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004976:	f04f 33ff 	mov.w	r3, #4294967295
 800497a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800497c:	69bb      	ldr	r3, [r7, #24]
    }
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b088      	sub	sp, #32
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	461a      	mov	r2, r3
 800499e:	21a5      	movs	r1, #165	; 0xa5
 80049a0:	f001 ff4a 	bl	8006838 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049ae:	3b01      	subs	r3, #1
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	f023 0307 	bic.w	r3, r3, #7
 80049bc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <prvInitialiseNewTask+0x58>
        __asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	617b      	str	r3, [r7, #20]
    }
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01f      	beq.n	8004a24 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	e012      	b.n	8004a10 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	4413      	add	r3, r2
 80049f0:	7819      	ldrb	r1, [r3, #0]
 80049f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	3334      	adds	r3, #52	; 0x34
 80049fa:	460a      	mov	r2, r1
 80049fc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d006      	beq.n	8004a18 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b09      	cmp	r3, #9
 8004a14:	d9e9      	bls.n	80049ea <prvInitialiseNewTask+0x64>
 8004a16:	e000      	b.n	8004a1a <prvInitialiseNewTask+0x94>
            {
                break;
 8004a18:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a22:	e003      	b.n	8004a2c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d901      	bls.n	8004a36 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a32:	2304      	movs	r3, #4
 8004a34:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a40:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	2200      	movs	r2, #0
 8004a46:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fe fff1 	bl	8003a34 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	3318      	adds	r3, #24
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe ffec 	bl	8003a34 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a60:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	f1c3 0205 	rsb	r2, r3, #5
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	3350      	adds	r3, #80	; 0x50
 8004a76:	2204      	movs	r2, #4
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 fedc 	bl	8006838 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	3354      	adds	r3, #84	; 0x54
 8004a84:	2201      	movs	r2, #1
 8004a86:	2100      	movs	r1, #0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 fed5 	bl	8006838 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	68f9      	ldr	r1, [r7, #12]
 8004a92:	69b8      	ldr	r0, [r7, #24]
 8004a94:	f001 f9e4 	bl	8005e60 <pxPortInitialiseStack>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004aaa:	bf00      	nop
 8004aac:	3720      	adds	r7, #32
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004abc:	f001 fb7a 	bl	80061b4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004ac0:	4b2c      	ldr	r3, [pc, #176]	; (8004b74 <prvAddNewTaskToReadyList+0xc0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	4a2b      	ldr	r2, [pc, #172]	; (8004b74 <prvAddNewTaskToReadyList+0xc0>)
 8004ac8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004aca:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <prvAddNewTaskToReadyList+0xc4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004ad2:	4a29      	ldr	r2, [pc, #164]	; (8004b78 <prvAddNewTaskToReadyList+0xc4>)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ad8:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <prvAddNewTaskToReadyList+0xc0>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d110      	bne.n	8004b02 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004ae0:	f000 fbfc 	bl	80052dc <prvInitialiseTaskLists>
 8004ae4:	e00d      	b.n	8004b02 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004ae6:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <prvAddNewTaskToReadyList+0xc8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aee:	4b22      	ldr	r3, [pc, #136]	; (8004b78 <prvAddNewTaskToReadyList+0xc4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d802      	bhi.n	8004b02 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004afc:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <prvAddNewTaskToReadyList+0xc4>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004b02:	4b1f      	ldr	r3, [pc, #124]	; (8004b80 <prvAddNewTaskToReadyList+0xcc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3301      	adds	r3, #1
 8004b08:	4a1d      	ldr	r2, [pc, #116]	; (8004b80 <prvAddNewTaskToReadyList+0xcc>)
 8004b0a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <prvAddNewTaskToReadyList+0xcc>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	2201      	movs	r2, #1
 8004b1a:	409a      	lsls	r2, r3
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <prvAddNewTaskToReadyList+0xd0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <prvAddNewTaskToReadyList+0xd0>)
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <prvAddNewTaskToReadyList+0xd4>)
 8004b34:	441a      	add	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f7fe ff86 	bl	8003a4e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004b42:	f001 fb67 	bl	8006214 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004b46:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <prvAddNewTaskToReadyList+0xc8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00e      	beq.n	8004b6c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <prvAddNewTaskToReadyList+0xc4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d207      	bcs.n	8004b6c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <prvAddNewTaskToReadyList+0xd8>)
 8004b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000350 	.word	0x20000350
 8004b78:	20000278 	.word	0x20000278
 8004b7c:	2000035c 	.word	0x2000035c
 8004b80:	2000036c 	.word	0x2000036c
 8004b84:	20000358 	.word	0x20000358
 8004b88:	2000027c 	.word	0x2000027c
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d017      	beq.n	8004bd2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <vTaskDelay+0x60>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <vTaskDelay+0x30>
        __asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	60bb      	str	r3, [r7, #8]
    }
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004bc0:	f000 f86c 	bl	8004c9c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fdd2 	bl	8005770 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004bcc:	f000 f874 	bl	8004cb8 <xTaskResumeAll>
 8004bd0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d107      	bne.n	8004be8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8004bd8:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <vTaskDelay+0x64>)
 8004bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20000378 	.word	0x20000378
 8004bf4:	e000ed04 	.word	0xe000ed04

08004bf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004bfe:	4b20      	ldr	r3, [pc, #128]	; (8004c80 <vTaskStartScheduler+0x88>)
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	2300      	movs	r3, #0
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	2300      	movs	r3, #0
 8004c08:	2282      	movs	r2, #130	; 0x82
 8004c0a:	491e      	ldr	r1, [pc, #120]	; (8004c84 <vTaskStartScheduler+0x8c>)
 8004c0c:	481e      	ldr	r0, [pc, #120]	; (8004c88 <vTaskStartScheduler+0x90>)
 8004c0e:	f7ff fe79 	bl	8004904 <xTaskCreate>
 8004c12:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d102      	bne.n	8004c20 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004c1a:	f000 fe0f 	bl	800583c <xTimerCreateTimerTask>
 8004c1e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d116      	bne.n	8004c54 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	60bb      	str	r3, [r7, #8]
    }
 8004c38:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004c3a:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <vTaskStartScheduler+0x94>)
 8004c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c40:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <vTaskStartScheduler+0x98>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c48:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <vTaskStartScheduler+0x9c>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004c4e:	f001 f991 	bl	8005f74 <xPortStartScheduler>
 8004c52:	e00e      	b.n	8004c72 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d10a      	bne.n	8004c72 <vTaskStartScheduler+0x7a>
        __asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	607b      	str	r3, [r7, #4]
    }
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <vTaskStartScheduler+0xa0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000374 	.word	0x20000374
 8004c84:	08007220 	.word	0x08007220
 8004c88:	080052ad 	.word	0x080052ad
 8004c8c:	20000370 	.word	0x20000370
 8004c90:	2000035c 	.word	0x2000035c
 8004c94:	20000354 	.word	0x20000354
 8004c98:	2000000c 	.word	0x2000000c

08004c9c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <vTaskSuspendAll+0x18>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	4a03      	ldr	r2, [pc, #12]	; (8004cb4 <vTaskSuspendAll+0x18>)
 8004ca8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	20000378 	.word	0x20000378

08004cb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004cc6:	4b41      	ldr	r3, [pc, #260]	; (8004dcc <xTaskResumeAll+0x114>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <xTaskResumeAll+0x2c>
        __asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	603b      	str	r3, [r7, #0]
    }
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004ce4:	f001 fa66 	bl	80061b4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004ce8:	4b38      	ldr	r3, [pc, #224]	; (8004dcc <xTaskResumeAll+0x114>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	4a37      	ldr	r2, [pc, #220]	; (8004dcc <xTaskResumeAll+0x114>)
 8004cf0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf2:	4b36      	ldr	r3, [pc, #216]	; (8004dcc <xTaskResumeAll+0x114>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d161      	bne.n	8004dbe <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cfa:	4b35      	ldr	r3, [pc, #212]	; (8004dd0 <xTaskResumeAll+0x118>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d05d      	beq.n	8004dbe <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d02:	e02e      	b.n	8004d62 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d04:	4b33      	ldr	r3, [pc, #204]	; (8004dd4 <xTaskResumeAll+0x11c>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3318      	adds	r3, #24
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fe fef9 	bl	8003b08 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe fef4 	bl	8003b08 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	2201      	movs	r2, #1
 8004d26:	409a      	lsls	r2, r3
 8004d28:	4b2b      	ldr	r3, [pc, #172]	; (8004dd8 <xTaskResumeAll+0x120>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	4a2a      	ldr	r2, [pc, #168]	; (8004dd8 <xTaskResumeAll+0x120>)
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4a27      	ldr	r2, [pc, #156]	; (8004ddc <xTaskResumeAll+0x124>)
 8004d40:	441a      	add	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f7fe fe80 	bl	8003a4e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <xTaskResumeAll+0x128>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d302      	bcc.n	8004d62 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004d5c:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <xTaskResumeAll+0x12c>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <xTaskResumeAll+0x11c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1cc      	bne.n	8004d04 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004d70:	f000 fb32 	bl	80053d8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d74:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <xTaskResumeAll+0x130>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d010      	beq.n	8004da2 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004d80:	f000 f846 	bl	8004e10 <xTaskIncrementTick>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8004d8a:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <xTaskResumeAll+0x12c>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1f1      	bne.n	8004d80 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004d9c:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <xTaskResumeAll+0x130>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004da2:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <xTaskResumeAll+0x12c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004daa:	2301      	movs	r3, #1
 8004dac:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004dae:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <xTaskResumeAll+0x134>)
 8004db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004dbe:	f001 fa29 	bl	8006214 <vPortExitCritical>

    return xAlreadyYielded;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000378 	.word	0x20000378
 8004dd0:	20000350 	.word	0x20000350
 8004dd4:	20000310 	.word	0x20000310
 8004dd8:	20000358 	.word	0x20000358
 8004ddc:	2000027c 	.word	0x2000027c
 8004de0:	20000278 	.word	0x20000278
 8004de4:	20000364 	.word	0x20000364
 8004de8:	20000360 	.word	0x20000360
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <xTaskGetTickCount+0x1c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004dfc:	687b      	ldr	r3, [r7, #4]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000354 	.word	0x20000354

08004e10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e1a:	4b4e      	ldr	r3, [pc, #312]	; (8004f54 <xTaskIncrementTick+0x144>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f040 808e 	bne.w	8004f40 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e24:	4b4c      	ldr	r3, [pc, #304]	; (8004f58 <xTaskIncrementTick+0x148>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004e2c:	4a4a      	ldr	r2, [pc, #296]	; (8004f58 <xTaskIncrementTick+0x148>)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d120      	bne.n	8004e7a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004e38:	4b48      	ldr	r3, [pc, #288]	; (8004f5c <xTaskIncrementTick+0x14c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <xTaskIncrementTick+0x48>
        __asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	603b      	str	r3, [r7, #0]
    }
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <xTaskIncrementTick+0x46>
 8004e58:	4b40      	ldr	r3, [pc, #256]	; (8004f5c <xTaskIncrementTick+0x14c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	4b40      	ldr	r3, [pc, #256]	; (8004f60 <xTaskIncrementTick+0x150>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a3e      	ldr	r2, [pc, #248]	; (8004f5c <xTaskIncrementTick+0x14c>)
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	4a3e      	ldr	r2, [pc, #248]	; (8004f60 <xTaskIncrementTick+0x150>)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	4b3d      	ldr	r3, [pc, #244]	; (8004f64 <xTaskIncrementTick+0x154>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	4a3c      	ldr	r2, [pc, #240]	; (8004f64 <xTaskIncrementTick+0x154>)
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	f000 faaf 	bl	80053d8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004e7a:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <xTaskIncrementTick+0x158>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d348      	bcc.n	8004f16 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e84:	4b35      	ldr	r3, [pc, #212]	; (8004f5c <xTaskIncrementTick+0x14c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d104      	bne.n	8004e98 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e8e:	4b36      	ldr	r3, [pc, #216]	; (8004f68 <xTaskIncrementTick+0x158>)
 8004e90:	f04f 32ff 	mov.w	r2, #4294967295
 8004e94:	601a      	str	r2, [r3, #0]
                    break;
 8004e96:	e03e      	b.n	8004f16 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e98:	4b30      	ldr	r3, [pc, #192]	; (8004f5c <xTaskIncrementTick+0x14c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d203      	bcs.n	8004eb8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004eb0:	4a2d      	ldr	r2, [pc, #180]	; (8004f68 <xTaskIncrementTick+0x158>)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004eb6:	e02e      	b.n	8004f16 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe fe23 	bl	8003b08 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	3318      	adds	r3, #24
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe fe1a 	bl	8003b08 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	2201      	movs	r2, #1
 8004eda:	409a      	lsls	r2, r3
 8004edc:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <xTaskIncrementTick+0x15c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	4a22      	ldr	r2, [pc, #136]	; (8004f6c <xTaskIncrementTick+0x15c>)
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4a1f      	ldr	r2, [pc, #124]	; (8004f70 <xTaskIncrementTick+0x160>)
 8004ef4:	441a      	add	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f7fe fda6 	bl	8003a4e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f06:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <xTaskIncrementTick+0x164>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d3b9      	bcc.n	8004e84 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f14:	e7b6      	b.n	8004e84 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f16:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <xTaskIncrementTick+0x164>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1c:	4914      	ldr	r1, [pc, #80]	; (8004f70 <xTaskIncrementTick+0x160>)
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d901      	bls.n	8004f32 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004f32:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <xTaskIncrementTick+0x168>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d007      	beq.n	8004f4a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e004      	b.n	8004f4a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004f40:	4b0e      	ldr	r3, [pc, #56]	; (8004f7c <xTaskIncrementTick+0x16c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	4a0d      	ldr	r2, [pc, #52]	; (8004f7c <xTaskIncrementTick+0x16c>)
 8004f48:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004f4a:	697b      	ldr	r3, [r7, #20]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20000378 	.word	0x20000378
 8004f58:	20000354 	.word	0x20000354
 8004f5c:	20000308 	.word	0x20000308
 8004f60:	2000030c 	.word	0x2000030c
 8004f64:	20000368 	.word	0x20000368
 8004f68:	20000370 	.word	0x20000370
 8004f6c:	20000358 	.word	0x20000358
 8004f70:	2000027c 	.word	0x2000027c
 8004f74:	20000278 	.word	0x20000278
 8004f78:	20000364 	.word	0x20000364
 8004f7c:	20000360 	.word	0x20000360

08004f80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f86:	4b27      	ldr	r3, [pc, #156]	; (8005024 <vTaskSwitchContext+0xa4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004f8e:	4b26      	ldr	r3, [pc, #152]	; (8005028 <vTaskSwitchContext+0xa8>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004f94:	e03f      	b.n	8005016 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004f96:	4b24      	ldr	r3, [pc, #144]	; (8005028 <vTaskSwitchContext+0xa8>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9c:	4b23      	ldr	r3, [pc, #140]	; (800502c <vTaskSwitchContext+0xac>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	fab3 f383 	clz	r3, r3
 8004fa8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004faa:	7afb      	ldrb	r3, [r7, #11]
 8004fac:	f1c3 031f 	rsb	r3, r3, #31
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	491f      	ldr	r1, [pc, #124]	; (8005030 <vTaskSwitchContext+0xb0>)
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <vTaskSwitchContext+0x5c>
        __asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	607b      	str	r3, [r7, #4]
    }
 8004fd8:	bf00      	nop
 8004fda:	e7fe      	b.n	8004fda <vTaskSwitchContext+0x5a>
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4a12      	ldr	r2, [pc, #72]	; (8005030 <vTaskSwitchContext+0xb0>)
 8004fe8:	4413      	add	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d104      	bne.n	800500c <vTaskSwitchContext+0x8c>
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	605a      	str	r2, [r3, #4]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	4a08      	ldr	r2, [pc, #32]	; (8005034 <vTaskSwitchContext+0xb4>)
 8005014:	6013      	str	r3, [r2, #0]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20000378 	.word	0x20000378
 8005028:	20000364 	.word	0x20000364
 800502c:	20000358 	.word	0x20000358
 8005030:	2000027c 	.word	0x2000027c
 8005034:	20000278 	.word	0x20000278

08005038 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	60fb      	str	r3, [r7, #12]
    }
 800505a:	bf00      	nop
 800505c:	e7fe      	b.n	800505c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800505e:	4b07      	ldr	r3, [pc, #28]	; (800507c <vTaskPlaceOnEventList+0x44>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3318      	adds	r3, #24
 8005064:	4619      	mov	r1, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fe fd15 	bl	8003a96 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800506c:	2101      	movs	r1, #1
 800506e:	6838      	ldr	r0, [r7, #0]
 8005070:	f000 fb7e 	bl	8005770 <prvAddCurrentTaskToDelayedList>
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	20000278 	.word	0x20000278

08005080 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	617b      	str	r3, [r7, #20]
    }
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3318      	adds	r3, #24
 80050ae:	4619      	mov	r1, r3
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7fe fccc 	bl	8003a4e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80050bc:	f04f 33ff 	mov.w	r3, #4294967295
 80050c0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	68b8      	ldr	r0, [r7, #8]
 80050c6:	f000 fb53 	bl	8005770 <prvAddCurrentTaskToDelayedList>
    }
 80050ca:	bf00      	nop
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000278 	.word	0x20000278

080050d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	60fb      	str	r3, [r7, #12]
    }
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3318      	adds	r3, #24
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe fcfd 	bl	8003b08 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800510e:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <xTaskRemoveFromEventList+0xac>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d11c      	bne.n	8005150 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	3304      	adds	r3, #4
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe fcf4 	bl	8003b08 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	2201      	movs	r2, #1
 8005126:	409a      	lsls	r2, r3
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <xTaskRemoveFromEventList+0xb0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4313      	orrs	r3, r2
 800512e:	4a16      	ldr	r2, [pc, #88]	; (8005188 <xTaskRemoveFromEventList+0xb0>)
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4a13      	ldr	r2, [pc, #76]	; (800518c <xTaskRemoveFromEventList+0xb4>)
 8005140:	441a      	add	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	3304      	adds	r3, #4
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f7fe fc80 	bl	8003a4e <vListInsertEnd>
 800514e:	e005      	b.n	800515c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3318      	adds	r3, #24
 8005154:	4619      	mov	r1, r3
 8005156:	480e      	ldr	r0, [pc, #56]	; (8005190 <xTaskRemoveFromEventList+0xb8>)
 8005158:	f7fe fc79 	bl	8003a4e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <xTaskRemoveFromEventList+0xbc>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	429a      	cmp	r2, r3
 8005168:	d905      	bls.n	8005176 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800516a:	2301      	movs	r3, #1
 800516c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800516e:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <xTaskRemoveFromEventList+0xc0>)
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e001      	b.n	800517a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800517a:	697b      	ldr	r3, [r7, #20]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	20000378 	.word	0x20000378
 8005188:	20000358 	.word	0x20000358
 800518c:	2000027c 	.word	0x2000027c
 8005190:	20000310 	.word	0x20000310
 8005194:	20000278 	.word	0x20000278
 8005198:	20000364 	.word	0x20000364

0800519c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051a4:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <vTaskInternalSetTimeOutState+0x24>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80051ac:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <vTaskInternalSetTimeOutState+0x28>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	605a      	str	r2, [r3, #4]
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	20000368 	.word	0x20000368
 80051c4:	20000354 	.word	0x20000354

080051c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	613b      	str	r3, [r7, #16]
    }
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	60fb      	str	r3, [r7, #12]
    }
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800520a:	f000 ffd3 	bl	80061b4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800520e:	4b1f      	ldr	r3, [pc, #124]	; (800528c <xTaskCheckForTimeOut+0xc4>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005226:	d102      	bne.n	800522e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005228:	2300      	movs	r3, #0
 800522a:	61fb      	str	r3, [r7, #28]
 800522c:	e026      	b.n	800527c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b17      	ldr	r3, [pc, #92]	; (8005290 <xTaskCheckForTimeOut+0xc8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d00a      	beq.n	8005250 <xTaskCheckForTimeOut+0x88>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	429a      	cmp	r2, r3
 8005242:	d305      	bcc.n	8005250 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005244:	2301      	movs	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	e015      	b.n	800527c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	429a      	cmp	r2, r3
 8005258:	d20b      	bcs.n	8005272 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	1ad2      	subs	r2, r2, r3
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff ff98 	bl	800519c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	e004      	b.n	800527c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005278:	2301      	movs	r3, #1
 800527a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800527c:	f000 ffca 	bl	8006214 <vPortExitCritical>

    return xReturn;
 8005280:	69fb      	ldr	r3, [r7, #28]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000354 	.word	0x20000354
 8005290:	20000368 	.word	0x20000368

08005294 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005298:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <vTaskMissedYield+0x14>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]
}
 800529e:	bf00      	nop
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	20000364 	.word	0x20000364

080052ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80052b4:	f000 f852 	bl	800535c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <prvIdleTask+0x28>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d9f9      	bls.n	80052b4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <prvIdleTask+0x2c>)
 80052c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80052d0:	e7f0      	b.n	80052b4 <prvIdleTask+0x8>
 80052d2:	bf00      	nop
 80052d4:	2000027c 	.word	0x2000027c
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052e2:	2300      	movs	r3, #0
 80052e4:	607b      	str	r3, [r7, #4]
 80052e6:	e00c      	b.n	8005302 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4a12      	ldr	r2, [pc, #72]	; (800533c <prvInitialiseTaskLists+0x60>)
 80052f4:	4413      	add	r3, r2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe fb7c 	bl	80039f4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3301      	adds	r3, #1
 8005300:	607b      	str	r3, [r7, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b04      	cmp	r3, #4
 8005306:	d9ef      	bls.n	80052e8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005308:	480d      	ldr	r0, [pc, #52]	; (8005340 <prvInitialiseTaskLists+0x64>)
 800530a:	f7fe fb73 	bl	80039f4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800530e:	480d      	ldr	r0, [pc, #52]	; (8005344 <prvInitialiseTaskLists+0x68>)
 8005310:	f7fe fb70 	bl	80039f4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005314:	480c      	ldr	r0, [pc, #48]	; (8005348 <prvInitialiseTaskLists+0x6c>)
 8005316:	f7fe fb6d 	bl	80039f4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800531a:	480c      	ldr	r0, [pc, #48]	; (800534c <prvInitialiseTaskLists+0x70>)
 800531c:	f7fe fb6a 	bl	80039f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005320:	480b      	ldr	r0, [pc, #44]	; (8005350 <prvInitialiseTaskLists+0x74>)
 8005322:	f7fe fb67 	bl	80039f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005326:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <prvInitialiseTaskLists+0x78>)
 8005328:	4a05      	ldr	r2, [pc, #20]	; (8005340 <prvInitialiseTaskLists+0x64>)
 800532a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <prvInitialiseTaskLists+0x7c>)
 800532e:	4a05      	ldr	r2, [pc, #20]	; (8005344 <prvInitialiseTaskLists+0x68>)
 8005330:	601a      	str	r2, [r3, #0]
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	2000027c 	.word	0x2000027c
 8005340:	200002e0 	.word	0x200002e0
 8005344:	200002f4 	.word	0x200002f4
 8005348:	20000310 	.word	0x20000310
 800534c:	20000324 	.word	0x20000324
 8005350:	2000033c 	.word	0x2000033c
 8005354:	20000308 	.word	0x20000308
 8005358:	2000030c 	.word	0x2000030c

0800535c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005362:	e019      	b.n	8005398 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005364:	f000 ff26 	bl	80061b4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005368:	4b10      	ldr	r3, [pc, #64]	; (80053ac <prvCheckTasksWaitingTermination+0x50>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3304      	adds	r3, #4
 8005374:	4618      	mov	r0, r3
 8005376:	f7fe fbc7 	bl	8003b08 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800537a:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <prvCheckTasksWaitingTermination+0x54>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3b01      	subs	r3, #1
 8005380:	4a0b      	ldr	r2, [pc, #44]	; (80053b0 <prvCheckTasksWaitingTermination+0x54>)
 8005382:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <prvCheckTasksWaitingTermination+0x58>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3b01      	subs	r3, #1
 800538a:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <prvCheckTasksWaitingTermination+0x58>)
 800538c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800538e:	f000 ff41 	bl	8006214 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f810 	bl	80053b8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <prvCheckTasksWaitingTermination+0x58>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e1      	bne.n	8005364 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000324 	.word	0x20000324
 80053b0:	20000350 	.word	0x20000350
 80053b4:	20000338 	.word	0x20000338

080053b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 f8f9 	bl	80065bc <vPortFree>
                vPortFree( pxTCB );
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 f8f6 	bl	80065bc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <prvResetNextTaskUnblockTime+0x30>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80053e6:	4b09      	ldr	r3, [pc, #36]	; (800540c <prvResetNextTaskUnblockTime+0x34>)
 80053e8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80053ee:	e005      	b.n	80053fc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053f0:	4b05      	ldr	r3, [pc, #20]	; (8005408 <prvResetNextTaskUnblockTime+0x30>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a04      	ldr	r2, [pc, #16]	; (800540c <prvResetNextTaskUnblockTime+0x34>)
 80053fa:	6013      	str	r3, [r2, #0]
}
 80053fc:	bf00      	nop
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	20000308 	.word	0x20000308
 800540c:	20000370 	.word	0x20000370

08005410 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <xTaskGetSchedulerState+0x34>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800541e:	2301      	movs	r3, #1
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	e008      	b.n	8005436 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005424:	4b08      	ldr	r3, [pc, #32]	; (8005448 <xTaskGetSchedulerState+0x38>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800542c:	2302      	movs	r3, #2
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	e001      	b.n	8005436 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005432:	2300      	movs	r3, #0
 8005434:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005436:	687b      	ldr	r3, [r7, #4]
    }
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	2000035c 	.word	0x2000035c
 8005448:	20000378 	.word	0x20000378

0800544c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d05e      	beq.n	8005520 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005466:	4b31      	ldr	r3, [pc, #196]	; (800552c <xTaskPriorityInherit+0xe0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	429a      	cmp	r2, r3
 800546e:	d24e      	bcs.n	800550e <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	db06      	blt.n	8005486 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005478:	4b2c      	ldr	r3, [pc, #176]	; (800552c <xTaskPriorityInherit+0xe0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	f1c3 0205 	rsb	r2, r3, #5
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6959      	ldr	r1, [r3, #20]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4a26      	ldr	r2, [pc, #152]	; (8005530 <xTaskPriorityInherit+0xe4>)
 8005498:	4413      	add	r3, r2
 800549a:	4299      	cmp	r1, r3
 800549c:	d12f      	bne.n	80054fe <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe fb30 	bl	8003b08 <uxListRemove>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	2201      	movs	r2, #1
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	43da      	mvns	r2, r3
 80054ba:	4b1e      	ldr	r3, [pc, #120]	; (8005534 <xTaskPriorityInherit+0xe8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4013      	ands	r3, r2
 80054c0:	4a1c      	ldr	r2, [pc, #112]	; (8005534 <xTaskPriorityInherit+0xe8>)
 80054c2:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80054c4:	4b19      	ldr	r3, [pc, #100]	; (800552c <xTaskPriorityInherit+0xe0>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	2201      	movs	r2, #1
 80054d4:	409a      	lsls	r2, r3
 80054d6:	4b17      	ldr	r3, [pc, #92]	; (8005534 <xTaskPriorityInherit+0xe8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4313      	orrs	r3, r2
 80054dc:	4a15      	ldr	r2, [pc, #84]	; (8005534 <xTaskPriorityInherit+0xe8>)
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4a10      	ldr	r2, [pc, #64]	; (8005530 <xTaskPriorityInherit+0xe4>)
 80054ee:	441a      	add	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4619      	mov	r1, r3
 80054f6:	4610      	mov	r0, r2
 80054f8:	f7fe faa9 	bl	8003a4e <vListInsertEnd>
 80054fc:	e004      	b.n	8005508 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80054fe:	4b0b      	ldr	r3, [pc, #44]	; (800552c <xTaskPriorityInherit+0xe0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8005508:	2301      	movs	r3, #1
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	e008      	b.n	8005520 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005512:	4b06      	ldr	r3, [pc, #24]	; (800552c <xTaskPriorityInherit+0xe0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	429a      	cmp	r2, r3
 800551a:	d201      	bcs.n	8005520 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800551c:	2301      	movs	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005520:	68fb      	ldr	r3, [r7, #12]
    }
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000278 	.word	0x20000278
 8005530:	2000027c 	.word	0x2000027c
 8005534:	20000358 	.word	0x20000358

08005538 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d063      	beq.n	8005616 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800554e:	4b34      	ldr	r3, [pc, #208]	; (8005620 <xTaskPriorityDisinherit+0xe8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	429a      	cmp	r2, r3
 8005556:	d00a      	beq.n	800556e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	60fb      	str	r3, [r7, #12]
    }
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	60bb      	str	r3, [r7, #8]
    }
 8005588:	bf00      	nop
 800558a:	e7fe      	b.n	800558a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005590:	1e5a      	subs	r2, r3, #1
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559e:	429a      	cmp	r2, r3
 80055a0:	d039      	beq.n	8005616 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d135      	bne.n	8005616 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	3304      	adds	r3, #4
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fe faaa 	bl	8003b08 <uxListRemove>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	2201      	movs	r2, #1
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	43da      	mvns	r2, r3
 80055c6:	4b17      	ldr	r3, [pc, #92]	; (8005624 <xTaskPriorityDisinherit+0xec>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4013      	ands	r3, r2
 80055cc:	4a15      	ldr	r2, [pc, #84]	; (8005624 <xTaskPriorityDisinherit+0xec>)
 80055ce:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	f1c3 0205 	rsb	r2, r3, #5
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	2201      	movs	r2, #1
 80055ea:	409a      	lsls	r2, r3
 80055ec:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <xTaskPriorityDisinherit+0xec>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	4a0c      	ldr	r2, [pc, #48]	; (8005624 <xTaskPriorityDisinherit+0xec>)
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4a09      	ldr	r2, [pc, #36]	; (8005628 <xTaskPriorityDisinherit+0xf0>)
 8005604:	441a      	add	r2, r3
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	3304      	adds	r3, #4
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f7fe fa1e 	bl	8003a4e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005612:	2301      	movs	r3, #1
 8005614:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005616:	697b      	ldr	r3, [r7, #20]
    }
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20000278 	.word	0x20000278
 8005624:	20000358 	.word	0x20000358
 8005628:	2000027c 	.word	0x2000027c

0800562c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800563a:	2301      	movs	r3, #1
 800563c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d077      	beq.n	8005734 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	60fb      	str	r3, [r7, #12]
    }
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d902      	bls.n	8005672 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	e002      	b.n	8005678 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005676:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	429a      	cmp	r2, r3
 8005680:	d058      	beq.n	8005734 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	429a      	cmp	r2, r3
 800568a:	d153      	bne.n	8005734 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800568c:	4b2b      	ldr	r3, [pc, #172]	; (800573c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	429a      	cmp	r2, r3
 8005694:	d10a      	bne.n	80056ac <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	60bb      	str	r3, [r7, #8]
    }
 80056a8:	bf00      	nop
 80056aa:	e7fe      	b.n	80056aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	db04      	blt.n	80056ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f1c3 0205 	rsb	r2, r3, #5
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	6959      	ldr	r1, [r3, #20]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4a19      	ldr	r2, [pc, #100]	; (8005740 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80056da:	4413      	add	r3, r2
 80056dc:	4299      	cmp	r1, r3
 80056de:	d129      	bne.n	8005734 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	3304      	adds	r3, #4
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fe fa0f 	bl	8003b08 <uxListRemove>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	2201      	movs	r2, #1
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	43da      	mvns	r2, r3
 80056fc:	4b11      	ldr	r3, [pc, #68]	; (8005744 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4013      	ands	r3, r2
 8005702:	4a10      	ldr	r2, [pc, #64]	; (8005744 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005704:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	2201      	movs	r2, #1
 800570c:	409a      	lsls	r2, r3
 800570e:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4313      	orrs	r3, r2
 8005714:	4a0b      	ldr	r2, [pc, #44]	; (8005744 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4a06      	ldr	r2, [pc, #24]	; (8005740 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005726:	441a      	add	r2, r3
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7fe f98d 	bl	8003a4e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005734:	bf00      	nop
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20000278 	.word	0x20000278
 8005740:	2000027c 	.word	0x2000027c
 8005744:	20000358 	.word	0x20000358

08005748 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800574c:	4b07      	ldr	r3, [pc, #28]	; (800576c <pvTaskIncrementMutexHeldCount+0x24>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005754:	4b05      	ldr	r3, [pc, #20]	; (800576c <pvTaskIncrementMutexHeldCount+0x24>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800575a:	3201      	adds	r2, #1
 800575c:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800575e:	4b03      	ldr	r3, [pc, #12]	; (800576c <pvTaskIncrementMutexHeldCount+0x24>)
 8005760:	681b      	ldr	r3, [r3, #0]
    }
 8005762:	4618      	mov	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	20000278 	.word	0x20000278

08005770 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800577a:	4b29      	ldr	r3, [pc, #164]	; (8005820 <prvAddCurrentTaskToDelayedList+0xb0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005780:	4b28      	ldr	r3, [pc, #160]	; (8005824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3304      	adds	r3, #4
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe f9be 	bl	8003b08 <uxListRemove>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005792:	4b24      	ldr	r3, [pc, #144]	; (8005824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	2201      	movs	r2, #1
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	43da      	mvns	r2, r3
 80057a0:	4b21      	ldr	r3, [pc, #132]	; (8005828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4013      	ands	r3, r2
 80057a6:	4a20      	ldr	r2, [pc, #128]	; (8005828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057a8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d10a      	bne.n	80057c8 <prvAddCurrentTaskToDelayedList+0x58>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057b8:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3304      	adds	r3, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	481a      	ldr	r0, [pc, #104]	; (800582c <prvAddCurrentTaskToDelayedList+0xbc>)
 80057c2:	f7fe f944 	bl	8003a4e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80057c6:	e026      	b.n	8005816 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4413      	add	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057d0:	4b14      	ldr	r3, [pc, #80]	; (8005824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d209      	bcs.n	80057f4 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057e0:	4b13      	ldr	r3, [pc, #76]	; (8005830 <prvAddCurrentTaskToDelayedList+0xc0>)
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	4b0f      	ldr	r3, [pc, #60]	; (8005824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f7fe f952 	bl	8003a96 <vListInsert>
}
 80057f2:	e010      	b.n	8005816 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057f4:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <prvAddCurrentTaskToDelayedList+0xc4>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3304      	adds	r3, #4
 80057fe:	4619      	mov	r1, r3
 8005800:	4610      	mov	r0, r2
 8005802:	f7fe f948 	bl	8003a96 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005806:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	429a      	cmp	r2, r3
 800580e:	d202      	bcs.n	8005816 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005810:	4a09      	ldr	r2, [pc, #36]	; (8005838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6013      	str	r3, [r2, #0]
}
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000354 	.word	0x20000354
 8005824:	20000278 	.word	0x20000278
 8005828:	20000358 	.word	0x20000358
 800582c:	2000033c 	.word	0x2000033c
 8005830:	2000030c 	.word	0x2000030c
 8005834:	20000308 	.word	0x20000308
 8005838:	20000370 	.word	0x20000370

0800583c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005842:	2300      	movs	r3, #0
 8005844:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005846:	f000 fad5 	bl	8005df4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800584a:	4b11      	ldr	r3, [pc, #68]	; (8005890 <xTimerCreateTimerTask+0x54>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005852:	4b10      	ldr	r3, [pc, #64]	; (8005894 <xTimerCreateTimerTask+0x58>)
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	2302      	movs	r3, #2
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	2300      	movs	r3, #0
 800585c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005860:	490d      	ldr	r1, [pc, #52]	; (8005898 <xTimerCreateTimerTask+0x5c>)
 8005862:	480e      	ldr	r0, [pc, #56]	; (800589c <xTimerCreateTimerTask+0x60>)
 8005864:	f7ff f84e 	bl	8004904 <xTaskCreate>
 8005868:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	603b      	str	r3, [r7, #0]
    }
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005886:	687b      	ldr	r3, [r7, #4]
    }
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	200003ac 	.word	0x200003ac
 8005894:	200003b0 	.word	0x200003b0
 8005898:	08007228 	.word	0x08007228
 800589c:	080059d5 	.word	0x080059d5

080058a0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08a      	sub	sp, #40	; 0x28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <xTimerGenericCommand+0x2e>
        __asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	623b      	str	r3, [r7, #32]
    }
 80058ca:	bf00      	nop
 80058cc:	e7fe      	b.n	80058cc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80058ce:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <xTimerGenericCommand+0x98>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d02a      	beq.n	800592c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b05      	cmp	r3, #5
 80058e6:	dc18      	bgt.n	800591a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058e8:	f7ff fd92 	bl	8005410 <xTaskGetSchedulerState>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d109      	bne.n	8005906 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <xTimerGenericCommand+0x98>)
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	f107 0114 	add.w	r1, r7, #20
 80058fa:	2300      	movs	r3, #0
 80058fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058fe:	f7fe fa4b 	bl	8003d98 <xQueueGenericSend>
 8005902:	6278      	str	r0, [r7, #36]	; 0x24
 8005904:	e012      	b.n	800592c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005906:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <xTimerGenericCommand+0x98>)
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	f107 0114 	add.w	r1, r7, #20
 800590e:	2300      	movs	r3, #0
 8005910:	2200      	movs	r2, #0
 8005912:	f7fe fa41 	bl	8003d98 <xQueueGenericSend>
 8005916:	6278      	str	r0, [r7, #36]	; 0x24
 8005918:	e008      	b.n	800592c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <xTimerGenericCommand+0x98>)
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	f107 0114 	add.w	r1, r7, #20
 8005922:	2300      	movs	r3, #0
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	f7fe fb35 	bl	8003f94 <xQueueGenericSendFromISR>
 800592a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800592e:	4618      	mov	r0, r3
 8005930:	3728      	adds	r7, #40	; 0x28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	200003ac 	.word	0x200003ac

0800593c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af02      	add	r7, sp, #8
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005946:	4b22      	ldr	r3, [pc, #136]	; (80059d0 <prvProcessExpiredTimer+0x94>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	3304      	adds	r3, #4
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe f8d7 	bl	8003b08 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d022      	beq.n	80059ae <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	699a      	ldr	r2, [r3, #24]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	18d1      	adds	r1, r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	6978      	ldr	r0, [r7, #20]
 8005976:	f000 f8d1 	bl	8005b1c <prvInsertTimerInActiveList>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01f      	beq.n	80059c0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005980:	2300      	movs	r3, #0
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	2300      	movs	r3, #0
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	2100      	movs	r1, #0
 800598a:	6978      	ldr	r0, [r7, #20]
 800598c:	f7ff ff88 	bl	80058a0 <xTimerGenericCommand>
 8005990:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d113      	bne.n	80059c0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	60fb      	str	r3, [r7, #12]
    }
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059b4:	f023 0301 	bic.w	r3, r3, #1
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	6978      	ldr	r0, [r7, #20]
 80059c6:	4798      	blx	r3
    }
 80059c8:	bf00      	nop
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	200003a4 	.word	0x200003a4

080059d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059dc:	f107 0308 	add.w	r3, r7, #8
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 f857 	bl	8005a94 <prvGetNextExpireTime>
 80059e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4619      	mov	r1, r3
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f803 	bl	80059f8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80059f2:	f000 f8d5 	bl	8005ba0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059f6:	e7f1      	b.n	80059dc <prvTimerTask+0x8>

080059f8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005a02:	f7ff f94b 	bl	8004c9c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a06:	f107 0308 	add.w	r3, r7, #8
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f866 	bl	8005adc <prvSampleTimeNow>
 8005a10:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d130      	bne.n	8005a7a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <prvProcessTimerOrBlockTask+0x3c>
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d806      	bhi.n	8005a34 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005a26:	f7ff f947 	bl	8004cb8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff ff85 	bl	800593c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005a32:	e024      	b.n	8005a7e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a3a:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <prvProcessTimerOrBlockTask+0x90>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <prvProcessTimerOrBlockTask+0x50>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <prvProcessTimerOrBlockTask+0x52>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <prvProcessTimerOrBlockTask+0x94>)
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	f7fe ff1f 	bl	800489c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005a5e:	f7ff f92b 	bl	8004cb8 <xTaskResumeAll>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005a68:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <prvProcessTimerOrBlockTask+0x98>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
    }
 8005a78:	e001      	b.n	8005a7e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005a7a:	f7ff f91d 	bl	8004cb8 <xTaskResumeAll>
    }
 8005a7e:	bf00      	nop
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	200003a8 	.word	0x200003a8
 8005a8c:	200003ac 	.word	0x200003ac
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a9c:	4b0e      	ldr	r3, [pc, #56]	; (8005ad8 <prvGetNextExpireTime+0x44>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <prvGetNextExpireTime+0x16>
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	e000      	b.n	8005aac <prvGetNextExpireTime+0x18>
 8005aaa:	2200      	movs	r2, #0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ab8:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <prvGetNextExpireTime+0x44>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	e001      	b.n	8005ac8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
    }
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	200003a4 	.word	0x200003a4

08005adc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005ae4:	f7ff f984 	bl	8004df0 <xTaskGetTickCount>
 8005ae8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005aea:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <prvSampleTimeNow+0x3c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d205      	bcs.n	8005b00 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005af4:	f000 f91a 	bl	8005d2c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e002      	b.n	8005b06 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005b06:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <prvSampleTimeNow+0x3c>)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
    }
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200003b4 	.word	0x200003b4

08005b1c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d812      	bhi.n	8005b68 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d302      	bcc.n	8005b56 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005b50:	2301      	movs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	e01b      	b.n	8005b8e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <prvInsertTimerInActiveList+0x7c>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f7fd ff98 	bl	8003a96 <vListInsert>
 8005b66:	e012      	b.n	8005b8e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d206      	bcs.n	8005b7e <prvInsertTimerInActiveList+0x62>
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d302      	bcc.n	8005b7e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	e007      	b.n	8005b8e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b7e:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <prvInsertTimerInActiveList+0x80>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f7fd ff84 	bl	8003a96 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005b8e:	697b      	ldr	r3, [r7, #20]
    }
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	200003a8 	.word	0x200003a8
 8005b9c:	200003a4 	.word	0x200003a4

08005ba0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08c      	sub	sp, #48	; 0x30
 8005ba4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ba6:	e0ae      	b.n	8005d06 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f2c0 80ab 	blt.w	8005d06 <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fd ffa1 	bl	8003b08 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bc6:	1d3b      	adds	r3, r7, #4
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff ff87 	bl	8005adc <prvSampleTimeNow>
 8005bce:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b09      	cmp	r3, #9
 8005bd4:	f200 8096 	bhi.w	8005d04 <prvProcessReceivedCommands+0x164>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <prvProcessReceivedCommands+0x40>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c09 	.word	0x08005c09
 8005be4:	08005c09 	.word	0x08005c09
 8005be8:	08005c09 	.word	0x08005c09
 8005bec:	08005c7d 	.word	0x08005c7d
 8005bf0:	08005c91 	.word	0x08005c91
 8005bf4:	08005cdb 	.word	0x08005cdb
 8005bf8:	08005c09 	.word	0x08005c09
 8005bfc:	08005c09 	.word	0x08005c09
 8005c00:	08005c7d 	.word	0x08005c7d
 8005c04:	08005c91 	.word	0x08005c91
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	18d1      	adds	r1, r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a3a      	ldr	r2, [r7, #32]
 8005c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c28:	f7ff ff78 	bl	8005b1c <prvInsertTimerInActiveList>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d069      	beq.n	8005d06 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c38:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d05e      	beq.n	8005d06 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	441a      	add	r2, r3
 8005c50:	2300      	movs	r3, #0
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2300      	movs	r3, #0
 8005c56:	2100      	movs	r1, #0
 8005c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c5a:	f7ff fe21 	bl	80058a0 <xTimerGenericCommand>
 8005c5e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d14f      	bne.n	8005d06 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	61bb      	str	r3, [r7, #24]
    }
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c82:	f023 0301 	bic.w	r3, r3, #1
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005c8e:	e03a      	b.n	8005d06 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	617b      	str	r3, [r7, #20]
    }
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	18d1      	adds	r1, r2, r3
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	6a3a      	ldr	r2, [r7, #32]
 8005cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cd4:	f7ff ff22 	bl	8005b1c <prvInsertTimerInActiveList>
                        break;
 8005cd8:	e015      	b.n	8005d06 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d103      	bne.n	8005cf0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005ce8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cea:	f000 fc67 	bl	80065bc <vPortFree>
 8005cee:	e00a      	b.n	8005d06 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf6:	f023 0301 	bic.w	r3, r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005d02:	e000      	b.n	8005d06 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005d04:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d06:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <prvProcessReceivedCommands+0x188>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f107 0108 	add.w	r1, r7, #8
 8005d0e:	2200      	movs	r2, #0
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe fa85 	bl	8004220 <xQueueReceive>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f47f af45 	bne.w	8005ba8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005d1e:	bf00      	nop
 8005d20:	bf00      	nop
 8005d22:	3728      	adds	r7, #40	; 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	200003ac 	.word	0x200003ac

08005d2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d32:	e048      	b.n	8005dc6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d34:	4b2d      	ldr	r3, [pc, #180]	; (8005dec <prvSwitchTimerLists+0xc0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d3e:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <prvSwitchTimerLists+0xc0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fd fedb 	bl	8003b08 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d02e      	beq.n	8005dc6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4413      	add	r3, r2
 8005d70:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d90e      	bls.n	8005d98 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d86:	4b19      	ldr	r3, [pc, #100]	; (8005dec <prvSwitchTimerLists+0xc0>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4610      	mov	r0, r2
 8005d92:	f7fd fe80 	bl	8003a96 <vListInsert>
 8005d96:	e016      	b.n	8005dc6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	2100      	movs	r1, #0
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f7ff fd7c 	bl	80058a0 <xTimerGenericCommand>
 8005da8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	603b      	str	r3, [r7, #0]
    }
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dc6:	4b09      	ldr	r3, [pc, #36]	; (8005dec <prvSwitchTimerLists+0xc0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1b1      	bne.n	8005d34 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005dd0:	4b06      	ldr	r3, [pc, #24]	; (8005dec <prvSwitchTimerLists+0xc0>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <prvSwitchTimerLists+0xc4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a04      	ldr	r2, [pc, #16]	; (8005dec <prvSwitchTimerLists+0xc0>)
 8005ddc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005dde:	4a04      	ldr	r2, [pc, #16]	; (8005df0 <prvSwitchTimerLists+0xc4>)
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	6013      	str	r3, [r2, #0]
    }
 8005de4:	bf00      	nop
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	200003a4 	.word	0x200003a4
 8005df0:	200003a8 	.word	0x200003a8

08005df4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005df8:	f000 f9dc 	bl	80061b4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005dfc:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <prvCheckForValidListAndQueue+0x54>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d11d      	bne.n	8005e40 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005e04:	4811      	ldr	r0, [pc, #68]	; (8005e4c <prvCheckForValidListAndQueue+0x58>)
 8005e06:	f7fd fdf5 	bl	80039f4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005e0a:	4811      	ldr	r0, [pc, #68]	; (8005e50 <prvCheckForValidListAndQueue+0x5c>)
 8005e0c:	f7fd fdf2 	bl	80039f4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005e10:	4b10      	ldr	r3, [pc, #64]	; (8005e54 <prvCheckForValidListAndQueue+0x60>)
 8005e12:	4a0e      	ldr	r2, [pc, #56]	; (8005e4c <prvCheckForValidListAndQueue+0x58>)
 8005e14:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005e16:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <prvCheckForValidListAndQueue+0x64>)
 8005e18:	4a0d      	ldr	r2, [pc, #52]	; (8005e50 <prvCheckForValidListAndQueue+0x5c>)
 8005e1a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	210c      	movs	r1, #12
 8005e20:	200a      	movs	r0, #10
 8005e22:	f7fd ff03 	bl	8003c2c <xQueueGenericCreate>
 8005e26:	4603      	mov	r3, r0
 8005e28:	4a07      	ldr	r2, [pc, #28]	; (8005e48 <prvCheckForValidListAndQueue+0x54>)
 8005e2a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005e2c:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <prvCheckForValidListAndQueue+0x54>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e34:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <prvCheckForValidListAndQueue+0x54>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4908      	ldr	r1, [pc, #32]	; (8005e5c <prvCheckForValidListAndQueue+0x68>)
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe fd04 	bl	8004848 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005e40:	f000 f9e8 	bl	8006214 <vPortExitCritical>
    }
 8005e44:	bf00      	nop
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	200003ac 	.word	0x200003ac
 8005e4c:	2000037c 	.word	0x2000037c
 8005e50:	20000390 	.word	0x20000390
 8005e54:	200003a4 	.word	0x200003a4
 8005e58:	200003a8 	.word	0x200003a8
 8005e5c:	08007230 	.word	0x08007230

08005e60 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3b04      	subs	r3, #4
 8005e70:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3b04      	subs	r3, #4
 8005e7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f023 0201 	bic.w	r2, r3, #1
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3b04      	subs	r3, #4
 8005e8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005e90:	4a0c      	ldr	r2, [pc, #48]	; (8005ec4 <pxPortInitialiseStack+0x64>)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3b14      	subs	r3, #20
 8005e9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3b04      	subs	r3, #4
 8005ea6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f06f 0202 	mvn.w	r2, #2
 8005eae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3b20      	subs	r3, #32
 8005eb4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	08005ec9 	.word	0x08005ec9

08005ec8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <prvTaskExitError+0x54>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d00a      	beq.n	8005ef2 <prvTaskExitError+0x2a>
        __asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	60fb      	str	r3, [r7, #12]
    }
 8005eee:	bf00      	nop
 8005ef0:	e7fe      	b.n	8005ef0 <prvTaskExitError+0x28>
        __asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	60bb      	str	r3, [r7, #8]
    }
 8005f04:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005f06:	bf00      	nop
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0fc      	beq.n	8005f08 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005f0e:	bf00      	nop
 8005f10:	bf00      	nop
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	20000010 	.word	0x20000010

08005f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <pxCurrentTCBConst2>)
 8005f22:	6819      	ldr	r1, [r3, #0]
 8005f24:	6808      	ldr	r0, [r1, #0]
 8005f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2a:	f380 8809 	msr	PSP, r0
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f380 8811 	msr	BASEPRI, r0
 8005f3a:	4770      	bx	lr
 8005f3c:	f3af 8000 	nop.w

08005f40 <pxCurrentTCBConst2>:
 8005f40:	20000278 	.word	0x20000278
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop

08005f48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005f48:	4808      	ldr	r0, [pc, #32]	; (8005f6c <prvPortStartFirstTask+0x24>)
 8005f4a:	6800      	ldr	r0, [r0, #0]
 8005f4c:	6800      	ldr	r0, [r0, #0]
 8005f4e:	f380 8808 	msr	MSP, r0
 8005f52:	f04f 0000 	mov.w	r0, #0
 8005f56:	f380 8814 	msr	CONTROL, r0
 8005f5a:	b662      	cpsie	i
 8005f5c:	b661      	cpsie	f
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	df00      	svc	0
 8005f68:	bf00      	nop
 8005f6a:	0000      	.short	0x0000
 8005f6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop

08005f74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f7a:	4b46      	ldr	r3, [pc, #280]	; (8006094 <xPortStartScheduler+0x120>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a46      	ldr	r2, [pc, #280]	; (8006098 <xPortStartScheduler+0x124>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d10a      	bne.n	8005f9a <xPortStartScheduler+0x26>
        __asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	613b      	str	r3, [r7, #16]
    }
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f9a:	4b3e      	ldr	r3, [pc, #248]	; (8006094 <xPortStartScheduler+0x120>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a3f      	ldr	r2, [pc, #252]	; (800609c <xPortStartScheduler+0x128>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d10a      	bne.n	8005fba <xPortStartScheduler+0x46>
        __asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	60fb      	str	r3, [r7, #12]
    }
 8005fb6:	bf00      	nop
 8005fb8:	e7fe      	b.n	8005fb8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fba:	4b39      	ldr	r3, [pc, #228]	; (80060a0 <xPortStartScheduler+0x12c>)
 8005fbc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	22ff      	movs	r2, #255	; 0xff
 8005fca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	4b31      	ldr	r3, [pc, #196]	; (80060a4 <xPortStartScheduler+0x130>)
 8005fe0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fe2:	4b31      	ldr	r3, [pc, #196]	; (80060a8 <xPortStartScheduler+0x134>)
 8005fe4:	2207      	movs	r2, #7
 8005fe6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fe8:	e009      	b.n	8005ffe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005fea:	4b2f      	ldr	r3, [pc, #188]	; (80060a8 <xPortStartScheduler+0x134>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	4a2d      	ldr	r2, [pc, #180]	; (80060a8 <xPortStartScheduler+0x134>)
 8005ff2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006006:	2b80      	cmp	r3, #128	; 0x80
 8006008:	d0ef      	beq.n	8005fea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800600a:	4b27      	ldr	r3, [pc, #156]	; (80060a8 <xPortStartScheduler+0x134>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f1c3 0307 	rsb	r3, r3, #7
 8006012:	2b04      	cmp	r3, #4
 8006014:	d00a      	beq.n	800602c <xPortStartScheduler+0xb8>
        __asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	60bb      	str	r3, [r7, #8]
    }
 8006028:	bf00      	nop
 800602a:	e7fe      	b.n	800602a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800602c:	4b1e      	ldr	r3, [pc, #120]	; (80060a8 <xPortStartScheduler+0x134>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	021b      	lsls	r3, r3, #8
 8006032:	4a1d      	ldr	r2, [pc, #116]	; (80060a8 <xPortStartScheduler+0x134>)
 8006034:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006036:	4b1c      	ldr	r3, [pc, #112]	; (80060a8 <xPortStartScheduler+0x134>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800603e:	4a1a      	ldr	r2, [pc, #104]	; (80060a8 <xPortStartScheduler+0x134>)
 8006040:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	b2da      	uxtb	r2, r3
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800604a:	4b18      	ldr	r3, [pc, #96]	; (80060ac <xPortStartScheduler+0x138>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a17      	ldr	r2, [pc, #92]	; (80060ac <xPortStartScheduler+0x138>)
 8006050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006054:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006056:	4b15      	ldr	r3, [pc, #84]	; (80060ac <xPortStartScheduler+0x138>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a14      	ldr	r2, [pc, #80]	; (80060ac <xPortStartScheduler+0x138>)
 800605c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006060:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006062:	f000 f95b 	bl	800631c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006066:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <xPortStartScheduler+0x13c>)
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800606c:	f000 f97a 	bl	8006364 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006070:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <xPortStartScheduler+0x140>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a0f      	ldr	r2, [pc, #60]	; (80060b4 <xPortStartScheduler+0x140>)
 8006076:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800607a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800607c:	f7ff ff64 	bl	8005f48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006080:	f7fe ff7e 	bl	8004f80 <vTaskSwitchContext>
    prvTaskExitError();
 8006084:	f7ff ff20 	bl	8005ec8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	e000ed00 	.word	0xe000ed00
 8006098:	410fc271 	.word	0x410fc271
 800609c:	410fc270 	.word	0x410fc270
 80060a0:	e000e400 	.word	0xe000e400
 80060a4:	200003b8 	.word	0x200003b8
 80060a8:	200003bc 	.word	0x200003bc
 80060ac:	e000ed20 	.word	0xe000ed20
 80060b0:	20000010 	.word	0x20000010
 80060b4:	e000ef34 	.word	0xe000ef34

080060b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060be:	4b37      	ldr	r3, [pc, #220]	; (800619c <vInitPrioGroupValue+0xe4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a37      	ldr	r2, [pc, #220]	; (80061a0 <vInitPrioGroupValue+0xe8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d10a      	bne.n	80060de <vInitPrioGroupValue+0x26>
        __asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	613b      	str	r3, [r7, #16]
    }
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060de:	4b2f      	ldr	r3, [pc, #188]	; (800619c <vInitPrioGroupValue+0xe4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a30      	ldr	r2, [pc, #192]	; (80061a4 <vInitPrioGroupValue+0xec>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d10a      	bne.n	80060fe <vInitPrioGroupValue+0x46>
        __asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	60fb      	str	r3, [r7, #12]
    }
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060fe:	4b2a      	ldr	r3, [pc, #168]	; (80061a8 <vInitPrioGroupValue+0xf0>)
 8006100:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	22ff      	movs	r2, #255	; 0xff
 800610e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006120:	b2da      	uxtb	r2, r3
 8006122:	4b22      	ldr	r3, [pc, #136]	; (80061ac <vInitPrioGroupValue+0xf4>)
 8006124:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006126:	4b22      	ldr	r3, [pc, #136]	; (80061b0 <vInitPrioGroupValue+0xf8>)
 8006128:	2207      	movs	r2, #7
 800612a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800612c:	e009      	b.n	8006142 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800612e:	4b20      	ldr	r3, [pc, #128]	; (80061b0 <vInitPrioGroupValue+0xf8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3b01      	subs	r3, #1
 8006134:	4a1e      	ldr	r2, [pc, #120]	; (80061b0 <vInitPrioGroupValue+0xf8>)
 8006136:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	b2db      	uxtb	r3, r3
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	b2db      	uxtb	r3, r3
 8006140:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006142:	78fb      	ldrb	r3, [r7, #3]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614a:	2b80      	cmp	r3, #128	; 0x80
 800614c:	d0ef      	beq.n	800612e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800614e:	4b18      	ldr	r3, [pc, #96]	; (80061b0 <vInitPrioGroupValue+0xf8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f1c3 0307 	rsb	r3, r3, #7
 8006156:	2b04      	cmp	r3, #4
 8006158:	d00a      	beq.n	8006170 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	60bb      	str	r3, [r7, #8]
    }
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006170:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <vInitPrioGroupValue+0xf8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	021b      	lsls	r3, r3, #8
 8006176:	4a0e      	ldr	r2, [pc, #56]	; (80061b0 <vInitPrioGroupValue+0xf8>)
 8006178:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800617a:	4b0d      	ldr	r3, [pc, #52]	; (80061b0 <vInitPrioGroupValue+0xf8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006182:	4a0b      	ldr	r2, [pc, #44]	; (80061b0 <vInitPrioGroupValue+0xf8>)
 8006184:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	e000ed00 	.word	0xe000ed00
 80061a0:	410fc271 	.word	0x410fc271
 80061a4:	410fc270 	.word	0x410fc270
 80061a8:	e000e400 	.word	0xe000e400
 80061ac:	200003b8 	.word	0x200003b8
 80061b0:	200003bc 	.word	0x200003bc

080061b4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
        __asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	607b      	str	r3, [r7, #4]
    }
 80061cc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80061ce:	4b0f      	ldr	r3, [pc, #60]	; (800620c <vPortEnterCritical+0x58>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3301      	adds	r3, #1
 80061d4:	4a0d      	ldr	r2, [pc, #52]	; (800620c <vPortEnterCritical+0x58>)
 80061d6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80061d8:	4b0c      	ldr	r3, [pc, #48]	; (800620c <vPortEnterCritical+0x58>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d10f      	bne.n	8006200 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <vPortEnterCritical+0x5c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <vPortEnterCritical+0x4c>
        __asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	603b      	str	r3, [r7, #0]
    }
 80061fc:	bf00      	nop
 80061fe:	e7fe      	b.n	80061fe <vPortEnterCritical+0x4a>
    }
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	20000010 	.word	0x20000010
 8006210:	e000ed04 	.word	0xe000ed04

08006214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800621a:	4b12      	ldr	r3, [pc, #72]	; (8006264 <vPortExitCritical+0x50>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <vPortExitCritical+0x24>
        __asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	607b      	str	r3, [r7, #4]
    }
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006238:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <vPortExitCritical+0x50>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3b01      	subs	r3, #1
 800623e:	4a09      	ldr	r2, [pc, #36]	; (8006264 <vPortExitCritical+0x50>)
 8006240:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006242:	4b08      	ldr	r3, [pc, #32]	; (8006264 <vPortExitCritical+0x50>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d105      	bne.n	8006256 <vPortExitCritical+0x42>
 800624a:	2300      	movs	r3, #0
 800624c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	f383 8811 	msr	BASEPRI, r3
    }
 8006254:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000010 	.word	0x20000010
	...

08006270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006270:	f3ef 8009 	mrs	r0, PSP
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <pxCurrentTCBConst>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	f01e 0f10 	tst.w	lr, #16
 8006280:	bf08      	it	eq
 8006282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628a:	6010      	str	r0, [r2, #0]
 800628c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006294:	f380 8811 	msr	BASEPRI, r0
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f7fe fe6e 	bl	8004f80 <vTaskSwitchContext>
 80062a4:	f04f 0000 	mov.w	r0, #0
 80062a8:	f380 8811 	msr	BASEPRI, r0
 80062ac:	bc09      	pop	{r0, r3}
 80062ae:	6819      	ldr	r1, [r3, #0]
 80062b0:	6808      	ldr	r0, [r1, #0]
 80062b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b6:	f01e 0f10 	tst.w	lr, #16
 80062ba:	bf08      	it	eq
 80062bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062c0:	f380 8809 	msr	PSP, r0
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	f3af 8000 	nop.w

080062d0 <pxCurrentTCBConst>:
 80062d0:	20000278 	.word	0x20000278
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
        __asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	607b      	str	r3, [r7, #4]
    }
 80062f0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80062f2:	f7fe fd8d 	bl	8004e10 <xTaskIncrementTick>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062fc:	4b06      	ldr	r3, [pc, #24]	; (8006318 <SysTick_Handler+0x40>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	2300      	movs	r3, #0
 8006306:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f383 8811 	msr	BASEPRI, r3
    }
 800630e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006320:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <vPortSetupTimerInterrupt+0x34>)
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <vPortSetupTimerInterrupt+0x38>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800632c:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <vPortSetupTimerInterrupt+0x3c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a0a      	ldr	r2, [pc, #40]	; (800635c <vPortSetupTimerInterrupt+0x40>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	099b      	lsrs	r3, r3, #6
 8006338:	4a09      	ldr	r2, [pc, #36]	; (8006360 <vPortSetupTimerInterrupt+0x44>)
 800633a:	3b01      	subs	r3, #1
 800633c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800633e:	4b04      	ldr	r3, [pc, #16]	; (8006350 <vPortSetupTimerInterrupt+0x34>)
 8006340:	2207      	movs	r2, #7
 8006342:	601a      	str	r2, [r3, #0]
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	e000e010 	.word	0xe000e010
 8006354:	e000e018 	.word	0xe000e018
 8006358:	20000000 	.word	0x20000000
 800635c:	10624dd3 	.word	0x10624dd3
 8006360:	e000e014 	.word	0xe000e014

08006364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006374 <vPortEnableVFP+0x10>
 8006368:	6801      	ldr	r1, [r0, #0]
 800636a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800636e:	6001      	str	r1, [r0, #0]
 8006370:	4770      	bx	lr
 8006372:	0000      	.short	0x0000
 8006374:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop

0800637c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006382:	f3ef 8305 	mrs	r3, IPSR
 8006386:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b0f      	cmp	r3, #15
 800638c:	d914      	bls.n	80063b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800638e:	4a17      	ldr	r2, [pc, #92]	; (80063ec <vPortValidateInterruptPriority+0x70>)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006398:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <vPortValidateInterruptPriority+0x74>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	7afa      	ldrb	r2, [r7, #11]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d20a      	bcs.n	80063b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	607b      	str	r3, [r7, #4]
    }
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063b8:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <vPortValidateInterruptPriority+0x78>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063c0:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <vPortValidateInterruptPriority+0x7c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d90a      	bls.n	80063de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	603b      	str	r3, [r7, #0]
    }
 80063da:	bf00      	nop
 80063dc:	e7fe      	b.n	80063dc <vPortValidateInterruptPriority+0x60>
    }
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	e000e3f0 	.word	0xe000e3f0
 80063f0:	200003b8 	.word	0x200003b8
 80063f4:	e000ed0c 	.word	0xe000ed0c
 80063f8:	200003bc 	.word	0x200003bc

080063fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08a      	sub	sp, #40	; 0x28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006404:	2300      	movs	r3, #0
 8006406:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006408:	f7fe fc48 	bl	8004c9c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800640c:	4b65      	ldr	r3, [pc, #404]	; (80065a4 <pvPortMalloc+0x1a8>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006414:	f000 f934 	bl	8006680 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006418:	4b63      	ldr	r3, [pc, #396]	; (80065a8 <pvPortMalloc+0x1ac>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4013      	ands	r3, r2
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 80a7 	bne.w	8006574 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d02d      	beq.n	8006488 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800642c:	2208      	movs	r2, #8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	429a      	cmp	r2, r3
 8006436:	d227      	bcs.n	8006488 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006438:	2208      	movs	r2, #8
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	2b00      	cmp	r3, #0
 8006448:	d021      	beq.n	800648e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	3308      	adds	r3, #8
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	429a      	cmp	r2, r3
 8006456:	d214      	bcs.n	8006482 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f023 0307 	bic.w	r3, r3, #7
 800645e:	3308      	adds	r3, #8
 8006460:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	2b00      	cmp	r3, #0
 800646a:	d010      	beq.n	800648e <pvPortMalloc+0x92>
        __asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	617b      	str	r3, [r7, #20]
    }
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006486:	e002      	b.n	800648e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	607b      	str	r3, [r7, #4]
 800648c:	e000      	b.n	8006490 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800648e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d06e      	beq.n	8006574 <pvPortMalloc+0x178>
 8006496:	4b45      	ldr	r3, [pc, #276]	; (80065ac <pvPortMalloc+0x1b0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	d869      	bhi.n	8006574 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80064a0:	4b43      	ldr	r3, [pc, #268]	; (80065b0 <pvPortMalloc+0x1b4>)
 80064a2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80064a4:	4b42      	ldr	r3, [pc, #264]	; (80065b0 <pvPortMalloc+0x1b4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064aa:	e004      	b.n	80064b6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d903      	bls.n	80064c8 <pvPortMalloc+0xcc>
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f1      	bne.n	80064ac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80064c8:	4b36      	ldr	r3, [pc, #216]	; (80065a4 <pvPortMalloc+0x1a8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d050      	beq.n	8006574 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2208      	movs	r2, #8
 80064d8:	4413      	add	r3, r2
 80064da:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	1ad2      	subs	r2, r2, r3
 80064ec:	2308      	movs	r3, #8
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d91f      	bls.n	8006534 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4413      	add	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <pvPortMalloc+0x120>
        __asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	613b      	str	r3, [r7, #16]
    }
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800652e:	69b8      	ldr	r0, [r7, #24]
 8006530:	f000 f908 	bl	8006744 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006534:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <pvPortMalloc+0x1b0>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	4a1b      	ldr	r2, [pc, #108]	; (80065ac <pvPortMalloc+0x1b0>)
 8006540:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006542:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <pvPortMalloc+0x1b0>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <pvPortMalloc+0x1b8>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d203      	bcs.n	8006556 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800654e:	4b17      	ldr	r3, [pc, #92]	; (80065ac <pvPortMalloc+0x1b0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <pvPortMalloc+0x1b8>)
 8006554:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	4b13      	ldr	r3, [pc, #76]	; (80065a8 <pvPortMalloc+0x1ac>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	431a      	orrs	r2, r3
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800656a:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <pvPortMalloc+0x1bc>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3301      	adds	r3, #1
 8006570:	4a11      	ldr	r2, [pc, #68]	; (80065b8 <pvPortMalloc+0x1bc>)
 8006572:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006574:	f7fe fba0 	bl	8004cb8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <pvPortMalloc+0x19c>
        __asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	60fb      	str	r3, [r7, #12]
    }
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <pvPortMalloc+0x19a>
    return pvReturn;
 8006598:	69fb      	ldr	r3, [r7, #28]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3728      	adds	r7, #40	; 0x28
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200193c8 	.word	0x200193c8
 80065a8:	200193dc 	.word	0x200193dc
 80065ac:	200193cc 	.word	0x200193cc
 80065b0:	200193c0 	.word	0x200193c0
 80065b4:	200193d0 	.word	0x200193d0
 80065b8:	200193d4 	.word	0x200193d4

080065bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d04d      	beq.n	800666a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80065ce:	2308      	movs	r3, #8
 80065d0:	425b      	negs	r3, r3
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4413      	add	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	4b24      	ldr	r3, [pc, #144]	; (8006674 <vPortFree+0xb8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4013      	ands	r3, r2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <vPortFree+0x44>
        __asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	60fb      	str	r3, [r7, #12]
    }
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <vPortFree+0x62>
        __asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	60bb      	str	r3, [r7, #8]
    }
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	4b14      	ldr	r3, [pc, #80]	; (8006674 <vPortFree+0xb8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4013      	ands	r3, r2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01e      	beq.n	800666a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d11a      	bne.n	800666a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	4b0e      	ldr	r3, [pc, #56]	; (8006674 <vPortFree+0xb8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	43db      	mvns	r3, r3
 800663e:	401a      	ands	r2, r3
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006644:	f7fe fb2a 	bl	8004c9c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <vPortFree+0xbc>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4413      	add	r3, r2
 8006652:	4a09      	ldr	r2, [pc, #36]	; (8006678 <vPortFree+0xbc>)
 8006654:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006656:	6938      	ldr	r0, [r7, #16]
 8006658:	f000 f874 	bl	8006744 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800665c:	4b07      	ldr	r3, [pc, #28]	; (800667c <vPortFree+0xc0>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3301      	adds	r3, #1
 8006662:	4a06      	ldr	r2, [pc, #24]	; (800667c <vPortFree+0xc0>)
 8006664:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006666:	f7fe fb27 	bl	8004cb8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800666a:	bf00      	nop
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	200193dc 	.word	0x200193dc
 8006678:	200193cc 	.word	0x200193cc
 800667c:	200193d8 	.word	0x200193d8

08006680 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006686:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800668a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800668c:	4b27      	ldr	r3, [pc, #156]	; (800672c <prvHeapInit+0xac>)
 800668e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3307      	adds	r3, #7
 800669e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0307 	bic.w	r3, r3, #7
 80066a6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	4a1f      	ldr	r2, [pc, #124]	; (800672c <prvHeapInit+0xac>)
 80066b0:	4413      	add	r3, r2
 80066b2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066b8:	4a1d      	ldr	r2, [pc, #116]	; (8006730 <prvHeapInit+0xb0>)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80066be:	4b1c      	ldr	r3, [pc, #112]	; (8006730 <prvHeapInit+0xb0>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	4413      	add	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80066cc:	2208      	movs	r2, #8
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0307 	bic.w	r3, r3, #7
 80066da:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4a15      	ldr	r2, [pc, #84]	; (8006734 <prvHeapInit+0xb4>)
 80066e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80066e2:	4b14      	ldr	r3, [pc, #80]	; (8006734 <prvHeapInit+0xb4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2200      	movs	r2, #0
 80066e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80066ea:	4b12      	ldr	r3, [pc, #72]	; (8006734 <prvHeapInit+0xb4>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	1ad2      	subs	r2, r2, r3
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006700:	4b0c      	ldr	r3, [pc, #48]	; (8006734 <prvHeapInit+0xb4>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4a0a      	ldr	r2, [pc, #40]	; (8006738 <prvHeapInit+0xb8>)
 800670e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4a09      	ldr	r2, [pc, #36]	; (800673c <prvHeapInit+0xbc>)
 8006716:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006718:	4b09      	ldr	r3, [pc, #36]	; (8006740 <prvHeapInit+0xc0>)
 800671a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800671e:	601a      	str	r2, [r3, #0]
}
 8006720:	bf00      	nop
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	200003c0 	.word	0x200003c0
 8006730:	200193c0 	.word	0x200193c0
 8006734:	200193c8 	.word	0x200193c8
 8006738:	200193d0 	.word	0x200193d0
 800673c:	200193cc 	.word	0x200193cc
 8006740:	200193dc 	.word	0x200193dc

08006744 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800674c:	4b28      	ldr	r3, [pc, #160]	; (80067f0 <prvInsertBlockIntoFreeList+0xac>)
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	e002      	b.n	8006758 <prvInsertBlockIntoFreeList+0x14>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	429a      	cmp	r2, r3
 8006760:	d8f7      	bhi.n	8006752 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	4413      	add	r3, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d108      	bne.n	8006786 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	441a      	add	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	441a      	add	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d118      	bne.n	80067cc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b15      	ldr	r3, [pc, #84]	; (80067f4 <prvInsertBlockIntoFreeList+0xb0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d00d      	beq.n	80067c2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	441a      	add	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e008      	b.n	80067d4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067c2:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <prvInsertBlockIntoFreeList+0xb0>)
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e003      	b.n	80067d4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d002      	beq.n	80067e2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80067e2:	bf00      	nop
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	200193c0 	.word	0x200193c0
 80067f4:	200193c8 	.word	0x200193c8

080067f8 <siprintf>:
 80067f8:	b40e      	push	{r1, r2, r3}
 80067fa:	b500      	push	{lr}
 80067fc:	b09c      	sub	sp, #112	; 0x70
 80067fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006800:	9002      	str	r0, [sp, #8]
 8006802:	9006      	str	r0, [sp, #24]
 8006804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006808:	4809      	ldr	r0, [pc, #36]	; (8006830 <siprintf+0x38>)
 800680a:	9107      	str	r1, [sp, #28]
 800680c:	9104      	str	r1, [sp, #16]
 800680e:	4909      	ldr	r1, [pc, #36]	; (8006834 <siprintf+0x3c>)
 8006810:	f853 2b04 	ldr.w	r2, [r3], #4
 8006814:	9105      	str	r1, [sp, #20]
 8006816:	6800      	ldr	r0, [r0, #0]
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	a902      	add	r1, sp, #8
 800681c:	f000 f9a0 	bl	8006b60 <_svfiprintf_r>
 8006820:	9b02      	ldr	r3, [sp, #8]
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	b01c      	add	sp, #112	; 0x70
 8006828:	f85d eb04 	ldr.w	lr, [sp], #4
 800682c:	b003      	add	sp, #12
 800682e:	4770      	bx	lr
 8006830:	20000060 	.word	0x20000060
 8006834:	ffff0208 	.word	0xffff0208

08006838 <memset>:
 8006838:	4402      	add	r2, r0
 800683a:	4603      	mov	r3, r0
 800683c:	4293      	cmp	r3, r2
 800683e:	d100      	bne.n	8006842 <memset+0xa>
 8006840:	4770      	bx	lr
 8006842:	f803 1b01 	strb.w	r1, [r3], #1
 8006846:	e7f9      	b.n	800683c <memset+0x4>

08006848 <__errno>:
 8006848:	4b01      	ldr	r3, [pc, #4]	; (8006850 <__errno+0x8>)
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20000060 	.word	0x20000060

08006854 <__libc_init_array>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	4d0d      	ldr	r5, [pc, #52]	; (800688c <__libc_init_array+0x38>)
 8006858:	4c0d      	ldr	r4, [pc, #52]	; (8006890 <__libc_init_array+0x3c>)
 800685a:	1b64      	subs	r4, r4, r5
 800685c:	10a4      	asrs	r4, r4, #2
 800685e:	2600      	movs	r6, #0
 8006860:	42a6      	cmp	r6, r4
 8006862:	d109      	bne.n	8006878 <__libc_init_array+0x24>
 8006864:	4d0b      	ldr	r5, [pc, #44]	; (8006894 <__libc_init_array+0x40>)
 8006866:	4c0c      	ldr	r4, [pc, #48]	; (8006898 <__libc_init_array+0x44>)
 8006868:	f000 fc6a 	bl	8007140 <_init>
 800686c:	1b64      	subs	r4, r4, r5
 800686e:	10a4      	asrs	r4, r4, #2
 8006870:	2600      	movs	r6, #0
 8006872:	42a6      	cmp	r6, r4
 8006874:	d105      	bne.n	8006882 <__libc_init_array+0x2e>
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	f855 3b04 	ldr.w	r3, [r5], #4
 800687c:	4798      	blx	r3
 800687e:	3601      	adds	r6, #1
 8006880:	e7ee      	b.n	8006860 <__libc_init_array+0xc>
 8006882:	f855 3b04 	ldr.w	r3, [r5], #4
 8006886:	4798      	blx	r3
 8006888:	3601      	adds	r6, #1
 800688a:	e7f2      	b.n	8006872 <__libc_init_array+0x1e>
 800688c:	0800728c 	.word	0x0800728c
 8006890:	0800728c 	.word	0x0800728c
 8006894:	0800728c 	.word	0x0800728c
 8006898:	08007290 	.word	0x08007290

0800689c <__retarget_lock_acquire_recursive>:
 800689c:	4770      	bx	lr

0800689e <__retarget_lock_release_recursive>:
 800689e:	4770      	bx	lr

080068a0 <memcpy>:
 80068a0:	440a      	add	r2, r1
 80068a2:	4291      	cmp	r1, r2
 80068a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80068a8:	d100      	bne.n	80068ac <memcpy+0xc>
 80068aa:	4770      	bx	lr
 80068ac:	b510      	push	{r4, lr}
 80068ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068b6:	4291      	cmp	r1, r2
 80068b8:	d1f9      	bne.n	80068ae <memcpy+0xe>
 80068ba:	bd10      	pop	{r4, pc}

080068bc <_free_r>:
 80068bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068be:	2900      	cmp	r1, #0
 80068c0:	d044      	beq.n	800694c <_free_r+0x90>
 80068c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c6:	9001      	str	r0, [sp, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f1a1 0404 	sub.w	r4, r1, #4
 80068ce:	bfb8      	it	lt
 80068d0:	18e4      	addlt	r4, r4, r3
 80068d2:	f000 f8df 	bl	8006a94 <__malloc_lock>
 80068d6:	4a1e      	ldr	r2, [pc, #120]	; (8006950 <_free_r+0x94>)
 80068d8:	9801      	ldr	r0, [sp, #4]
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	b933      	cbnz	r3, 80068ec <_free_r+0x30>
 80068de:	6063      	str	r3, [r4, #4]
 80068e0:	6014      	str	r4, [r2, #0]
 80068e2:	b003      	add	sp, #12
 80068e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068e8:	f000 b8da 	b.w	8006aa0 <__malloc_unlock>
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	d908      	bls.n	8006902 <_free_r+0x46>
 80068f0:	6825      	ldr	r5, [r4, #0]
 80068f2:	1961      	adds	r1, r4, r5
 80068f4:	428b      	cmp	r3, r1
 80068f6:	bf01      	itttt	eq
 80068f8:	6819      	ldreq	r1, [r3, #0]
 80068fa:	685b      	ldreq	r3, [r3, #4]
 80068fc:	1949      	addeq	r1, r1, r5
 80068fe:	6021      	streq	r1, [r4, #0]
 8006900:	e7ed      	b.n	80068de <_free_r+0x22>
 8006902:	461a      	mov	r2, r3
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	b10b      	cbz	r3, 800690c <_free_r+0x50>
 8006908:	42a3      	cmp	r3, r4
 800690a:	d9fa      	bls.n	8006902 <_free_r+0x46>
 800690c:	6811      	ldr	r1, [r2, #0]
 800690e:	1855      	adds	r5, r2, r1
 8006910:	42a5      	cmp	r5, r4
 8006912:	d10b      	bne.n	800692c <_free_r+0x70>
 8006914:	6824      	ldr	r4, [r4, #0]
 8006916:	4421      	add	r1, r4
 8006918:	1854      	adds	r4, r2, r1
 800691a:	42a3      	cmp	r3, r4
 800691c:	6011      	str	r1, [r2, #0]
 800691e:	d1e0      	bne.n	80068e2 <_free_r+0x26>
 8006920:	681c      	ldr	r4, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	6053      	str	r3, [r2, #4]
 8006926:	440c      	add	r4, r1
 8006928:	6014      	str	r4, [r2, #0]
 800692a:	e7da      	b.n	80068e2 <_free_r+0x26>
 800692c:	d902      	bls.n	8006934 <_free_r+0x78>
 800692e:	230c      	movs	r3, #12
 8006930:	6003      	str	r3, [r0, #0]
 8006932:	e7d6      	b.n	80068e2 <_free_r+0x26>
 8006934:	6825      	ldr	r5, [r4, #0]
 8006936:	1961      	adds	r1, r4, r5
 8006938:	428b      	cmp	r3, r1
 800693a:	bf04      	itt	eq
 800693c:	6819      	ldreq	r1, [r3, #0]
 800693e:	685b      	ldreq	r3, [r3, #4]
 8006940:	6063      	str	r3, [r4, #4]
 8006942:	bf04      	itt	eq
 8006944:	1949      	addeq	r1, r1, r5
 8006946:	6021      	streq	r1, [r4, #0]
 8006948:	6054      	str	r4, [r2, #4]
 800694a:	e7ca      	b.n	80068e2 <_free_r+0x26>
 800694c:	b003      	add	sp, #12
 800694e:	bd30      	pop	{r4, r5, pc}
 8006950:	20019520 	.word	0x20019520

08006954 <sbrk_aligned>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	4e0e      	ldr	r6, [pc, #56]	; (8006990 <sbrk_aligned+0x3c>)
 8006958:	460c      	mov	r4, r1
 800695a:	6831      	ldr	r1, [r6, #0]
 800695c:	4605      	mov	r5, r0
 800695e:	b911      	cbnz	r1, 8006966 <sbrk_aligned+0x12>
 8006960:	f000 fba6 	bl	80070b0 <_sbrk_r>
 8006964:	6030      	str	r0, [r6, #0]
 8006966:	4621      	mov	r1, r4
 8006968:	4628      	mov	r0, r5
 800696a:	f000 fba1 	bl	80070b0 <_sbrk_r>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d00a      	beq.n	8006988 <sbrk_aligned+0x34>
 8006972:	1cc4      	adds	r4, r0, #3
 8006974:	f024 0403 	bic.w	r4, r4, #3
 8006978:	42a0      	cmp	r0, r4
 800697a:	d007      	beq.n	800698c <sbrk_aligned+0x38>
 800697c:	1a21      	subs	r1, r4, r0
 800697e:	4628      	mov	r0, r5
 8006980:	f000 fb96 	bl	80070b0 <_sbrk_r>
 8006984:	3001      	adds	r0, #1
 8006986:	d101      	bne.n	800698c <sbrk_aligned+0x38>
 8006988:	f04f 34ff 	mov.w	r4, #4294967295
 800698c:	4620      	mov	r0, r4
 800698e:	bd70      	pop	{r4, r5, r6, pc}
 8006990:	20019524 	.word	0x20019524

08006994 <_malloc_r>:
 8006994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006998:	1ccd      	adds	r5, r1, #3
 800699a:	f025 0503 	bic.w	r5, r5, #3
 800699e:	3508      	adds	r5, #8
 80069a0:	2d0c      	cmp	r5, #12
 80069a2:	bf38      	it	cc
 80069a4:	250c      	movcc	r5, #12
 80069a6:	2d00      	cmp	r5, #0
 80069a8:	4607      	mov	r7, r0
 80069aa:	db01      	blt.n	80069b0 <_malloc_r+0x1c>
 80069ac:	42a9      	cmp	r1, r5
 80069ae:	d905      	bls.n	80069bc <_malloc_r+0x28>
 80069b0:	230c      	movs	r3, #12
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	2600      	movs	r6, #0
 80069b6:	4630      	mov	r0, r6
 80069b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a90 <_malloc_r+0xfc>
 80069c0:	f000 f868 	bl	8006a94 <__malloc_lock>
 80069c4:	f8d8 3000 	ldr.w	r3, [r8]
 80069c8:	461c      	mov	r4, r3
 80069ca:	bb5c      	cbnz	r4, 8006a24 <_malloc_r+0x90>
 80069cc:	4629      	mov	r1, r5
 80069ce:	4638      	mov	r0, r7
 80069d0:	f7ff ffc0 	bl	8006954 <sbrk_aligned>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	4604      	mov	r4, r0
 80069d8:	d155      	bne.n	8006a86 <_malloc_r+0xf2>
 80069da:	f8d8 4000 	ldr.w	r4, [r8]
 80069de:	4626      	mov	r6, r4
 80069e0:	2e00      	cmp	r6, #0
 80069e2:	d145      	bne.n	8006a70 <_malloc_r+0xdc>
 80069e4:	2c00      	cmp	r4, #0
 80069e6:	d048      	beq.n	8006a7a <_malloc_r+0xe6>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	4631      	mov	r1, r6
 80069ec:	4638      	mov	r0, r7
 80069ee:	eb04 0903 	add.w	r9, r4, r3
 80069f2:	f000 fb5d 	bl	80070b0 <_sbrk_r>
 80069f6:	4581      	cmp	r9, r0
 80069f8:	d13f      	bne.n	8006a7a <_malloc_r+0xe6>
 80069fa:	6821      	ldr	r1, [r4, #0]
 80069fc:	1a6d      	subs	r5, r5, r1
 80069fe:	4629      	mov	r1, r5
 8006a00:	4638      	mov	r0, r7
 8006a02:	f7ff ffa7 	bl	8006954 <sbrk_aligned>
 8006a06:	3001      	adds	r0, #1
 8006a08:	d037      	beq.n	8006a7a <_malloc_r+0xe6>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	442b      	add	r3, r5
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	f8d8 3000 	ldr.w	r3, [r8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d038      	beq.n	8006a8a <_malloc_r+0xf6>
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	42a2      	cmp	r2, r4
 8006a1c:	d12b      	bne.n	8006a76 <_malloc_r+0xe2>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	605a      	str	r2, [r3, #4]
 8006a22:	e00f      	b.n	8006a44 <_malloc_r+0xb0>
 8006a24:	6822      	ldr	r2, [r4, #0]
 8006a26:	1b52      	subs	r2, r2, r5
 8006a28:	d41f      	bmi.n	8006a6a <_malloc_r+0xd6>
 8006a2a:	2a0b      	cmp	r2, #11
 8006a2c:	d917      	bls.n	8006a5e <_malloc_r+0xca>
 8006a2e:	1961      	adds	r1, r4, r5
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	6025      	str	r5, [r4, #0]
 8006a34:	bf18      	it	ne
 8006a36:	6059      	strne	r1, [r3, #4]
 8006a38:	6863      	ldr	r3, [r4, #4]
 8006a3a:	bf08      	it	eq
 8006a3c:	f8c8 1000 	streq.w	r1, [r8]
 8006a40:	5162      	str	r2, [r4, r5]
 8006a42:	604b      	str	r3, [r1, #4]
 8006a44:	4638      	mov	r0, r7
 8006a46:	f104 060b 	add.w	r6, r4, #11
 8006a4a:	f000 f829 	bl	8006aa0 <__malloc_unlock>
 8006a4e:	f026 0607 	bic.w	r6, r6, #7
 8006a52:	1d23      	adds	r3, r4, #4
 8006a54:	1af2      	subs	r2, r6, r3
 8006a56:	d0ae      	beq.n	80069b6 <_malloc_r+0x22>
 8006a58:	1b9b      	subs	r3, r3, r6
 8006a5a:	50a3      	str	r3, [r4, r2]
 8006a5c:	e7ab      	b.n	80069b6 <_malloc_r+0x22>
 8006a5e:	42a3      	cmp	r3, r4
 8006a60:	6862      	ldr	r2, [r4, #4]
 8006a62:	d1dd      	bne.n	8006a20 <_malloc_r+0x8c>
 8006a64:	f8c8 2000 	str.w	r2, [r8]
 8006a68:	e7ec      	b.n	8006a44 <_malloc_r+0xb0>
 8006a6a:	4623      	mov	r3, r4
 8006a6c:	6864      	ldr	r4, [r4, #4]
 8006a6e:	e7ac      	b.n	80069ca <_malloc_r+0x36>
 8006a70:	4634      	mov	r4, r6
 8006a72:	6876      	ldr	r6, [r6, #4]
 8006a74:	e7b4      	b.n	80069e0 <_malloc_r+0x4c>
 8006a76:	4613      	mov	r3, r2
 8006a78:	e7cc      	b.n	8006a14 <_malloc_r+0x80>
 8006a7a:	230c      	movs	r3, #12
 8006a7c:	603b      	str	r3, [r7, #0]
 8006a7e:	4638      	mov	r0, r7
 8006a80:	f000 f80e 	bl	8006aa0 <__malloc_unlock>
 8006a84:	e797      	b.n	80069b6 <_malloc_r+0x22>
 8006a86:	6025      	str	r5, [r4, #0]
 8006a88:	e7dc      	b.n	8006a44 <_malloc_r+0xb0>
 8006a8a:	605b      	str	r3, [r3, #4]
 8006a8c:	deff      	udf	#255	; 0xff
 8006a8e:	bf00      	nop
 8006a90:	20019520 	.word	0x20019520

08006a94 <__malloc_lock>:
 8006a94:	4801      	ldr	r0, [pc, #4]	; (8006a9c <__malloc_lock+0x8>)
 8006a96:	f7ff bf01 	b.w	800689c <__retarget_lock_acquire_recursive>
 8006a9a:	bf00      	nop
 8006a9c:	2001951c 	.word	0x2001951c

08006aa0 <__malloc_unlock>:
 8006aa0:	4801      	ldr	r0, [pc, #4]	; (8006aa8 <__malloc_unlock+0x8>)
 8006aa2:	f7ff befc 	b.w	800689e <__retarget_lock_release_recursive>
 8006aa6:	bf00      	nop
 8006aa8:	2001951c 	.word	0x2001951c

08006aac <__ssputs_r>:
 8006aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	688e      	ldr	r6, [r1, #8]
 8006ab2:	461f      	mov	r7, r3
 8006ab4:	42be      	cmp	r6, r7
 8006ab6:	680b      	ldr	r3, [r1, #0]
 8006ab8:	4682      	mov	sl, r0
 8006aba:	460c      	mov	r4, r1
 8006abc:	4690      	mov	r8, r2
 8006abe:	d82c      	bhi.n	8006b1a <__ssputs_r+0x6e>
 8006ac0:	898a      	ldrh	r2, [r1, #12]
 8006ac2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ac6:	d026      	beq.n	8006b16 <__ssputs_r+0x6a>
 8006ac8:	6965      	ldr	r5, [r4, #20]
 8006aca:	6909      	ldr	r1, [r1, #16]
 8006acc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ad0:	eba3 0901 	sub.w	r9, r3, r1
 8006ad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ad8:	1c7b      	adds	r3, r7, #1
 8006ada:	444b      	add	r3, r9
 8006adc:	106d      	asrs	r5, r5, #1
 8006ade:	429d      	cmp	r5, r3
 8006ae0:	bf38      	it	cc
 8006ae2:	461d      	movcc	r5, r3
 8006ae4:	0553      	lsls	r3, r2, #21
 8006ae6:	d527      	bpl.n	8006b38 <__ssputs_r+0x8c>
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7ff ff53 	bl	8006994 <_malloc_r>
 8006aee:	4606      	mov	r6, r0
 8006af0:	b360      	cbz	r0, 8006b4c <__ssputs_r+0xa0>
 8006af2:	6921      	ldr	r1, [r4, #16]
 8006af4:	464a      	mov	r2, r9
 8006af6:	f7ff fed3 	bl	80068a0 <memcpy>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	6126      	str	r6, [r4, #16]
 8006b08:	6165      	str	r5, [r4, #20]
 8006b0a:	444e      	add	r6, r9
 8006b0c:	eba5 0509 	sub.w	r5, r5, r9
 8006b10:	6026      	str	r6, [r4, #0]
 8006b12:	60a5      	str	r5, [r4, #8]
 8006b14:	463e      	mov	r6, r7
 8006b16:	42be      	cmp	r6, r7
 8006b18:	d900      	bls.n	8006b1c <__ssputs_r+0x70>
 8006b1a:	463e      	mov	r6, r7
 8006b1c:	6820      	ldr	r0, [r4, #0]
 8006b1e:	4632      	mov	r2, r6
 8006b20:	4641      	mov	r1, r8
 8006b22:	f000 faab 	bl	800707c <memmove>
 8006b26:	68a3      	ldr	r3, [r4, #8]
 8006b28:	1b9b      	subs	r3, r3, r6
 8006b2a:	60a3      	str	r3, [r4, #8]
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	4433      	add	r3, r6
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	2000      	movs	r0, #0
 8006b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b38:	462a      	mov	r2, r5
 8006b3a:	f000 fac9 	bl	80070d0 <_realloc_r>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d1e0      	bne.n	8006b06 <__ssputs_r+0x5a>
 8006b44:	6921      	ldr	r1, [r4, #16]
 8006b46:	4650      	mov	r0, sl
 8006b48:	f7ff feb8 	bl	80068bc <_free_r>
 8006b4c:	230c      	movs	r3, #12
 8006b4e:	f8ca 3000 	str.w	r3, [sl]
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b58:	81a3      	strh	r3, [r4, #12]
 8006b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5e:	e7e9      	b.n	8006b34 <__ssputs_r+0x88>

08006b60 <_svfiprintf_r>:
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	4698      	mov	r8, r3
 8006b66:	898b      	ldrh	r3, [r1, #12]
 8006b68:	061b      	lsls	r3, r3, #24
 8006b6a:	b09d      	sub	sp, #116	; 0x74
 8006b6c:	4607      	mov	r7, r0
 8006b6e:	460d      	mov	r5, r1
 8006b70:	4614      	mov	r4, r2
 8006b72:	d50e      	bpl.n	8006b92 <_svfiprintf_r+0x32>
 8006b74:	690b      	ldr	r3, [r1, #16]
 8006b76:	b963      	cbnz	r3, 8006b92 <_svfiprintf_r+0x32>
 8006b78:	2140      	movs	r1, #64	; 0x40
 8006b7a:	f7ff ff0b 	bl	8006994 <_malloc_r>
 8006b7e:	6028      	str	r0, [r5, #0]
 8006b80:	6128      	str	r0, [r5, #16]
 8006b82:	b920      	cbnz	r0, 8006b8e <_svfiprintf_r+0x2e>
 8006b84:	230c      	movs	r3, #12
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	e0d0      	b.n	8006d30 <_svfiprintf_r+0x1d0>
 8006b8e:	2340      	movs	r3, #64	; 0x40
 8006b90:	616b      	str	r3, [r5, #20]
 8006b92:	2300      	movs	r3, #0
 8006b94:	9309      	str	r3, [sp, #36]	; 0x24
 8006b96:	2320      	movs	r3, #32
 8006b98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ba0:	2330      	movs	r3, #48	; 0x30
 8006ba2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d48 <_svfiprintf_r+0x1e8>
 8006ba6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006baa:	f04f 0901 	mov.w	r9, #1
 8006bae:	4623      	mov	r3, r4
 8006bb0:	469a      	mov	sl, r3
 8006bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bb6:	b10a      	cbz	r2, 8006bbc <_svfiprintf_r+0x5c>
 8006bb8:	2a25      	cmp	r2, #37	; 0x25
 8006bba:	d1f9      	bne.n	8006bb0 <_svfiprintf_r+0x50>
 8006bbc:	ebba 0b04 	subs.w	fp, sl, r4
 8006bc0:	d00b      	beq.n	8006bda <_svfiprintf_r+0x7a>
 8006bc2:	465b      	mov	r3, fp
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	4638      	mov	r0, r7
 8006bca:	f7ff ff6f 	bl	8006aac <__ssputs_r>
 8006bce:	3001      	adds	r0, #1
 8006bd0:	f000 80a9 	beq.w	8006d26 <_svfiprintf_r+0x1c6>
 8006bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bd6:	445a      	add	r2, fp
 8006bd8:	9209      	str	r2, [sp, #36]	; 0x24
 8006bda:	f89a 3000 	ldrb.w	r3, [sl]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 80a1 	beq.w	8006d26 <_svfiprintf_r+0x1c6>
 8006be4:	2300      	movs	r3, #0
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bee:	f10a 0a01 	add.w	sl, sl, #1
 8006bf2:	9304      	str	r3, [sp, #16]
 8006bf4:	9307      	str	r3, [sp, #28]
 8006bf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bfa:	931a      	str	r3, [sp, #104]	; 0x68
 8006bfc:	4654      	mov	r4, sl
 8006bfe:	2205      	movs	r2, #5
 8006c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c04:	4850      	ldr	r0, [pc, #320]	; (8006d48 <_svfiprintf_r+0x1e8>)
 8006c06:	f7f9 faeb 	bl	80001e0 <memchr>
 8006c0a:	9a04      	ldr	r2, [sp, #16]
 8006c0c:	b9d8      	cbnz	r0, 8006c46 <_svfiprintf_r+0xe6>
 8006c0e:	06d0      	lsls	r0, r2, #27
 8006c10:	bf44      	itt	mi
 8006c12:	2320      	movmi	r3, #32
 8006c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c18:	0711      	lsls	r1, r2, #28
 8006c1a:	bf44      	itt	mi
 8006c1c:	232b      	movmi	r3, #43	; 0x2b
 8006c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c22:	f89a 3000 	ldrb.w	r3, [sl]
 8006c26:	2b2a      	cmp	r3, #42	; 0x2a
 8006c28:	d015      	beq.n	8006c56 <_svfiprintf_r+0xf6>
 8006c2a:	9a07      	ldr	r2, [sp, #28]
 8006c2c:	4654      	mov	r4, sl
 8006c2e:	2000      	movs	r0, #0
 8006c30:	f04f 0c0a 	mov.w	ip, #10
 8006c34:	4621      	mov	r1, r4
 8006c36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c3a:	3b30      	subs	r3, #48	; 0x30
 8006c3c:	2b09      	cmp	r3, #9
 8006c3e:	d94d      	bls.n	8006cdc <_svfiprintf_r+0x17c>
 8006c40:	b1b0      	cbz	r0, 8006c70 <_svfiprintf_r+0x110>
 8006c42:	9207      	str	r2, [sp, #28]
 8006c44:	e014      	b.n	8006c70 <_svfiprintf_r+0x110>
 8006c46:	eba0 0308 	sub.w	r3, r0, r8
 8006c4a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	9304      	str	r3, [sp, #16]
 8006c52:	46a2      	mov	sl, r4
 8006c54:	e7d2      	b.n	8006bfc <_svfiprintf_r+0x9c>
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	1d19      	adds	r1, r3, #4
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	9103      	str	r1, [sp, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	bfbb      	ittet	lt
 8006c62:	425b      	neglt	r3, r3
 8006c64:	f042 0202 	orrlt.w	r2, r2, #2
 8006c68:	9307      	strge	r3, [sp, #28]
 8006c6a:	9307      	strlt	r3, [sp, #28]
 8006c6c:	bfb8      	it	lt
 8006c6e:	9204      	strlt	r2, [sp, #16]
 8006c70:	7823      	ldrb	r3, [r4, #0]
 8006c72:	2b2e      	cmp	r3, #46	; 0x2e
 8006c74:	d10c      	bne.n	8006c90 <_svfiprintf_r+0x130>
 8006c76:	7863      	ldrb	r3, [r4, #1]
 8006c78:	2b2a      	cmp	r3, #42	; 0x2a
 8006c7a:	d134      	bne.n	8006ce6 <_svfiprintf_r+0x186>
 8006c7c:	9b03      	ldr	r3, [sp, #12]
 8006c7e:	1d1a      	adds	r2, r3, #4
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	9203      	str	r2, [sp, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bfb8      	it	lt
 8006c88:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c8c:	3402      	adds	r4, #2
 8006c8e:	9305      	str	r3, [sp, #20]
 8006c90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006d58 <_svfiprintf_r+0x1f8>
 8006c94:	7821      	ldrb	r1, [r4, #0]
 8006c96:	2203      	movs	r2, #3
 8006c98:	4650      	mov	r0, sl
 8006c9a:	f7f9 faa1 	bl	80001e0 <memchr>
 8006c9e:	b138      	cbz	r0, 8006cb0 <_svfiprintf_r+0x150>
 8006ca0:	9b04      	ldr	r3, [sp, #16]
 8006ca2:	eba0 000a 	sub.w	r0, r0, sl
 8006ca6:	2240      	movs	r2, #64	; 0x40
 8006ca8:	4082      	lsls	r2, r0
 8006caa:	4313      	orrs	r3, r2
 8006cac:	3401      	adds	r4, #1
 8006cae:	9304      	str	r3, [sp, #16]
 8006cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb4:	4825      	ldr	r0, [pc, #148]	; (8006d4c <_svfiprintf_r+0x1ec>)
 8006cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cba:	2206      	movs	r2, #6
 8006cbc:	f7f9 fa90 	bl	80001e0 <memchr>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d038      	beq.n	8006d36 <_svfiprintf_r+0x1d6>
 8006cc4:	4b22      	ldr	r3, [pc, #136]	; (8006d50 <_svfiprintf_r+0x1f0>)
 8006cc6:	bb1b      	cbnz	r3, 8006d10 <_svfiprintf_r+0x1b0>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	3307      	adds	r3, #7
 8006ccc:	f023 0307 	bic.w	r3, r3, #7
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	9303      	str	r3, [sp, #12]
 8006cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd6:	4433      	add	r3, r6
 8006cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cda:	e768      	b.n	8006bae <_svfiprintf_r+0x4e>
 8006cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	e7a6      	b.n	8006c34 <_svfiprintf_r+0xd4>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	3401      	adds	r4, #1
 8006cea:	9305      	str	r3, [sp, #20]
 8006cec:	4619      	mov	r1, r3
 8006cee:	f04f 0c0a 	mov.w	ip, #10
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cf8:	3a30      	subs	r2, #48	; 0x30
 8006cfa:	2a09      	cmp	r2, #9
 8006cfc:	d903      	bls.n	8006d06 <_svfiprintf_r+0x1a6>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0c6      	beq.n	8006c90 <_svfiprintf_r+0x130>
 8006d02:	9105      	str	r1, [sp, #20]
 8006d04:	e7c4      	b.n	8006c90 <_svfiprintf_r+0x130>
 8006d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e7f0      	b.n	8006cf2 <_svfiprintf_r+0x192>
 8006d10:	ab03      	add	r3, sp, #12
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	462a      	mov	r2, r5
 8006d16:	4b0f      	ldr	r3, [pc, #60]	; (8006d54 <_svfiprintf_r+0x1f4>)
 8006d18:	a904      	add	r1, sp, #16
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	f3af 8000 	nop.w
 8006d20:	1c42      	adds	r2, r0, #1
 8006d22:	4606      	mov	r6, r0
 8006d24:	d1d6      	bne.n	8006cd4 <_svfiprintf_r+0x174>
 8006d26:	89ab      	ldrh	r3, [r5, #12]
 8006d28:	065b      	lsls	r3, r3, #25
 8006d2a:	f53f af2d 	bmi.w	8006b88 <_svfiprintf_r+0x28>
 8006d2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d30:	b01d      	add	sp, #116	; 0x74
 8006d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d36:	ab03      	add	r3, sp, #12
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	462a      	mov	r2, r5
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <_svfiprintf_r+0x1f4>)
 8006d3e:	a904      	add	r1, sp, #16
 8006d40:	4638      	mov	r0, r7
 8006d42:	f000 f879 	bl	8006e38 <_printf_i>
 8006d46:	e7eb      	b.n	8006d20 <_svfiprintf_r+0x1c0>
 8006d48:	08007250 	.word	0x08007250
 8006d4c:	0800725a 	.word	0x0800725a
 8006d50:	00000000 	.word	0x00000000
 8006d54:	08006aad 	.word	0x08006aad
 8006d58:	08007256 	.word	0x08007256

08006d5c <_printf_common>:
 8006d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d60:	4616      	mov	r6, r2
 8006d62:	4699      	mov	r9, r3
 8006d64:	688a      	ldr	r2, [r1, #8]
 8006d66:	690b      	ldr	r3, [r1, #16]
 8006d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	bfb8      	it	lt
 8006d70:	4613      	movlt	r3, r2
 8006d72:	6033      	str	r3, [r6, #0]
 8006d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d78:	4607      	mov	r7, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	b10a      	cbz	r2, 8006d82 <_printf_common+0x26>
 8006d7e:	3301      	adds	r3, #1
 8006d80:	6033      	str	r3, [r6, #0]
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	0699      	lsls	r1, r3, #26
 8006d86:	bf42      	ittt	mi
 8006d88:	6833      	ldrmi	r3, [r6, #0]
 8006d8a:	3302      	addmi	r3, #2
 8006d8c:	6033      	strmi	r3, [r6, #0]
 8006d8e:	6825      	ldr	r5, [r4, #0]
 8006d90:	f015 0506 	ands.w	r5, r5, #6
 8006d94:	d106      	bne.n	8006da4 <_printf_common+0x48>
 8006d96:	f104 0a19 	add.w	sl, r4, #25
 8006d9a:	68e3      	ldr	r3, [r4, #12]
 8006d9c:	6832      	ldr	r2, [r6, #0]
 8006d9e:	1a9b      	subs	r3, r3, r2
 8006da0:	42ab      	cmp	r3, r5
 8006da2:	dc26      	bgt.n	8006df2 <_printf_common+0x96>
 8006da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006da8:	1e13      	subs	r3, r2, #0
 8006daa:	6822      	ldr	r2, [r4, #0]
 8006dac:	bf18      	it	ne
 8006dae:	2301      	movne	r3, #1
 8006db0:	0692      	lsls	r2, r2, #26
 8006db2:	d42b      	bmi.n	8006e0c <_printf_common+0xb0>
 8006db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006db8:	4649      	mov	r1, r9
 8006dba:	4638      	mov	r0, r7
 8006dbc:	47c0      	blx	r8
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	d01e      	beq.n	8006e00 <_printf_common+0xa4>
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	6922      	ldr	r2, [r4, #16]
 8006dc6:	f003 0306 	and.w	r3, r3, #6
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	bf02      	ittt	eq
 8006dce:	68e5      	ldreq	r5, [r4, #12]
 8006dd0:	6833      	ldreq	r3, [r6, #0]
 8006dd2:	1aed      	subeq	r5, r5, r3
 8006dd4:	68a3      	ldr	r3, [r4, #8]
 8006dd6:	bf0c      	ite	eq
 8006dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ddc:	2500      	movne	r5, #0
 8006dde:	4293      	cmp	r3, r2
 8006de0:	bfc4      	itt	gt
 8006de2:	1a9b      	subgt	r3, r3, r2
 8006de4:	18ed      	addgt	r5, r5, r3
 8006de6:	2600      	movs	r6, #0
 8006de8:	341a      	adds	r4, #26
 8006dea:	42b5      	cmp	r5, r6
 8006dec:	d11a      	bne.n	8006e24 <_printf_common+0xc8>
 8006dee:	2000      	movs	r0, #0
 8006df0:	e008      	b.n	8006e04 <_printf_common+0xa8>
 8006df2:	2301      	movs	r3, #1
 8006df4:	4652      	mov	r2, sl
 8006df6:	4649      	mov	r1, r9
 8006df8:	4638      	mov	r0, r7
 8006dfa:	47c0      	blx	r8
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d103      	bne.n	8006e08 <_printf_common+0xac>
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295
 8006e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e08:	3501      	adds	r5, #1
 8006e0a:	e7c6      	b.n	8006d9a <_printf_common+0x3e>
 8006e0c:	18e1      	adds	r1, r4, r3
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	2030      	movs	r0, #48	; 0x30
 8006e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e16:	4422      	add	r2, r4
 8006e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e20:	3302      	adds	r3, #2
 8006e22:	e7c7      	b.n	8006db4 <_printf_common+0x58>
 8006e24:	2301      	movs	r3, #1
 8006e26:	4622      	mov	r2, r4
 8006e28:	4649      	mov	r1, r9
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	47c0      	blx	r8
 8006e2e:	3001      	adds	r0, #1
 8006e30:	d0e6      	beq.n	8006e00 <_printf_common+0xa4>
 8006e32:	3601      	adds	r6, #1
 8006e34:	e7d9      	b.n	8006dea <_printf_common+0x8e>
	...

08006e38 <_printf_i>:
 8006e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	7e0f      	ldrb	r7, [r1, #24]
 8006e3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e40:	2f78      	cmp	r7, #120	; 0x78
 8006e42:	4691      	mov	r9, r2
 8006e44:	4680      	mov	r8, r0
 8006e46:	460c      	mov	r4, r1
 8006e48:	469a      	mov	sl, r3
 8006e4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e4e:	d807      	bhi.n	8006e60 <_printf_i+0x28>
 8006e50:	2f62      	cmp	r7, #98	; 0x62
 8006e52:	d80a      	bhi.n	8006e6a <_printf_i+0x32>
 8006e54:	2f00      	cmp	r7, #0
 8006e56:	f000 80d4 	beq.w	8007002 <_printf_i+0x1ca>
 8006e5a:	2f58      	cmp	r7, #88	; 0x58
 8006e5c:	f000 80c0 	beq.w	8006fe0 <_printf_i+0x1a8>
 8006e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e68:	e03a      	b.n	8006ee0 <_printf_i+0xa8>
 8006e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e6e:	2b15      	cmp	r3, #21
 8006e70:	d8f6      	bhi.n	8006e60 <_printf_i+0x28>
 8006e72:	a101      	add	r1, pc, #4	; (adr r1, 8006e78 <_printf_i+0x40>)
 8006e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e78:	08006ed1 	.word	0x08006ed1
 8006e7c:	08006ee5 	.word	0x08006ee5
 8006e80:	08006e61 	.word	0x08006e61
 8006e84:	08006e61 	.word	0x08006e61
 8006e88:	08006e61 	.word	0x08006e61
 8006e8c:	08006e61 	.word	0x08006e61
 8006e90:	08006ee5 	.word	0x08006ee5
 8006e94:	08006e61 	.word	0x08006e61
 8006e98:	08006e61 	.word	0x08006e61
 8006e9c:	08006e61 	.word	0x08006e61
 8006ea0:	08006e61 	.word	0x08006e61
 8006ea4:	08006fe9 	.word	0x08006fe9
 8006ea8:	08006f11 	.word	0x08006f11
 8006eac:	08006fa3 	.word	0x08006fa3
 8006eb0:	08006e61 	.word	0x08006e61
 8006eb4:	08006e61 	.word	0x08006e61
 8006eb8:	0800700b 	.word	0x0800700b
 8006ebc:	08006e61 	.word	0x08006e61
 8006ec0:	08006f11 	.word	0x08006f11
 8006ec4:	08006e61 	.word	0x08006e61
 8006ec8:	08006e61 	.word	0x08006e61
 8006ecc:	08006fab 	.word	0x08006fab
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	1d1a      	adds	r2, r3, #4
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	602a      	str	r2, [r5, #0]
 8006ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e09f      	b.n	8007024 <_printf_i+0x1ec>
 8006ee4:	6820      	ldr	r0, [r4, #0]
 8006ee6:	682b      	ldr	r3, [r5, #0]
 8006ee8:	0607      	lsls	r7, r0, #24
 8006eea:	f103 0104 	add.w	r1, r3, #4
 8006eee:	6029      	str	r1, [r5, #0]
 8006ef0:	d501      	bpl.n	8006ef6 <_printf_i+0xbe>
 8006ef2:	681e      	ldr	r6, [r3, #0]
 8006ef4:	e003      	b.n	8006efe <_printf_i+0xc6>
 8006ef6:	0646      	lsls	r6, r0, #25
 8006ef8:	d5fb      	bpl.n	8006ef2 <_printf_i+0xba>
 8006efa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006efe:	2e00      	cmp	r6, #0
 8006f00:	da03      	bge.n	8006f0a <_printf_i+0xd2>
 8006f02:	232d      	movs	r3, #45	; 0x2d
 8006f04:	4276      	negs	r6, r6
 8006f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f0a:	485a      	ldr	r0, [pc, #360]	; (8007074 <_printf_i+0x23c>)
 8006f0c:	230a      	movs	r3, #10
 8006f0e:	e012      	b.n	8006f36 <_printf_i+0xfe>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	6820      	ldr	r0, [r4, #0]
 8006f14:	1d19      	adds	r1, r3, #4
 8006f16:	6029      	str	r1, [r5, #0]
 8006f18:	0605      	lsls	r5, r0, #24
 8006f1a:	d501      	bpl.n	8006f20 <_printf_i+0xe8>
 8006f1c:	681e      	ldr	r6, [r3, #0]
 8006f1e:	e002      	b.n	8006f26 <_printf_i+0xee>
 8006f20:	0641      	lsls	r1, r0, #25
 8006f22:	d5fb      	bpl.n	8006f1c <_printf_i+0xe4>
 8006f24:	881e      	ldrh	r6, [r3, #0]
 8006f26:	4853      	ldr	r0, [pc, #332]	; (8007074 <_printf_i+0x23c>)
 8006f28:	2f6f      	cmp	r7, #111	; 0x6f
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2308      	moveq	r3, #8
 8006f2e:	230a      	movne	r3, #10
 8006f30:	2100      	movs	r1, #0
 8006f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f36:	6865      	ldr	r5, [r4, #4]
 8006f38:	60a5      	str	r5, [r4, #8]
 8006f3a:	2d00      	cmp	r5, #0
 8006f3c:	bfa2      	ittt	ge
 8006f3e:	6821      	ldrge	r1, [r4, #0]
 8006f40:	f021 0104 	bicge.w	r1, r1, #4
 8006f44:	6021      	strge	r1, [r4, #0]
 8006f46:	b90e      	cbnz	r6, 8006f4c <_printf_i+0x114>
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	d04b      	beq.n	8006fe4 <_printf_i+0x1ac>
 8006f4c:	4615      	mov	r5, r2
 8006f4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f52:	fb03 6711 	mls	r7, r3, r1, r6
 8006f56:	5dc7      	ldrb	r7, [r0, r7]
 8006f58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f5c:	4637      	mov	r7, r6
 8006f5e:	42bb      	cmp	r3, r7
 8006f60:	460e      	mov	r6, r1
 8006f62:	d9f4      	bls.n	8006f4e <_printf_i+0x116>
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d10b      	bne.n	8006f80 <_printf_i+0x148>
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	07de      	lsls	r6, r3, #31
 8006f6c:	d508      	bpl.n	8006f80 <_printf_i+0x148>
 8006f6e:	6923      	ldr	r3, [r4, #16]
 8006f70:	6861      	ldr	r1, [r4, #4]
 8006f72:	4299      	cmp	r1, r3
 8006f74:	bfde      	ittt	le
 8006f76:	2330      	movle	r3, #48	; 0x30
 8006f78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f80:	1b52      	subs	r2, r2, r5
 8006f82:	6122      	str	r2, [r4, #16]
 8006f84:	f8cd a000 	str.w	sl, [sp]
 8006f88:	464b      	mov	r3, r9
 8006f8a:	aa03      	add	r2, sp, #12
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4640      	mov	r0, r8
 8006f90:	f7ff fee4 	bl	8006d5c <_printf_common>
 8006f94:	3001      	adds	r0, #1
 8006f96:	d14a      	bne.n	800702e <_printf_i+0x1f6>
 8006f98:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9c:	b004      	add	sp, #16
 8006f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	f043 0320 	orr.w	r3, r3, #32
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	4833      	ldr	r0, [pc, #204]	; (8007078 <_printf_i+0x240>)
 8006fac:	2778      	movs	r7, #120	; 0x78
 8006fae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	6829      	ldr	r1, [r5, #0]
 8006fb6:	061f      	lsls	r7, r3, #24
 8006fb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fbc:	d402      	bmi.n	8006fc4 <_printf_i+0x18c>
 8006fbe:	065f      	lsls	r7, r3, #25
 8006fc0:	bf48      	it	mi
 8006fc2:	b2b6      	uxthmi	r6, r6
 8006fc4:	07df      	lsls	r7, r3, #31
 8006fc6:	bf48      	it	mi
 8006fc8:	f043 0320 	orrmi.w	r3, r3, #32
 8006fcc:	6029      	str	r1, [r5, #0]
 8006fce:	bf48      	it	mi
 8006fd0:	6023      	strmi	r3, [r4, #0]
 8006fd2:	b91e      	cbnz	r6, 8006fdc <_printf_i+0x1a4>
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	f023 0320 	bic.w	r3, r3, #32
 8006fda:	6023      	str	r3, [r4, #0]
 8006fdc:	2310      	movs	r3, #16
 8006fde:	e7a7      	b.n	8006f30 <_printf_i+0xf8>
 8006fe0:	4824      	ldr	r0, [pc, #144]	; (8007074 <_printf_i+0x23c>)
 8006fe2:	e7e4      	b.n	8006fae <_printf_i+0x176>
 8006fe4:	4615      	mov	r5, r2
 8006fe6:	e7bd      	b.n	8006f64 <_printf_i+0x12c>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	6826      	ldr	r6, [r4, #0]
 8006fec:	6961      	ldr	r1, [r4, #20]
 8006fee:	1d18      	adds	r0, r3, #4
 8006ff0:	6028      	str	r0, [r5, #0]
 8006ff2:	0635      	lsls	r5, r6, #24
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	d501      	bpl.n	8006ffc <_printf_i+0x1c4>
 8006ff8:	6019      	str	r1, [r3, #0]
 8006ffa:	e002      	b.n	8007002 <_printf_i+0x1ca>
 8006ffc:	0670      	lsls	r0, r6, #25
 8006ffe:	d5fb      	bpl.n	8006ff8 <_printf_i+0x1c0>
 8007000:	8019      	strh	r1, [r3, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	4615      	mov	r5, r2
 8007008:	e7bc      	b.n	8006f84 <_printf_i+0x14c>
 800700a:	682b      	ldr	r3, [r5, #0]
 800700c:	1d1a      	adds	r2, r3, #4
 800700e:	602a      	str	r2, [r5, #0]
 8007010:	681d      	ldr	r5, [r3, #0]
 8007012:	6862      	ldr	r2, [r4, #4]
 8007014:	2100      	movs	r1, #0
 8007016:	4628      	mov	r0, r5
 8007018:	f7f9 f8e2 	bl	80001e0 <memchr>
 800701c:	b108      	cbz	r0, 8007022 <_printf_i+0x1ea>
 800701e:	1b40      	subs	r0, r0, r5
 8007020:	6060      	str	r0, [r4, #4]
 8007022:	6863      	ldr	r3, [r4, #4]
 8007024:	6123      	str	r3, [r4, #16]
 8007026:	2300      	movs	r3, #0
 8007028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800702c:	e7aa      	b.n	8006f84 <_printf_i+0x14c>
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	462a      	mov	r2, r5
 8007032:	4649      	mov	r1, r9
 8007034:	4640      	mov	r0, r8
 8007036:	47d0      	blx	sl
 8007038:	3001      	adds	r0, #1
 800703a:	d0ad      	beq.n	8006f98 <_printf_i+0x160>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	079b      	lsls	r3, r3, #30
 8007040:	d413      	bmi.n	800706a <_printf_i+0x232>
 8007042:	68e0      	ldr	r0, [r4, #12]
 8007044:	9b03      	ldr	r3, [sp, #12]
 8007046:	4298      	cmp	r0, r3
 8007048:	bfb8      	it	lt
 800704a:	4618      	movlt	r0, r3
 800704c:	e7a6      	b.n	8006f9c <_printf_i+0x164>
 800704e:	2301      	movs	r3, #1
 8007050:	4632      	mov	r2, r6
 8007052:	4649      	mov	r1, r9
 8007054:	4640      	mov	r0, r8
 8007056:	47d0      	blx	sl
 8007058:	3001      	adds	r0, #1
 800705a:	d09d      	beq.n	8006f98 <_printf_i+0x160>
 800705c:	3501      	adds	r5, #1
 800705e:	68e3      	ldr	r3, [r4, #12]
 8007060:	9903      	ldr	r1, [sp, #12]
 8007062:	1a5b      	subs	r3, r3, r1
 8007064:	42ab      	cmp	r3, r5
 8007066:	dcf2      	bgt.n	800704e <_printf_i+0x216>
 8007068:	e7eb      	b.n	8007042 <_printf_i+0x20a>
 800706a:	2500      	movs	r5, #0
 800706c:	f104 0619 	add.w	r6, r4, #25
 8007070:	e7f5      	b.n	800705e <_printf_i+0x226>
 8007072:	bf00      	nop
 8007074:	08007261 	.word	0x08007261
 8007078:	08007272 	.word	0x08007272

0800707c <memmove>:
 800707c:	4288      	cmp	r0, r1
 800707e:	b510      	push	{r4, lr}
 8007080:	eb01 0402 	add.w	r4, r1, r2
 8007084:	d902      	bls.n	800708c <memmove+0x10>
 8007086:	4284      	cmp	r4, r0
 8007088:	4623      	mov	r3, r4
 800708a:	d807      	bhi.n	800709c <memmove+0x20>
 800708c:	1e43      	subs	r3, r0, #1
 800708e:	42a1      	cmp	r1, r4
 8007090:	d008      	beq.n	80070a4 <memmove+0x28>
 8007092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800709a:	e7f8      	b.n	800708e <memmove+0x12>
 800709c:	4402      	add	r2, r0
 800709e:	4601      	mov	r1, r0
 80070a0:	428a      	cmp	r2, r1
 80070a2:	d100      	bne.n	80070a6 <memmove+0x2a>
 80070a4:	bd10      	pop	{r4, pc}
 80070a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070ae:	e7f7      	b.n	80070a0 <memmove+0x24>

080070b0 <_sbrk_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4d06      	ldr	r5, [pc, #24]	; (80070cc <_sbrk_r+0x1c>)
 80070b4:	2300      	movs	r3, #0
 80070b6:	4604      	mov	r4, r0
 80070b8:	4608      	mov	r0, r1
 80070ba:	602b      	str	r3, [r5, #0]
 80070bc:	f7f9 ff66 	bl	8000f8c <_sbrk>
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d102      	bne.n	80070ca <_sbrk_r+0x1a>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	b103      	cbz	r3, 80070ca <_sbrk_r+0x1a>
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	20019518 	.word	0x20019518

080070d0 <_realloc_r>:
 80070d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d4:	4680      	mov	r8, r0
 80070d6:	4614      	mov	r4, r2
 80070d8:	460e      	mov	r6, r1
 80070da:	b921      	cbnz	r1, 80070e6 <_realloc_r+0x16>
 80070dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070e0:	4611      	mov	r1, r2
 80070e2:	f7ff bc57 	b.w	8006994 <_malloc_r>
 80070e6:	b92a      	cbnz	r2, 80070f4 <_realloc_r+0x24>
 80070e8:	f7ff fbe8 	bl	80068bc <_free_r>
 80070ec:	4625      	mov	r5, r4
 80070ee:	4628      	mov	r0, r5
 80070f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f4:	f000 f81b 	bl	800712e <_malloc_usable_size_r>
 80070f8:	4284      	cmp	r4, r0
 80070fa:	4607      	mov	r7, r0
 80070fc:	d802      	bhi.n	8007104 <_realloc_r+0x34>
 80070fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007102:	d812      	bhi.n	800712a <_realloc_r+0x5a>
 8007104:	4621      	mov	r1, r4
 8007106:	4640      	mov	r0, r8
 8007108:	f7ff fc44 	bl	8006994 <_malloc_r>
 800710c:	4605      	mov	r5, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d0ed      	beq.n	80070ee <_realloc_r+0x1e>
 8007112:	42bc      	cmp	r4, r7
 8007114:	4622      	mov	r2, r4
 8007116:	4631      	mov	r1, r6
 8007118:	bf28      	it	cs
 800711a:	463a      	movcs	r2, r7
 800711c:	f7ff fbc0 	bl	80068a0 <memcpy>
 8007120:	4631      	mov	r1, r6
 8007122:	4640      	mov	r0, r8
 8007124:	f7ff fbca 	bl	80068bc <_free_r>
 8007128:	e7e1      	b.n	80070ee <_realloc_r+0x1e>
 800712a:	4635      	mov	r5, r6
 800712c:	e7df      	b.n	80070ee <_realloc_r+0x1e>

0800712e <_malloc_usable_size_r>:
 800712e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007132:	1f18      	subs	r0, r3, #4
 8007134:	2b00      	cmp	r3, #0
 8007136:	bfbc      	itt	lt
 8007138:	580b      	ldrlt	r3, [r1, r0]
 800713a:	18c0      	addlt	r0, r0, r3
 800713c:	4770      	bx	lr
	...

08007140 <_init>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	bf00      	nop
 8007144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007146:	bc08      	pop	{r3}
 8007148:	469e      	mov	lr, r3
 800714a:	4770      	bx	lr

0800714c <_fini>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	bf00      	nop
 8007150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007152:	bc08      	pop	{r3}
 8007154:	469e      	mov	lr, r3
 8007156:	4770      	bx	lr
